@page "/dashboard"
@using LingoLabs.App.Auth
@using LingoLabs.App.Contracts.AuthContracts
@using LingoLabs.App.Contracts.EnrollmentContracts
@using LingoLabs.App.Services.AuthServices
@using LingoLabs.App.ViewModel.AuthenticationModels
@using LingoLabs.App.ViewModel.LanguageModels
@using LingoLabs.App.ViewModel.Responses
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.Net.Http.Json
@using static MudBlazor.CategoryTypes
@using System.Net
@using ViewModel.MudBlazor
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject CustomStateProvider authStateProvider
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap" rel="stylesheet">


<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top:-10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -45px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -30px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -15px; max-width: 150px;">
    <img src="/images/homepage/jos.png" style="position: absolute; bottom: 0; right: 0; max-width: 150px;">
    <img src="/images/homepage/sus.png" style="position: absolute; top: 0; right: 0; max-width: 200px;">
</div>

@if (!IsUSerDataLoaded)
{
<MudContainer>
    <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom:50px;">
        <div class="col-md-6 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
            <div class="row">
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            </div>
        </div>
    </div>
</MudContainer>
}
else
{
    <MudContainer>
        <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom:50px;">
            <div class="col-md-6 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <div class="row">
                    <h2 style="color: #2563EB; padding: 20px; margin-top: 10px;" class="poppins-semi-bold">Bine ai revenit, @userInfo.FirstName !</h2>
                </div>
            </div>
        </div>
    </MudContainer>

    @if (HasAdminRole)
    {
        @if (pendingAdmins.Any())
        {
            <div class="text-left">
                <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 100px; margin-bottom: 20px;" class="poppins-semi-bold">Aprobarea administratorilor</h1>
            </div>

            <div style="max-width: 80%; margin: auto;">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="0">
                        <MudButton OnClick="OnExpandCollapseClick" Class="poppins-semi-bold">
                            @if (pendingAdmins.Any())
                            {
                                <MudIcon Icon="@Icons.Material.Filled.FiberNew" Size=Size.Large Style="background-color: transparent; color: #FC6F05; margin-right: 10px;" />
                            }
                            @(_expanded ? "Ascunde" : "Vezi cererile Administratorilor")
                        </MudButton>

                        <MudCollapse Expanded="_expanded">
                            <MudTable Items="@pendingAdmins" T="UserDto" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<UserDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6" Style="color: black;">Tabel Aprobare Administratori</MudText>
                                    <MudSpacer />
                                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh Class="text-center poppins-semi-bold">Prenume</MudTh>
                                    <MudTh Class="text-center poppins-semi-bold">Nume</MudTh>
                                    <MudTh Class="text-center poppins-semi-bold">Email</MudTh>
                                    <MudTh Class="text-center poppins-semi-bold">Acțiune</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Prenume" Class="text-center">@context.FirstName</MudTd>
                                    <MudTd DataLabel="Nume" Class="text-center">@context.LastName</MudTd>
                                    <MudTd DataLabel="Email" Class="text-center">@context.Email</MudTd>
                                    <MudTd DataLabel="Acțiune" Class="d-flex justify-content-evenly">
                                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@( () => Approve(context) )">Aprobă</MudButton>
                                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@( () => Reject(context) )">Respinge</MudButton>
                                    </MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager />
                                </PagerContent>
                            </MudTable>
                        </MudCollapse>
                    </MudStack>
                </MudPaper>
            </div>
        }

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 100px;" class="poppins-semi-bold">Cursuri</h1>
        </div>

        <div style="max-width: 80%; margin: auto; margin-bottom: 55px;">
            <MudTable Items="@AdminViewLanguages" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<LanguageViewModel,bool>(FilterFuncViewLanguage)"
                      SortLabel="Sort By"
                      IsEditRowSwitchingBlocked="@blockSwitch" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Cursurile LingoLabs</MudText>
                    <MudSpacer />
                    <div class="text-center" style="width: 55%;">
                        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
                    </div>
                    <MudTooltip Text="Add">
                        <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialog()' />
                    </MudTooltip>
                </ToolBarContent>

                <ColGroup>
                    <col style="width:10%;" />
                    <col style="width:30%;" />
                    <col style="width:10%;" />
                    <col style="width:10%;" />
                    <col style="width:15%;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LanguageViewModel, object>(x=>x.LanguageName)">Nume</MudTableSortLabel></MudTh>
                    <MudTh>Descriere</MudTh>
                    <MudTh>Link Video</MudTh>
                    <MudTh>Steag</MudTh>
                    <MudTh>Vizualizează</MudTh>
                    <MudTh> </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nume">@context.LanguageName</MudTd>
                    <MudTd DataLabel="Descriere">@(string.IsNullOrEmpty(context.LanguageDescription) ? "-" : context.LanguageDescription)</MudTd>
                    <MudTd DataLabel="Link Video">@(string.IsNullOrEmpty(context.LanguageVideoLink) ? "-" : context.LanguageVideoLink)</MudTd>
                    <MudTd DataLabel="Steag">
                        <img src="@context.LanguageFlag" style="max-width: 50px;"/>
                    </MudTd>
                    <MudTd DataLabel="Vizualizează">
                        <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => NavigateToLanguageOverview(context.LanguageId) )">Vezi mai multe</MudButton>
                    </MudTd>
                    <MudTd>
                        <div style="display: flex; justify-content: space-between;">
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenEditDialog(context)" Class="pa-0" Style="margin-right: 10px;" />
                            <MudIconButton Text="Delete Course" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteLanguage(context.LanguageId)" Class="pa-0" Style="margin-left: 10px;" />
                        </div>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>

            <MudDialog @bind-IsVisible="visibleEditLanguage" Options="dialogOptions">
                <TitleContent>
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                        <span style="color: #2563EB;">Editează conținutul cursului</span>
                    </MudText>
                </TitleContent>
                <DialogContent>
                    <EditForm Model="editLanguage">
                        <DataAnnotationsValidator />
                        <MudTextField T="string" @bind-Value="editLanguage.LanguageName" Label="Nume"></MudTextField>
                        <MudTextField T="string" @bind-Value="editLanguage.LanguageDescription" Label="Descriere"></MudTextField>
                        <MudTextField T="string" @bind-Value="editLanguage.LanguageVideoLink" Label="Link Video"></MudTextField>
                        <MudTextField T="string" @bind-Value="editLanguage.LanguageFlag" Label="Pictograma Steagului (imagine .jpg / .png)"></MudTextField>
                        <ValidationSummary />
                    </EditForm>
                </DialogContent>
                <DialogActions>
                    <MudButton Variant="Variant.Filled" OnClick="CloseEditLanguage" Class="px-10" Style="color: black;">Close</MudButton>
                    <MudButton Disabled="!ValidateEditCourse()" OnClick="@(async () => EditLanguage(editLanguage))" Style="color: #2563EB;">Update</MudButton>

                </DialogActions>
            </MudDialog>

            <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
                <TitleContent>
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                        <span style="color: #2563EB;">Adaugă un curs</span>
                    </MudText>
                </TitleContent>
                <DialogContent>
                    <EditForm Model="addNewLanguage">
                        <DataAnnotationsValidator />
                        <MudTextField T="string" @bind-Value="addNewLanguage.LanguageName" Label="Nume"></MudTextField>
                        <MudTextField T="string" @bind-Value="addNewLanguage.LanguageFlag" Label="Pictograma Steagului (imagine .jpg / .png)"></MudTextField>
                        <ValidationSummary />
                    </EditForm>
                </DialogContent>
                <DialogActions>
                    <MudButton Variant="Variant.Filled" OnClick="Cancel" Class="px-10" Style="color: black;">Close</MudButton>
                    <MudButton Disabled="!ValidateAddCourse()" OnClick="@(async () => AddLanguage())" Style="color: #2563EB;">Add</MudButton>

                </DialogActions>
            </MudDialog>
        </div>
    }

    @if (!HasAdminRole)
    {

        <div class="text-left">
            <h1 style="color: #FC6F05; font-size: 33px; padding: 15px; margin-left: 85px; margin-top: 85px;" class="poppins-semi-bold">Cursurile Mele</h1>
        </div>

        @if(userEnrollments.Enrollments == null || userEnrollments.Enrollments.Count == 0)
        {
            <MudContainer>
                <div class="row mx-0 justify-content-md-center" style="margin-bottom:35px;">
                    <div class="col-md-4 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                        <div class="row">
                            <h2 style="color: black; padding: 20px; margin-top: 10px; font-size: 17px;" class="poppins-semi-bold">Momentan nu ești înscris la niciun curs!</h2>
                        </div>
                    </div>
                </div>
            </MudContainer>
        }
        else {

        <MudExpansionPanels MultiExpansion="true">
            <div class="custom-width">
                @foreach (var enrollment in userEnrollments.Enrollments)
                {
                    <MudExpansionPanel Text="@enrollment.Language.LanguageName" Style="color: #2563EB;">
                        <div>
                            <div style="padding: 15px; margin-bottom: 10px;">
                                    <p class="text-center" style="color: black; font-size: 18px;"><MudIcon Icon="@Icons.Material.Filled.Analytics" Size=Size.Large Color="Color.Success" />Your progress board for @enrollment.Language.LanguageName</p>
                            </div>

                            @foreach (var competence in enrollment.Language.LanguageCompetences)
                            {
                                <div class="row justify-content-center align-items-center" style="padding: 15px;">
                                    <div class="col text-center">
                                        <p style="font-size: 22px; color: black;">@competence.LanguageCompetenceName</p>
                                    </div>
                                    <div class="col text-left" style="width: 70%; height: 70%;">
                                        <MudTimeline TimelineOrientation=TimelineOrientation.Horizontal TimelinePosition=TimelinePosition.Bottom Reverse=false>
                                            @{
                                                bool found = false;
                                                if (enrollment.UserCompetenceLevelDictionary.ContainsKey(competence.LanguageCompetenceId))
                                                {
                                                    @foreach (var level in enrollment.Language.LanguageLevels)
                                                    {
                                                        if (enrollment.UserCompetenceLevelDictionary[competence.LanguageCompetenceId] == level.LanguageLevelId)
                                                        {
                                                            found = true;
                                                            <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
                                                                <ItemContent>
                                                                    <MudAlert Severity="Severity.Success">@level.LanguageLevelName</MudAlert>
                                                                </ItemContent>
                                                            </MudTimelineItem>
                                                        }
                                                        else if (!found && enrollment.UserCompetenceLevelDictionary[competence.LanguageCompetenceId] != level.LanguageLevelId)
                                                        {
                                                            <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
                                                                <ItemContent>
                                                                    <MudAlert Severity="Severity.Success">@level.LanguageLevelName</MudAlert>
                                                                </ItemContent>
                                                            </MudTimelineItem>
                                                        }
                                                        else if (found && enrollment.UserCompetenceLevelDictionary[competence.LanguageCompetenceId] != level.LanguageLevelId)
                                                        {
                                                            <MudTimelineItem Color="Color.Dark" Variant="Variant.Filled">
                                                                <ItemContent>
                                                                    <MudAlert Severity="Severity.Normal">@level.LanguageLevelName</MudAlert>
                                                                </ItemContent>
                                                            </MudTimelineItem>
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    @foreach (var level in enrollment.Language.LanguageLevels)
                                                    {
                                                        <MudTimelineItem Color="Color.Dark" Variant="Variant.Filled">
                                                            <ItemContent>
                                                                <MudAlert Severity="Severity.Normal">@level.LanguageLevelName</MudAlert>
                                                            </ItemContent>
                                                        </MudTimelineItem>
                                                    }
                                                }
                                            }
                                        </MudTimeline>
                                    </div>
                                    <div class="col text-center">
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="background-color: #FC6F05; color: white; padding: 10px;">Progresează!</MudButton>
                                    </div>
                                </div>
                            }

                            <div class="container-fluid p-3" style="background-color: #E9EFFD; margin-top: 60px;">
                                <div class="row justify-content-center">
                                    <div class="col-md-6 text-center">
                                        <h2 class="p-2" style="color: #2563EB; margin-left: 76px; font-size: 18px;">Optimizează-ți timpul și efortul îmbunătățindu-ți simultan toate competențele</h2>
                                    </div>
                                    <div class="col-md-6 d-flex justify-content-center align-items-center">
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="background-color: #2563EB; color: white; padding: 10px; width: 60%;">Începe acum!</MudButton>
                                    </div>
                                </div>
                            </div>

                            <div style="padding: 15px; margin-bottom: 10px; margin-top: 60px;">
                                <p class="text-center" style="color: black; font-size: 18px;">
                                    <MudIcon icon="@Icons.Material.Filled.Checklist" Size=Size.Large Color="Color.Success" />
                                    Dornic de progres rapid? Evaluează-ți cunoștințele cu un test scurt și avansează la nivelul următor:
                                </p>
                                <div class="text-center">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="background-color: #2563EB; color: white; padding: 10px; width: 25%;">Începe testul de evaluare!</MudButton>
                                </div>
                            </div>

                            <div style="padding: 15px; margin-bottom: 10px; margin-top: 60px;">
                                <p class="text-center" style="color: black; font-size: 18px;">
                                    <MudIcon icon="@Icons.Material.Filled.SwapVerticalCircle" Size=Size.Large Style="color: red;" />
                                    Vrei să experimentezi din nou emoția începuturilor? Începe cursul din nou și trăiește experiența completă!
                                </p>
                                <div class="text-center">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => RetireCourse(enrollment.EnrollmentId)" Style="background-color: red; color: white; padding: 10px; width: 25%;">Resetare Curs!</MudButton>
                                </div>
                            </div>

                        </div>
                    </MudExpansionPanel>
                }
            </div>
        </MudExpansionPanels>
        }



        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 100px;" class="poppins-semi-bold">Alte cursuri</h1>
        </div>

        <div class="container p-3">
            <div class="row justify-content-center">

                @foreach (var language in userUnEnrollments)
                {
                    <div class="col-md-4">
                        <div class="card m-3">
                            <img class="card-img-top" src="@language.LanguageFlag" style="max-height: 200px; width:auto; display: block; margin: auto; margin-top: 15px;">
                            <div class="card-body">
                                <h5 class="card-title text-center">@language.LanguageName</h5>
                                <div class="row">
                                    <div class="col text-center">
                                        <p><MudIcon Icon="@Icons.Material.Filled.Assignment" Style="font-size: 16px; color: #2563EB; margin-top: -5px;" /> Nivele: @language.LanguageLevelCount</p>
                                    </div>
                                    <div class="col text-center">
                                        <p><MudIcon Icon="@Icons.Material.Filled.MenuBook" Style="font-size: 16px; color: #2563EB; margin-top: -5px;" /> Lecții: @language.LessonCount</p>
                                    </div>
                                </div>

                                <div style="display: flex; justify-content: center;">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => NavigateToWantPlacementTest(language.LanguageId)" Style="background-color: #FC6F05; color: white; padding: 10px;">Începe Cursul</MudButton>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <div style="display: flex; justify-content: center;">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToCourses" Style="background-color: #FC6F05; color: white; padding: 10px; margin-top: 15px;">Vezi toate cursurile</MudButton>
                </div>

            </div>
        </div>
    }    
}

<style>
    .poppins-semi-bold {
        font-family: 'Poppins-SemiBold', sans-serif;
    }

    .custom-width {
        width: 80%;
        margin: auto;
    }
</style>


@code {
    [Inject]
    private IUserDataService UserDataService { get; set; }
    [Inject]
    public ILanguageDataService LanguageDataService { get; set; }
    [Inject]
    public IEnrollmentDataService EnrollmentDataService { get; set; }

    private UserDto userInfo { get; set; } 
    private bool IsUSerDataLoaded = false;

    private List<UserDto> pendingAdmins = new List<UserDto>();
    private bool IsPendingAdminDataLoaded = false;

    public List<LanguageViewModel> AdminViewLanguages { get; set; } = new List<LanguageViewModel>();
    private UserEnrollmentsResponse userEnrollments = new UserEnrollmentsResponse();
    private List<LanguageViewModel> userUnEnrollments = new List<LanguageViewModel>();


    protected override async Task OnInitializedAsync()
    {
        authState = await authStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        var claims = user.Claims.ToList();

        //var userIdClaim = claims.FirstOrDefault(claim => claim.Type == "nameid");

        HasAdminRole = claims.Any(claim => claim.Type == "role" && claim.Value == "Admin");
        HasStudentRole = claims.Any(claim => claim.Type == "role" && (claim.Value == "Student" || claim.Value == "AdminPending"));

        var response = await UserDataService.GetUserInfoAsync();
        userInfo = response.Data;
        IsUSerDataLoaded = true;

        if (HasAdminRole)
        {
            pendingAdmins = (await UserDataService.GetPendingAdminsAsync()).ToList();
            AdminViewLanguages = (await LanguageDataService.GetAllLanguagesAsync()).ToList();
        }

        if (HasStudentRole)
        {
            userEnrollments = await EnrollmentDataService.GetAllEnrollmentsByUserIdAsync();

            foreach (var enrollment in userEnrollments.Enrollments)
            {
                var language = await LanguageDataService.GetLanguageByIdAsync(enrollment.LanguageId);
                var enrollmentDB = await EnrollmentDataService.GetEnrollmentByIdAsync(enrollment.EnrollmentId);
                enrollment.UserLanguageLevels = enrollmentDB.UserLanguageLevels;
                userEnrollments.Enrollments.First(e => e.LanguageId == enrollment.LanguageId).Language = language;

                foreach (var userLanguageLevel in enrollment.UserLanguageLevels)
                {
                    if (!enrollment.UserCompetenceLevelDictionary.ContainsKey(userLanguageLevel.LanguageCompetenceId))
                    {
                        enrollment.UserCompetenceLevelDictionary[userLanguageLevel.LanguageCompetenceId] = userLanguageLevel.LanguageLevelId;
                    }
                }
            }

            userUnEnrollments = (await LanguageDataService.GetAllLanguagesAsync()).ToList();

            var enrolledLanguageIds = userEnrollments.Enrollments.Select(e => e.LanguageId).ToList();

            // Elimină din userUnEnrollments elementele care se găsesc și în userEnrollments
            userUnEnrollments.RemoveAll(language => enrolledLanguageIds.Contains(language.LanguageId));
        }

        IsPendingAdminDataLoaded = true;
    }
}


@* ADIM APPROVAL *@
@functions {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = true;
    private string searchString1 = "";
    private UserDto selectedItem1 = null;
    private HashSet<UserDto> selectedItems = new HashSet<UserDto>();
    private Snackbar snackbar;
    bool _expanded = false;
    private AuthenticationState authState;
    public bool HasAdminRole = false;
    public bool HasStudentRole = false;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    private bool FilterFunc1(UserDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(UserDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async void Approve(UserDto element)
    {
        Guid userId = element.UserId;

        var response = await UserDataService.ApproveAdminAsync(userId);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        if (response.IsSuccess)
        {
            snackbar = Snackbar.Add("Userul " + element.FirstName + " " + element.LastName + " a fost aprobat cu succes ca admin!", Severity.Success);
            pendingAdmins = (await UserDataService.GetPendingAdminsAsync()).ToList();
            StateHasChanged();
        }
        else
        {
            snackbar = Snackbar.Add("Aprobarea a eșuat: " + response.Message, Severity.Error);
        }
    }

    async void Reject(UserDto element)
    {
        Guid userId = element.UserId;

        var response = await UserDataService.RejectAdminAsync(userId);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        if (response.IsSuccess)
        {
            snackbar = Snackbar.Add("Userul " + element.FirstName + " " + element.LastName + " a fost respins cu succes din rolul 'Admin'!", Severity.Error);
            pendingAdmins = (await UserDataService.GetPendingAdminsAsync()).ToList();
            StateHasChanged();
        }
        else
        {
            snackbar = Snackbar.Add("Respingerea administratorului a eșuat: " + response.Message, Severity.Error);
        }
    }
}


@* ADMIN VIEW & EDIT COURSES *@
@functions {
    private List<string> editEvents = new();
    private bool ronly = false;
    private bool canCancelEdit = true;
    private bool blockSwitch = false;
    private string searchString = "";
    private LanguageViewModel elementBeforeEdit;
    private HashSet<LanguageViewModel> selectedItems1 = new HashSet<LanguageViewModel>();
    private LanguageViewModel editLanguage { get; set; } = new LanguageViewModel();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private bool FilterFuncViewLanguage(LanguageViewModel element) => FilterFuncViewLanguage1(element, searchString);

    private bool FilterFuncViewLanguage1(LanguageViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LanguageName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool visibleEditLanguage = false;

    void OpenEditDialog(LanguageViewModel language)
    {
        editLanguage = new LanguageViewModel
            {
                LanguageId = language.LanguageId,
                LanguageName = language.LanguageName,
                LanguageDescription = language.LanguageDescription,
                LanguageVideoLink = language.LanguageVideoLink,
                LanguageFlag = language.LanguageFlag
            };
        elementBeforeEdit = language;
        visibleEditLanguage = true;
    }

    bool ValidateEditCourse()
    {
        if (string.IsNullOrEmpty(editLanguage.LanguageName) || string.IsNullOrEmpty(editLanguage.LanguageFlag))
            return false;
        if (editLanguage.LanguageName == elementBeforeEdit.LanguageName && editLanguage.LanguageDescription == elementBeforeEdit.LanguageDescription && editLanguage.LanguageVideoLink == elementBeforeEdit.LanguageVideoLink && editLanguage.LanguageFlag == elementBeforeEdit.LanguageFlag)
            return false;
        return true;
    }

    void CloseEditLanguage()
    {
        visibleEditLanguage = false;
        editLanguage = new LanguageViewModel();
    }

    async void EditLanguage(LanguageViewModel editLanguage)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        Uri uriResult;
        bool result = Uri.TryCreate(editLanguage.LanguageFlag, UriKind.Absolute, out uriResult)
            && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);

        if (result)
        {
            using var client = new HttpClient();
            try
            {
                var responseUrl = await client.GetAsync(uriResult);
                if (responseUrl.IsSuccessStatusCode)
                {
                    var contentType = responseUrl.Content.Headers.ContentType.MediaType;
                    if (!contentType.StartsWith("image", StringComparison.OrdinalIgnoreCase))
                    {
                        snackbar = Snackbar.Add("URL-ul nu indică o imagine.", Severity.Error);
                        return;
                    }
                }
                else
                {
                    snackbar = Snackbar.Add("URL-ul imaginii nu este valid sau accesibil.", Severity.Error);
                    return;
                }
            }
            catch (HttpRequestException ex)
            {
                snackbar = Snackbar.Add("URL-ul imaginii nu este valid sau accesibil.", Severity.Error);
                return;
            }

        }
        else
        {
            snackbar = Snackbar.Add("URL-ul imaginii nu este valid.", Severity.Error);
            return;
        }

        var response = await LanguageDataService.UpdateLanguageAsync(editLanguage);

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit actualizarea cursului: ";
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            StateHasChanged();
            return;
        }
        else
        {
            visibleEditLanguage = false;
            snackbar = Snackbar.Add("Informatiile au fost actualizate cu succes!", Severity.Success);
            AdminViewLanguages = (await LanguageDataService.GetAllLanguagesAsync()).ToList();
            StateHasChanged();
        }
    }

    async void DeleteLanguage(Guid languageId)
    {
        var response = await LanguageDataService.DeleteLanguageAsync(languageId);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit ștererea cursului: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Cursul a fost șters cu succes!", Severity.Success);
            AdminViewLanguages = (await LanguageDataService.GetAllLanguagesAsync()).ToList();
            StateHasChanged();
        }
    }

    private bool visible;
    LanguageViewModel addNewLanguage = new LanguageViewModel();
    private DialogOptions dialogOptions = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void Cancel() => visible = false;

    async void AddLanguage()
    {
        visible = false;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        //validate image

        Uri uriResult;
        bool result = Uri.TryCreate(addNewLanguage.LanguageFlag, UriKind.Absolute, out uriResult)
            && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);

        if (result)
        {
            using var client = new HttpClient();
            try
            {
                var responseUrl = await client.GetAsync(uriResult);
                if (responseUrl.IsSuccessStatusCode)
                {
                    var contentType = responseUrl.Content.Headers.ContentType.MediaType;
                    if (!contentType.StartsWith("image", StringComparison.OrdinalIgnoreCase))
                    {
                        snackbar = Snackbar.Add("URL-ul nu indică o imagine.", Severity.Error);
                        return;
                    }
                }
                else
                {
                    snackbar = Snackbar.Add("URL-ul imaginii nu este valid sau accesibil.", Severity.Error);
                    return;
                }
            }
            catch (HttpRequestException ex)
            {
                snackbar = Snackbar.Add("URL-ul imaginii nu este valid sau accesibil.", Severity.Error);
                return;
            }

        }
        else
        {
            snackbar = Snackbar.Add("URL-ul imaginii nu este valid.", Severity.Error);
            return;
        }

        var response = await LanguageDataService.CreateLanguageAsync(addNewLanguage);

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit crearea unui nou curs: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Cursul '" + addNewLanguage.LanguageName + "' a fost adăugat cu succes!", Severity.Success);
            AdminViewLanguages = (await LanguageDataService.GetAllLanguagesAsync()).ToList();
            StateHasChanged();
        }
    }

    void OpenDialog()
    {
        addNewLanguage = new LanguageViewModel();
        visible = true;
    }

    bool ValidateAddCourse()
    {
        if (string.IsNullOrEmpty(addNewLanguage.LanguageName) || string.IsNullOrEmpty(addNewLanguage.LanguageFlag))
            return false;
        return true;
    }

    void NavigateToLanguageOverview(Guid languageId)
    {
        NavigationManager.NavigateTo($"/language-overview/{languageId}");
    }
}


@* STUDENT VIEW HIS COURSES *@
@functions {
    async void NavigateToWantPlacementTest(Guid languageId)
    {
        var language = await LanguageDataService.GetLanguageByIdAsync(languageId);
        if (language.PlacementTest != null && language.PlacementTest.Any())
        {
            NavigationManager.NavigateTo($"/want-placement-test/{languageId}");
        }
        else
        {
            NavigationManager.NavigateTo($"/language-dashboard/{languageId}");
        }
    }

    void NavigateToCourses()
    {
        NavigationManager.NavigateTo("/courses");
    }

    void NavigateToTakeQuiz()
    {
        NavigationManager.NavigateTo("/");
    }

    async void RetireCourse(Guid enrollmentId)
    {
        var response = await EnrollmentDataService.DeleteEnrollmentAsync(enrollmentId);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        if (response.IsSuccess)
        {
            snackbar = Snackbar.Add("Cursul a fost resetat cu succes!", Severity.Success);
            userEnrollments = await EnrollmentDataService.GetAllEnrollmentsByUserIdAsync();
            userUnEnrollments = (await LanguageDataService.GetAllLanguagesAsync()).ToList();
            var enrolledLanguageIds = userEnrollments.Enrollments.Select(e => e.LanguageId).ToList();
            userUnEnrollments.RemoveAll(language => enrolledLanguageIds.Contains(language.LanguageId));
            StateHasChanged();
        }
        else
        {
            snackbar = Snackbar.Add("Resetarea cursului a eșuat: " + response.Message, Severity.Error);
        }
    }
}