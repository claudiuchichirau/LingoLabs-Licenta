@page "/register"
@using LingoLabs.App.Auth
@using LingoLabs.App.ViewModel.AuthenticationModels
@using MudBlazor
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject CustomStateProvider authStateProvider
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top:-10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
</div>


<MudContainer>
    <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom:50px;">
        <div class="col-md-6 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1;">
            <div class="row">
                <h2 style="color: #2563EB; padding: 7px; margin-top: 30px;">Sign Up</h2>
            </div>
            <div class="row">
                <p style="font-size: 16px; font-weight: bold;  margin-bottom: 25px;">
                    Ai deja un cont? <NavLink href="login">Login!</NavLink>
                </p>
            </div>
            <MudPaper Class="pa-6" Style="margin-bottom: 40px; width: 60%; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);">
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" OnValidSubmit="OnSubmit" Model="registerRequest">
                    <MudTextField T="string" Label="Username" Required="true" RequiredError="Username-ul este obligatoriu!"
                                  @bind-Value="registerRequest.UserName"
                                  Validation="@((string s) => s.Length <= 50 && s.Length > 2 ? "" : "Username-ul nu poate depăși 50 de caractere.")"
                                  ValidationMessage For="@(() => registerRequest.UserName)" />

                    <MudTextField T="string" Label="Prenume" Required="true" RequiredError="Prenumele este obligatoriu!"
                                  @bind-Value="registerRequest.FirstName"
                                  Validation="@((string s) => s.Length <= 50 && s.Length > 4 && Regex.IsMatch(s, @"^[a-zA-Z]+$") ? "" : "Prenumele nu poate depăși 50 de caractere și trebuie să conțină doar litere.")"
                                  ValidationMessage For="@(() => registerRequest.FirstName)" />

                    <MudTextField T="string" Label="Nume" Required="true" RequiredError="Numele este obligatoriu!"
                                  @bind-Value="registerRequest.LastName"
                                  Validation="@((string s) => s.Length <= 50 && s.Length > 4 && Regex.IsMatch(s, @"^[a-zA-Z]+$") ? "" : "Numele nu poate depăși 50 de caractere și trebuie să conțină doar litere.")"
                                  ValidationMessage For="@(() => registerRequest.LastName)" />
                    <MudTextField T="string" Label="Email" Required="true" RequiredError="Adresa de Email este obligatorie!"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "Adresa de Email este invalidă!"})"
                                  @bind-Value="registerRequest.Email" 
                                  ValidationMessage For="@(() => registerRequest.Email)" />
                    <MudTextField T="string" Label="Parola" HelperText="Alege o parolă puternică!" @ref="pwField1"
                                  InputType="@PasswordInput"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                  RequiredError="Parola este obligatorie!"
                                  @bind-Value="registerRequest.Password"
                                  ValidationMessage For="@(() => registerRequest.Password)"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@PasswordInputIcon"
                                  OnAdornmentClick="ButtonTestclick"
                                  AdornmentAriaLabel="Show Password" />
                    <MudTextField T="string"
                                  Label="Password" HelperText="Repetă parola" InputType="InputType.Password"
                                  Validation="@(new Func<string, string>(PasswordMatch))" Required="true" />

                    <MudTextField T="string" Label="Telefon" Required="true" RequiredError="Numărul de telefon este obligatoriu!"
                                  Validation="@(new Func<string, string>(PhoneNumberValid))"
                                  @bind-Value="registerRequest.PhoneNumber"
                                  ValidationMessage For="@(() => registerRequest.PhoneNumber)" />

                    <div class="d-flex justify-content-center">
                        <MudRadioGroup T="string" Required="true" RequiredError="Selectarea tipului de cont (Student sau Admin) este obligatorie!" @bind-Value="registerRequest.Role" ValidationMessage For="@(() => registerRequest.Role)">
                            <MudRadio Option="@("Student")">Student</MudRadio>
                            <MudRadio Option="@("Admin")">Admin</MudRadio>
                        </MudRadioGroup>
                    </div>
                    <div class="d-flex align-items-center justify-content-center" style="padding: 20px; margin-bottom: -20px;">
                        <MudButton Variant="Variant.Filled" Style="background-color: #FC6F05; color: white; margin: auto;" Disabled="@(!success)" Class="ml-auto" type="submit" OnClick="OnSubmit">Register</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
            <div class="row">
                <p style="font-size: 16px; font-weight: bold;  margin-bottom: 15px;">
                    Sau continuă cu
                </p>
            </div>
            <div class="row justify-content-center" style="margin-bottom: 20px;">
                <img src="images/login/google.png" alt="Google" style="width: 8%;">
                <img src="images/login/facebook.png" alt="Facebook" style="width: 8%">
                <img src="images/login/twitter.png" alt="X" style="width: 8%;">
            </div>
            <div class="row">
                <p style="font-size: 16px; font-weight: bold;  margin-bottom: 25px;">
                    Ai deja un cont? <NavLink href="login">Login!</NavLink>
                </p>
            </div>
        </div>
    </div>
</MudContainer>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    private string passwordIcon = Icons.Filled.VisibilityOff;
    private InputType passwordInputType = InputType.Password;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private string PhoneNumberValid(string phoneNumber)
    {
        if (!Regex.IsMatch(phoneNumber, @"^\+?[0-9]+$"))
            return "Numărul de telefon este invalid!";
        return null; 
    }

    RegisterViewModel registerRequest { get; set; } = new RegisterViewModel();
    string error { get; set; }
    private Snackbar snackbar;

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Register(registerRequest);
            NavigationManager.NavigateTo("/login");
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            snackbar = Snackbar.Add("Register successful!", Severity.Success);

        }
        catch (Exception ex)
        {
            error = ex.Message;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            snackbar = Snackbar.Add($"{error}", Severity.Error);
        }
    }

    public string Password { get; set; } = "";
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

}
