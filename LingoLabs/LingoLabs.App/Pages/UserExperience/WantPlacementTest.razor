@page "/want-placement-test/{Id}"
@using LingoLabs.App.Auth
@using LingoLabs.App.Contracts.AuthContracts
@using LingoLabs.App.Contracts.EnrollmentContracts
@using LingoLabs.App.Contracts.LanguageContracts
@using LingoLabs.App.Services.AuthServices
@using LingoLabs.App.ViewModel.EnrollmentModels
@using LingoLabs.App.ViewModel.MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@inject NavigationManager NavigationManager
@inject CustomStateProvider authStateProvider
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer>
    <div class="text-center" style="margin-top: 50px;">
        <h2 style="color: black; margin-bottom: 70px;" class="poppins-semi-bold">Descoperă-ți Nivelul de Limbă Străină</h2>
    </div>
    <div class="text-center">
        <p style="color: #2563EB; font-size: 19px;" class="poppins-semi-bold">Înainte de a începe, vă invităm să participați la un test care ne va ajuta să vă personalizăm experiența
            de învățare. Testul este conceput pentru a evalua cunoștințele dumneavoastră actuale și pentru a vă plasa la nivelul potrivit, garantând un start personalizat și eficient.
        </p>
    </div>
    <div class="text-center">
        <p style="color: #FC6F05; font-size: 22px; margin-top: 45px; margin-bottom: 45px;" class="poppins-semi-bold">
            Ești gata să afli unde te situezi?
        </p>
    </div>

    <div class="d-flex justify-content-md-evenly" style="margin-top: 55px; margin-bottom: 80px;">
        <MudButton Variant="Variant.Text" OnClick="NavigateToLanguageDashboard" Style="background-color: #BCBCBC; color: black; padding: 7px; font-size: 17px;">
            Mai târziu
        </MudButton>
        <MudButton Variant="Variant.Text" OnClick="NavigateToStartPlacementTest" Style="background-color: #2563EB; color: white; padding: 7px; font-size: 17px;">
            Da, vreau să știu!
        </MudButton>

    </div>
</MudContainer>

@code {
    [Inject]
    public ILanguageDataService languageDataService { get; set; }

    [Inject]
    public ILanguageLevelDataService languageLevelDataService { get; set; }

    [Inject]
    public ILanguageCompetenceDataService languageCompetenceDataService { get; set; }

    [Inject]
    public IChapterDataService chapterDataService { get; set; }

    [Inject]
    public ILessonDataService lessonDataService { get; set; }

    [Inject]
    public IEnrollmentDataService enrollmentDataService { get; set; }

    [Inject]
    public ILanguageLevelResultDataService languageLevelResultDataService { get; set; }

    [Inject]
    public ILanguageCompetenceResultDataService languageCompetenceResultDataService { get; set; }

    [Inject]
    public IChapterResultDataService chapterResultDataService { get; set; }

    [Inject]
    public ILessonResultDataService lessonResultDataService { get; set; }

    [Parameter]
    public string Id { get; set; }
    private AuthenticationState authState;
    Guid LanguageId = Guid.Empty;
    Guid UserId = Guid.Empty;
    Guid CurrentEnrollmentId = Guid.Empty;
    private Snackbar snackbar;
}

@functions {
    protected override async Task OnInitializedAsync()
    {
        authState = await authStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        var claims = user.Claims.ToList();
        var userId = claims.Find(x => x.Type == "nameid").Value;
        UserId = Guid.Parse(userId);

        LanguageId = Guid.Parse(Id);
    }

    void NavigateToStartPlacementTest()
    {
        NavigationManager.NavigateTo($"/placement-test/{LanguageId}");
    }

    async void NavigateToLanguageDashboard()
    {
        EnrollmentViewModel enrollmentViewModel = new EnrollmentViewModel
            {
                LanguageId = LanguageId,
                UserId = UserId,
            };

        var response = await enrollmentDataService.CreateEnrollmentAsync(enrollmentViewModel);
        CurrentEnrollmentId = response.Data.EnrollmentId;

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        if (!response.IsSuccess)
        {
            var errorMessage = "An error occurred while submitting the quiz. Please try again later: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        
        var language = await languageDataService.GetLanguageByIdAsync(LanguageId);

        foreach (var competence in language.LanguageCompetences)
        {
            LanguageCompetenceResultViewModel languageCompetenceResultViewModel = new LanguageCompetenceResultViewModel
            {
                EnrollmentId = CurrentEnrollmentId,
                LanguageCompetenceId = competence.LanguageCompetenceId,
            };

            var responseLanguageCompetenceResult = await languageCompetenceResultDataService.CreateLanguageCompetenceResultAsync(languageCompetenceResultViewModel);

            if (!responseLanguageCompetenceResult.IsSuccess)
            {
                var errorMessage = "An error occurred while submitting the quiz. Please try again later: " + responseLanguageCompetenceResult.Message;
                if (responseLanguageCompetenceResult.ValidationErrors != null)
                {
                    errorMessage += "\n" + string.Join("\n", responseLanguageCompetenceResult.ValidationErrors);
                }
                snackbar = Snackbar.Add(errorMessage, Severity.Error);
                return;
            }
        }

        foreach (var level in language.LanguageLevels)
        {
            LanguageLevelResultViewModel languageLevelResultViewModel = new LanguageLevelResultViewModel
            {
                EnrollmentId = CurrentEnrollmentId,
                LanguageLevelId = level.LanguageLevelId,
            };

            var responseLanguageLevelResult = await languageLevelResultDataService.CreateLanguageLevelResultAsync(languageLevelResultViewModel);

            if (!responseLanguageLevelResult.IsSuccess)
            {
                var errorMessage = "An error occurred while submitting the quiz. Please try again later: " + responseLanguageLevelResult.Message;
                if (responseLanguageLevelResult.ValidationErrors != null)
                {
                    errorMessage += "\n" + string.Join("\n", responseLanguageLevelResult.ValidationErrors);
                }
                snackbar = Snackbar.Add(errorMessage, Severity.Error);
                return;
            }

            var languageLevel = await languageLevelDataService.GetLanguageLevelByIdAsync(level.LanguageLevelId);

            foreach (var chapter in languageLevel.LanguageChapters)
            {
                ChapterResultViewModel chapterResultViewModel = new ChapterResultViewModel
                {
                    LanguageLevelResultId = responseLanguageLevelResult.Data.LanguageLevelResult.LanguageLevelResultId,
                    ChapterId = chapter.ChapterId,
                };

                var responseChapterResult = await chapterResultDataService.CreateChapterResultAsync(chapterResultViewModel);

                if (!responseChapterResult.IsSuccess)
                {
                    var errorMessage = "An error occurred while submitting the quiz. Please try again later: " + responseChapterResult.Message;
                    if (responseChapterResult.ValidationErrors != null)
                    {
                        errorMessage += "\n" + string.Join("\n", responseChapterResult.ValidationErrors);
                    }
                    snackbar = Snackbar.Add(errorMessage, Severity.Error);
                    return;
                }

                var chapterDetails = await chapterDataService.GetChapterByIdAsync(chapter.ChapterId);

                foreach (var lesson in chapterDetails.ChapterLessons)
                {
                    var updatedEnrollment = await enrollmentDataService.GetEnrollmentByIdAsync(CurrentEnrollmentId);
                    var languageCompetenceResult = updatedEnrollment.LanguageCompetenceResults.FirstOrDefault(x => x.LanguageCompetenceId == lesson.LanguageCompetenceId);

                    LessonResultViewModel lessonResultViewModel = new LessonResultViewModel
                    {
                        LessonId = lesson.LessonId,
                        ChapterResultId = responseChapterResult.Data.ChapterResult.ChapterResultId,
                        LanguageCompetenceResultId = languageCompetenceResult.LanguageCompetenceResultId,
                        IsCompleted = false,
                    };

                    var responseLessonResult = await lessonResultDataService.CreateLessonResultAsync(lessonResultViewModel);

                    if (!responseLessonResult.IsSuccess)
                    {
                        var errorMessage = "An error occurred while submitting the quiz. Please try again later: " + responseLessonResult.Message;
                        if (responseLessonResult.ValidationErrors != null)
                        {
                            errorMessage += "\n" + string.Join("\n", responseLessonResult.ValidationErrors);
                        }
                        snackbar = Snackbar.Add(errorMessage, Severity.Error);
                        return;
                    }
                }
            }
        }

        NavigationManager.NavigateTo($"/language-dashboard/{CurrentEnrollmentId}");
    }
}
