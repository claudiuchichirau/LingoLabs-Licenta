@page "/want-placement-test/{Id}"
@using LingoLabs.App.Auth
@using LingoLabs.App.Contracts.EnrollmentContracts
@using LingoLabs.App.Services.AuthServices
@using LingoLabs.App.ViewModel.EnrollmentModels
@using LingoLabs.App.ViewModel.MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@inject NavigationManager NavigationManager
@inject CustomStateProvider authStateProvider
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer>
    <div class="text-center" style="margin-top: 50px;">
        <h2 style="color: black; margin-bottom: 70px;" class="poppins-semi-bold">Descoperă-ți Nivelul de Limbă Străină</h2>
    </div>
    <div class="text-center">
        <p style="color: #2563EB; font-size: 19px;" class="poppins-semi-bold">Înainte de a începe, vă invităm să participați la un test care ne va ajuta să vă personalizăm experiența
            de învățare. Testul este conceput pentru a evalua cunoștințele dumneavoastră actuale și pentru a vă plasa la nivelul potrivit, garantând un start personalizat și eficient.
        </p>
    </div>
    <div class="text-center">
        <p style="color: #FC6F05; font-size: 22px; margin-top: 45px; margin-bottom: 45px;" class="poppins-semi-bold">
            Ești gata să afli unde te situezi?
        </p>
    </div>

    <div class="d-flex justify-content-md-evenly" style="margin-top: 55px; margin-bottom: 80px;">
        <MudButton Variant="Variant.Text" OnClick="NavigateToLanguageDashboard" Style="background-color: #BCBCBC; color: black; padding: 7px; font-size: 17px;">
            Mai târziu
        </MudButton>
        <MudButton Variant="Variant.Text" OnClick="NavigateToStartPlacementTest" Style="background-color: #2563EB; color: white; padding: 7px; font-size: 17px;">
            Da, vreau să știu!
        </MudButton>

    </div>
</MudContainer>

@code {
    [Inject]
    public IEnrollmentDataService EnrollmentDataService { get; set; }
    [Parameter]
    public string Id { get; set; }
    private AuthenticationState authState;
    Guid LanguageId = Guid.Empty;
    Guid UserId = Guid.Empty;
    Guid CurrentEnrollmentId = Guid.Empty;
    private Snackbar snackbar;
}

@functions {
    protected override async Task OnInitializedAsync()
    {
        authState = await authStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        var claims = user.Claims.ToList();
        var userId = claims.Find(x => x.Type == "nameid").Value;
        UserId = Guid.Parse(userId);

        LanguageId = Guid.Parse(Id);
    }

    void NavigateToStartPlacementTest()
    {
        NavigationManager.NavigateTo($"/placement-test/{LanguageId}");
    }

    async void NavigateToLanguageDashboard()
    {
        EnrollmentViewModel enrollmentViewModel = new EnrollmentViewModel
            {
                LanguageId = LanguageId,
                UserId = UserId,
            };

        var response = await EnrollmentDataService.CreateEnrollmentAsync(enrollmentViewModel);
        CurrentEnrollmentId = response.Data.EnrollmentId;

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        if (!response.IsSuccess)
        {
            var errorMessage = "An error occurred while submitting the quiz. Please try again later: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            NavigationManager.NavigateTo($"/language-dashboard/{CurrentEnrollmentId}");
        }
    }
}
