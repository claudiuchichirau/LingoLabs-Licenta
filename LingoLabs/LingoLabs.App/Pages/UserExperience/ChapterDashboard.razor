@page "/chapter-dashboard/{Id}"
@using LingoLabs.App.Auth
@using LingoLabs.App.Contracts.AuthContracts
@using LingoLabs.App.Contracts.EnrollmentContracts
@using LingoLabs.App.Contracts.LanguageContracts
@using LingoLabs.App.ViewModel.EnrollmentModels
@using LingoLabs.App.ViewModel.LanguageModels
@using LingoLabs.App.ViewModel.LanguageModels.EnrollmentModels
@using LingoLabs.App.ViewModel.MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@inject NavigationManager NavigationManager
@inject CustomStateProvider authStateProvider
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime


<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top: -10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -45px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -30px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -15px; max-width: 150px;">
    <img src="/images/homepage/jos.png" style="position: absolute; bottom: 0; right: 0; max-width: 150px;">
    <img src="/images/homepage/sus.png" style="position: absolute; top: 0; right: 0; max-width: 200px;">
</div>

@* GET BY ID INFORMATIONS *@
<MudContainer>

    @if (!IsDataLoaded)
    {
        <div class="text-center" style="margin-top: 45px; margin-bottom: 10px;">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </div>
    }
    else
    {
        <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom: 40px;">
            <div class="col-md-8 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <div class="row">
                    <h1 style="color: #2563EB; padding: 20px; margin-top: 10px;" class="poppins-semi-bold">@chapter.ChapterName</h1>
                </div>
            </div>
        </div>
    }

    @if (!IsDataLoaded)
    {
        <div class="text-center" style="margin-top: 45px; margin-bottom: 10px;">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </div>
    }
    else
    {
        @if (!string.IsNullOrEmpty(chapter.ChapterDescription))
        {
            <div class="row" style="margin-top: 150px; margin-bottom: 70px;">
                <div class="col">
                    <div class="text-center" style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                        <p style="color: black; font-size: 22px;" class="poppins-semi-bold">@chapter.ChapterDescription</p>
                    </div>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(chapter.ChapterVideoLink))
        {
            <div class="row" style="margin-top: 45px; margin-bottom: 10px;">
                <div class="col">
                    <div class="text-center" style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                        <p class="custom-text" style="font-size: 40px; margin-bottom: -3px;">
                            <span style="color: #FC6F05;"><strong>Hear</strong></span>,
                            <span style="color: #2563EB;"><strong>understand</strong></span>,
                            <span style="color: lawngreen;"><strong>express</strong></span>
                        </p>
                        <p style="font-size: 25px;">Our video shows you the way</p>
                    </div>
                </div>
            </div>

            <div class="row" style="margin-bottom: 70px;">
                <div class="col text-center">
                    <iframe style="width: 700px; height: 394px; margin-top: 9px;" src="@chapter.ChapterVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(chapter.ChapterImageData))
        {
            <div class="row" style="margin-top: 70px; margin-bottom: 150px;">
                <div class="d-flex justify-content-center align-items-center" style="height: 100%;">
                    <img src="@chapter.ChapterImageData" style="max-width: 700px; height: auto;">
                </div>
            </div>
        }

    }
</MudContainer>

@if(chapterResult.IsCompleted)
{
    <div id="quizResults" class="text-center" style="margin-top: 25px; margin-bottom: 50px;">
        <hr style="width: 20%; border: 1px solid rgba(128, 128, 128, 0.5); margin: auto; margin-top: 50px; margin-bottom: 50px;">

        <p style="font-size: 19px; margin-bottom: 30px;">
            Congratulations! You've passed the @chapter.ChapterName Chapter with flying colors.<br>
            Keep up the good work and continue to improve your skills. 😊
        </p>

        <span style="color: black; font-size: 19px; margin-top: 80px; margin-bottom: 15px;">
            Result
        </span>
        <h1 style="color: black; font-size: 37px; margin-bottom: 15px;">
            Your Chapter Score: <span style="color: #FC6F05;">@chapterFinalScore%</span>
        </h1>

        @if (chapterFinalScore >= 70)
        {
            <img src="images/quiz/best-score.png">
        }
        else if (chapterFinalScore < 70 && chapterFinalScore >= 45)
        {
            <img src="images/quiz/middle-score.png">
        }

        <div class="text-center" style="margin-top: 15px;">
            <MudButton Style="background-color: #FC6F05; color: white; margin-top: 35px;" Class="text-center align-items-center justify-content-center" OnClick="NavigateToLanguageLevelDashboard"><MudIcon Icon="@Icons.Material.Filled.NavigateNext" /> Discover New Challenges</MudButton>
        </div>
    </div>
}

@* LESSONS *@
<div class="text-center">
    <h1 style="color: black; font-size: 33px; margin-top: 120px; margin-bottom: 25px;">
        Discover <span style="color: #FC6F05;">@chapter.ChapterName</span>'s Lessons
    </h1>
    <h2 style="font-size: 19px; margin-bottom: 45px;">
        Explore @chapter.ChapterName's lessons to swiftly elevate your language skills.
    </h2>
</div>

@if (chapter.ChapterLessons == null || chapter.ChapterLessons.Count == 0)
{
    <MudContainer>
        <div class="row mx-0 justify-content-md-center" style="margin-bottom:35px;">
            <div class="col-md-4 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <div class="row">
                    <h2 style="color: black; padding: 20px; margin-top: 10px; font-size: 17px;" class="poppins-semi-bold">There are currently no lessons for chapter <strong>@chapter.ChapterName!</strong></h2>
                </div>
            </div>
        </div>
    </MudContainer>
} else
{
    <div style="margin-bottom: 30px;">
        @foreach (var languageCompetence in language.LanguageCompetences)
        {
            @if (competencesLessons.ContainsKey(languageCompetence.LanguageCompetenceId))
            {
                <MudContainer Style="width: 70%; margin-bottom: 20px;">
                    <MudExpansionPanel Text="@languageCompetence.LanguageCompetenceName" Style="color: #2563EB;" IsExpanded="true">
                        <MudTimeline TimelineOrientation=TimelineOrientation.Vertical TimelinePosition=TimelinePosition.Top Reverse=false>
                            @{bool AreAllLessonsCompleted = true;}

                            @for (int i = 0; i < competencesLessons[languageCompetence.LanguageCompetenceId].Count; i++)
                            {
                                var lesson = competencesLessons[languageCompetence.LanguageCompetenceId][i];
                                bool lessonIsCompleted = lesson.IsCompleted;
                                string alignment = i % 2 == 0 ? "text-left" : "text-right";
                                string alignmentForPanel = i % 2 == 0 ? "block-left" : "block-right";

                                if (i == 0 && lesson.IsCompleted == false)
                                {
                                    <MudTimelineItem Color="Color.Dark" Size="Size.Small" Style="margin-bottom: 7px;">
                                        <ItemOpposite>
                                            <MudButton Variant="Variant.Filled" OnClick="() => NavigateToLesson(lesson.LessonId)" Style="background-color: #FC6F05; color: white;">Open</MudButton>
                                        </ItemOpposite>
                                        <ItemContent>
                                            <div class="@alignment">
                                                <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 25px; color: black;"><strong>@lesson.LessonTitle</strong></MudText>
                                                <MudText Typo="Typo.h5" Style="color: black; font-size: 17px; margin-bottom: 5px;"><strong>@lesson.LessonDescription</strong></MudText>
                                            </div>
                                        </ItemContent>
                                    </MudTimelineItem>
                                    AreAllLessonsCompleted = false;
                                } else if (!lesson.IsCompleted && LastLessonCompleted == false)
                                {
                                    <MudTimelineItem Color="Color.Dark" Size="Size.Small" Style="margin-bottom: 7px;">
                                        <ItemOpposite>
                                            <MudButton Variant="Variant.Filled" OnClick="() => NavigateToLesson(lesson.LessonId)" Disabled="true" Style="background-color: gray; color: white;">Open</MudButton>
                                        </ItemOpposite>
                                        <ItemContent>
                                            <div class="@alignment">
                                                <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 25px; color: black;"><strong>@lesson.LessonTitle</strong></MudText>
                                                <MudText Typo="Typo.h5" Style="color: black; font-size: 17px; margin-bottom: 5px;"><strong>@lesson.LessonDescription</strong></MudText>
                                            </div>
                                        </ItemContent>
                                    </MudTimelineItem>
                                    AreAllLessonsCompleted = false;
                                }
                                else if (!lesson.IsCompleted && LastLessonCompleted == true)
                                {
                                    <MudTimelineItem Color="Color.Dark" Size="Size.Small" Style="margin-bottom: 7px;">
                                        <ItemOpposite>
                                            <MudButton Variant="Variant.Filled" OnClick="() => NavigateToLesson(lesson.LessonId)" Style="background-color: #FC6F05; color: white;">Open</MudButton>
                                        </ItemOpposite>
                                        <ItemContent>
                                            <div class="@alignment">
                                                <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 25px; color: black;"><strong>@lesson.LessonTitle</strong></MudText>
                                                <MudText Typo="Typo.h5" Style="color: black; font-size: 17px; margin-bottom: 5px;"><strong>@lesson.LessonDescription</strong></MudText>
                                            </div>
                                        </ItemContent>
                                    </MudTimelineItem>
                                    LastLessonCompleted = false;
                                    AreAllLessonsCompleted = false;
                                }
                                else if(lesson.IsCompleted)
                                {
                                    <MudTimelineItem Color="Color.Success" Size="Size.Small" Style="margin-bottom: 7px;">
                                        <ItemOpposite>
                                            <MudButton Variant="Variant.Filled" OnClick="() => NavigateToLesson(lesson.LessonId)" Color="Color.Success" Style="color: white;">Open</MudButton>
                                        </ItemOpposite>
                                        <ItemContent>
                                            <div class="@alignment">
                                                <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 25px; color: black;"><strong>@lesson.LessonTitle</strong></MudText>
                                                <MudText Typo="Typo.h5" Style="color: black; font-size: 17px; margin-bottom: 5px;"><strong>@lesson.LessonDescription</strong></MudText>
                                            </div>
                                        </ItemContent>
                                    </MudTimelineItem>
                                    LastLessonCompleted = true;
                                }
                            }

                            @if (AreAllLessonsCompleted && !LanguageCompetenceViewed.Any(x => x.Equals(languageCompetence.LanguageCompetenceId)))
                            {
                                UpdateUserLanguageLevel(languageCompetence.LanguageCompetenceId);
                            }
                        </MudTimeline>
                    </MudExpansionPanel>
                </MudContainer>
            }
        }
    </div>
}


@code {
    [Inject]
    public ILanguageDataService LanguageDataService { get; set; }
    [Inject]
    public ILanguageLevelDataService LanguageLevelDataService { get; set; }
    [Inject]
    public IChapterDataService ChapterDataService { get; set; }
    [Inject]
    public IChapterResultDataService ChapterResultDataService { get; set; }
    [Inject]
    public ILessonResultDataService LessonResultDataService { get; set; }
    [Inject]
    public IEnrollmentDataService EnrollmentDataService { get; set; }
    [Inject]
    public ILanguageLevelResultDataService LanguageLevelResultDataService { get; set; }
    [Inject]
    public IUserLanguageLevelDataService UserLanguageLevelDataService { get; set; }

    private AuthenticationState authState;

    [Parameter]
    public string Id { get; set; }
    private Guid CurrentChapterId = Guid.Empty;
    private Guid CurrentChapterResultId = Guid.Empty;
    private ChapterViewModel chapter = new ChapterViewModel();
    private ChapterResultViewModel chapterResult = new ChapterResultViewModel();
    private LanguageViewModel language = new LanguageViewModel();
    private Dictionary<Guid, List<ListeningLessonViewModel>> competencesLessons = new Dictionary<Guid, List<ListeningLessonViewModel>>();
    private bool IsDataLoaded = false;
    private bool LastLessonCompleted = false;
    private double chapterFinalScore = 0;
    private Snackbar snackbar;
    private List<Guid> LanguageCompetenceViewed = new List<Guid>();

    protected override async Task OnInitializedAsync()
    {
        authState = await authStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        var claims = user.Claims.ToList();

        CurrentChapterResultId = Guid.Parse(Id);
        chapterResult = await ChapterResultDataService.GetChapterResultByIdAsync(CurrentChapterResultId);
        CurrentChapterId = chapterResult.ChapterId;

        chapter = await ChapterDataService.GetChapterByIdAsync(CurrentChapterId);

        if (chapter.ChapterLessons != null && chapter.ChapterLessons.Count != 0)
        {
            var languageLevel = await LanguageLevelDataService.GetLanguageLevelByIdAsync(chapter.LanguageLevelId);
            language = await LanguageDataService.GetLanguageByIdAsync(languageLevel.LanguageId);

            foreach (var languageCompetence in language.LanguageCompetences)
            {
                foreach (var lesson in chapter.ChapterLessons)
                {
                    Guid lessonResultId = chapterResult.LessonResults.FirstOrDefault(x => x.LessonId == lesson.LessonId).LessonResultId;
                    var lessonResult = await LessonResultDataService.GetLessonResultByIdAsync(lessonResultId);
                    lesson.IsCompleted = lessonResult.IsCompleted;

                    if (lesson.LanguageCompetenceId == languageCompetence.LanguageCompetenceId)
                    {
                        if (!competencesLessons.ContainsKey(languageCompetence.LanguageCompetenceId))
                        {
                            competencesLessons.Add(languageCompetence.LanguageCompetenceId, new List<ListeningLessonViewModel>());
                        }

                        competencesLessons[languageCompetence.LanguageCompetenceId].Add(lesson);
                    }
                }
            }
        }

        if (chapterResult.IsCompleted)
        {
            chapterFinalScore = 0;
            foreach (var lessonResult in chapterResult.LessonResults)
            {
                double lessonScore = 0;
                var lessonResultData = await LessonResultDataService.GetLessonResultByIdAsync(lessonResult.LessonResultId);
                foreach (var questionResult in lessonResultData.QuestionResults)
                {
                    if (questionResult.IsCorrect)
                    {
                        lessonScore++;
                    }
                }

                chapterFinalScore += (lessonScore / lessonResultData.QuestionResults.Count);
            }

            chapterFinalScore = Math.Round(chapterFinalScore / chapterResult.LessonResults.Count * 100, 2);

            if (Double.IsNaN(chapterFinalScore))
            {
                chapterFinalScore = 100;
            }
        }

        IsDataLoaded = true;
    }
}

@functions{
    private async Task NavigateToLesson(Guid lessonId)
    {
        var lessoonResult = chapterResult.LessonResults.FirstOrDefault(x => x.LessonId == lessonId);
        NavigationManager.NavigateTo($"/lesson-dashboard/{lessoonResult.LessonResultId}");
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
    }

    private async Task NavigateToLanguageLevelDashboard()
    {
        NavigationManager.NavigateTo($"/language-level-dashboard/{chapterResult.LanguageLevelResultId}");
    }

    private async Task UpdateUserLanguageLevel(Guid languageCompetenceId)
    {
        LanguageCompetenceViewed.Add(languageCompetenceId);

        var languageLevel = await LanguageLevelDataService.GetLanguageLevelByIdAsync(chapter.LanguageLevelId);
        var languageCompetence = language.LanguageCompetences.FirstOrDefault(x => x.LanguageCompetenceId == languageCompetenceId);

        Guid lastChapterIdWithLanguageCompetenceLesson = Guid.Empty;
        var reversedChapters = languageLevel.LanguageChapters.ToList();
        reversedChapters.Reverse();
        foreach (var chapterCompetence in reversedChapters)
        {
            var chapterData = await ChapterDataService.GetChapterByIdAsync(chapterCompetence.ChapterId);
            foreach(var lessonData in chapterData.ChapterLessons)
            {
                if(lessonData.LanguageCompetenceId == languageCompetence.LanguageCompetenceId && lastChapterIdWithLanguageCompetenceLesson == Guid.Empty)
                {
                    lastChapterIdWithLanguageCompetenceLesson = chapterData.ChapterId;
                    break;
                }
            }

            if(lastChapterIdWithLanguageCompetenceLesson != Guid.Empty)
            {
                break;
            }
        }

        if(lastChapterIdWithLanguageCompetenceLesson != CurrentChapterId)
        {
            return;
        }

        var languageLevelResult = await LanguageLevelResultDataService.GetLanguageLevelResultByIdAsync(chapterResult.LanguageLevelResultId);
        var enrollment = await EnrollmentDataService.GetEnrollmentByIdAsync(languageLevelResult.EnrollmentId);

        var countLevels = enrollment.UserLanguageLevels.Count;

        if (enrollment.UserLanguageLevels.Find(x => x.LanguageCompetenceId == languageCompetenceId) == null)
        {
            var userLanguageLevel = new UserLanguageLevelViewModel
            {
                EnrollmentId = enrollment.EnrollmentId,
                LanguageCompetenceId = languageCompetenceId,
                LanguageLevelId = languageLevel.LanguageLevelId,
            };

            var response = await UserLanguageLevelDataService.CreateUserLanguageLevelAsync(userLanguageLevel);

            if(!response.IsSuccess)
            {
                var errorMessage = "An error occurred while creating user language level. Please try again later: " + response.Message;
                if (response.ValidationErrors != null)
                {
                    errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
                }
                snackbar = Snackbar.Add(errorMessage, Severity.Error);
                return;
            }
            enrollment = await EnrollmentDataService.GetEnrollmentByIdAsync(languageLevelResult.EnrollmentId);
            StateHasChanged();
        }
        else if (enrollment.UserLanguageLevels.Find(x => x.LanguageCompetenceId == languageCompetenceId && x.LanguageLevelId == languageLevel.LanguageLevelId) == null)
        {
            var userLanguageLevel = enrollment.UserLanguageLevels.Find(x => x.LanguageCompetenceId == languageCompetenceId);

            var updateUserLanguageLevel = new UserLanguageLevelViewModel
            {
                UserLanguageLevelId = userLanguageLevel.UserLanguageLevelId,
                LanguageLevelId = languageLevel.LanguageLevelId,
            };

            var response = await UserLanguageLevelDataService.UpdateUserLanguageLevelAsync(updateUserLanguageLevel);

            if (!response.IsSuccess)
            {
                var errorMessage = "An error occurred while updating user language level. Please try again later: " + response.Message;
                if (response.ValidationErrors != null)
                {
                    errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
                }
                snackbar = Snackbar.Add(errorMessage, Severity.Error);
                return;
            }
        }
    }
}
