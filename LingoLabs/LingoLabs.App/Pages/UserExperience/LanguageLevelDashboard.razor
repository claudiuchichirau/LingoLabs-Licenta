@page "/language-level-dashboard/{Id}"
@using LingoLabs.App.Contracts.EnrollmentContracts
@using LingoLabs.App.Contracts.LanguageContracts
@using LingoLabs.App.ViewModel.EnrollmentModels
@using LingoLabs.App.ViewModel.LanguageModels
@using LingoLabs.App.ViewModel.MudBlazor
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime


<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top: -10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -45px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -30px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -15px; max-width: 150px;">
    <img src="/images/homepage/jos.png" style="position: absolute; bottom: 0; right: 0; max-width: 150px;">
    <img src="/images/homepage/sus.png" style="position: absolute; top: 0; right: 0; max-width: 200px;">
</div>

@* GET BY ID INFORMATIONS *@
<MudContainer>

    @if(!IsDataLoaded)
    {
        <div class="text-center" style="margin-top: 45px; margin-bottom: 10px;">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </div>
    } else {
        <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom: 40px;">
            <div class="col-md-8 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <div class="row">
                    <h1 style="color: #2563EB; padding: 20px; margin-top: 10px;" class="poppins-semi-bold">@languageLevel.LanguageLevelName - @languageLevel.LanguageLevelAlias</h1>
                </div>
            </div>
        </div>
    }

    @if(!IsDataLoaded)
    {
        <div class="text-center" style="margin-top: 45px; margin-bottom: 10px;">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </div>
    } else {
        @if (!string.IsNullOrEmpty(languageLevel.LanguageLevelDescription))
        {
            <div class="row" style="margin-top: 150px; margin-bottom: 70px;">
                <div class="col">
                    <div class="text-center" style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                        <p style="color: black; font-size: 22px;" class="poppins-semi-bold">@languageLevel.LanguageLevelDescription</p>
                    </div>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(languageLevel.LanguageLevelVideoLink))
        {
            <div class="row" style="margin-top: 45px; margin-bottom: 10px;">
                <div class="col">
                    <div class="text-center" style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                        <p class="custom-text" style="font-size: 40px; margin-bottom: -3px;">
                            <span style="color: #FC6F05;"><strong>Hear</strong></span>,
                            <span style="color: #2563EB;"><strong>understand</strong></span>,
                            <span style="color: lawngreen;"><strong>express</strong></span>
                        </p>
                        <p style="font-size: 25px;">Our video shows you the way</p>
                    </div>
                </div>
            </div>

            <div class="row" style="margin-bottom: 70px;">
                <div class="col text-center">
                    <iframe style="width: 700px; height: 394px; margin-top: 9px;" src="@languageLevel.LanguageLevelVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                </div>
            </div>
        }
    }
</MudContainer>


@if (languageLevelResult.IsCompleted)
{
    <div id="quizResults" class="text-center" style="margin-top: 25px; margin-bottom: 50px;">
        <hr style="width: 20%; border: 1px solid rgba(128, 128, 128, 0.5); margin: auto; margin-top: 50px; margin-bottom: 50px;">

        <p style="font-size: 19px; margin-bottom: 30px;">
            Congratulations! You've passed the @languageLevel.LanguageLevelName Language Level with flying colors.<br>
            Keep up the good work and continue to improve your skills. 😊
        </p>

        <span style="color: black; font-size: 19px; margin-top: 80px; margin-bottom: 15px;">
            Result
        </span>
        <h1 style="color: black; font-size: 37px; margin-bottom: 15px;">
            Your Chapter Score: <span style="color: #FC6F05;">@languageLevelFinalScore%</span>
        </h1>

        @if (languageLevelFinalScore >= 70)
        {
            <img src="images/quiz/best-score.png">
        }
        else if (languageLevelFinalScore < 70 && languageLevelFinalScore >= 45)
        {
            <img src="images/quiz/middle-score.png">
        }

        <div class="text-center" style="margin-top: 15px;">
            <MudButton Style="background-color: #FC6F05; color: white; margin-top: 35px;" Class="text-center align-items-center justify-content-center" OnClick="NavigateToLanguageDashboard"><MudIcon Icon="@Icons.Material.Filled.NavigateNext" /> Discover New Challenges</MudButton>
        </div>
    </div>
}

@* CHAPTERS *@
<div class="text-center">
    <h1 style="color: black; font-size: 33px; margin-top: 120px; margin-bottom: 25px;">
        Discover <span style="color: #FC6F05;">@languageLevel.LanguageLevelName</span>'s Chapters
    </h1>
    <h2 style="font-size: 19px; margin-bottom: 45px;">
        Explore @languageLevel.LanguageLevelName's chapters to swiftly elevate your language skills.
    </h2>
</div>

<MudTimeline Style="margin-bottom: 50px;">
    @for (int i = 0; i < languageLevel.LanguageChapters.Count; i++)
    {
        ChapterViewModel chapter = languageLevel.LanguageChapters[i];
        string alignment = i % 2 == 0 ? "text-left" : "text-right";
        string alignmentForPanel = i % 2 == 0 ? "block-left" : "block-right";


        if (!chapter.IsCompleted && (i == 0))
        {
            <MudTimelineItem Color="Color.Dark" Size="Size.Small">
                <ItemOpposite>
                    <MudButton Variant="Variant.Filled" OnClick="() => NavigateToChapterDashboard(chapter.ChapterId)" Style="background-color: #FC6F05; color: white;">Open</MudButton>
                </ItemOpposite>
                <ItemContent>
                    <div class="@alignment">
                        <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 25px; color: #2563EB;"><strong>@chapter.ChapterName</strong></MudText>
                        <MudText Typo="Typo.h5" Style="color: black; font-size: 17px; margin-bottom: 5px;"><strong>@chapter.ChapterDescription</strong></MudText>

                        @{
                            var panelText = $"{chapter.ChapterName}'s Lessons";
                        }

                        <MudExpansionPanels Class="@alignmentForPanel" Style="width: 55%; margin-top: 5px;">
                            <MudExpansionPanel Text="@panelText" Style="color: dark;">
                                @foreach (ListeningLessonViewModel lesson in chapter.ChapterLessons)
                                {
                                    <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 17px;">
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Style="color: #FC6F05;" Size="Size.Small"></MudIcon>
                                        <strong class="hover-link">@lesson.LessonTitle</strong>
                                        @* <MudLink OnClick="@( () => NavigateToLesson(@lesson.LessonId) )">
                            <strong class="hover-link">@lesson.LessonTitle</strong>
                            </MudLink> *@
                                    </MudText>
                                }
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </div>
                </ItemContent>
            </MudTimelineItem>
        }
        else if (!chapter.IsCompleted && LastChapterCompleted == false)
        {
            <MudTimelineItem Color="Color.Dark" Size="Size.Small">
                <ItemOpposite>
                    <MudButton Variant="Variant.Filled" OnClick="() => NavigateToChapterDashboard(chapter.ChapterId)" Disabled="true"  Style="background-color: gray; color: white;">Open</MudButton>
                </ItemOpposite>
                <ItemContent>
                    <div class="@alignment">
                        <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 25px; color: #2563EB;"><strong>@chapter.ChapterName</strong></MudText>
                        <MudText Typo="Typo.h5" Style="color: black; font-size: 17px; margin-bottom: 5px;"><strong>@chapter.ChapterDescription</strong></MudText>

                        @{
                            var panelText = $"{chapter.ChapterName}'s Lessons";
                        }

                        <MudExpansionPanels Class="@alignmentForPanel" Style="width: 55%; margin-top: 5px;">
                            <MudExpansionPanel Text="@panelText" Style="color: dark;">
                                @foreach (ListeningLessonViewModel lesson in chapter.ChapterLessons)
                                {
                                    <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 17px;">
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Style="color: #FC6F05;" Size="Size.Small"></MudIcon>
                                        <strong class="hover-link">@lesson.LessonTitle</strong>
                                        @* <MudLink OnClick="@( () => NavigateToLesson(@lesson.LessonId) )">
                            <strong class="hover-link">@lesson.LessonTitle</strong>
                            </MudLink> *@
                                    </MudText>
                                }
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </div>
                </ItemContent>
            </MudTimelineItem>
        }
        else if (!chapter.IsCompleted && LastChapterCompleted == true)
        {
            <MudTimelineItem Color="Color.Dark" Size="Size.Small">
                <ItemOpposite>
                    <MudButton Variant="Variant.Filled" OnClick="() => NavigateToChapterDashboard(chapter.ChapterId)" Style="background-color: #FC6F05; color: white;">Open</MudButton>
                </ItemOpposite>
                <ItemContent>
                    <div class="@alignment">
                        <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 25px; color: #2563EB;"><strong>@chapter.ChapterName</strong></MudText>
                        <MudText Typo="Typo.h5" Style="color: black; font-size: 17px; margin-bottom: 5px;"><strong>@chapter.ChapterDescription</strong></MudText>

                        @{
                            var panelText = $"{chapter.ChapterName}'s Lessons";
                        }

                        <MudExpansionPanels Class="@alignmentForPanel" Style="width: 55%; margin-top: 5px;">
                            <MudExpansionPanel Text="@panelText" Style="color: dark;">
                                @foreach (ListeningLessonViewModel lesson in chapter.ChapterLessons)
                                {
                                    <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 17px;">
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Style="color: #FC6F05;" Size="Size.Small"></MudIcon>
                                        <strong class="hover-link">@lesson.LessonTitle</strong>
                                        @* <MudLink OnClick="@( () => NavigateToLesson(@lesson.LessonId) )">
                            <strong class="hover-link">@lesson.LessonTitle</strong>
                            </MudLink> *@
                                    </MudText>
                                }
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </div>
                </ItemContent>
            </MudTimelineItem>
            LastChapterCompleted = false;
        }
        else if (chapter.IsCompleted)
        {
            <MudTimelineItem Color="Color.Success" Size="Size.Small">
                <ItemOpposite>
                    <MudButton Variant="Variant.Filled" OnClick="() => NavigateToChapterDashboard(chapter.ChapterId)" Color="Color.Success" Style="color: white;">Open</MudButton>
                </ItemOpposite>
                <ItemContent>
                    <div class="@alignment">
                        <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 25px; color: #2563EB;"><strong>@chapter.ChapterName</strong></MudText>
                        <MudText Typo="Typo.h5" Style="color: black; font-size: 17px; margin-bottom: 5px;"><strong>@chapter.ChapterDescription</strong></MudText>

                        @{
                            var panelText = $"{chapter.ChapterName}'s Lessons";
                        }

                        <MudExpansionPanels Class="@alignmentForPanel" Style="width: 55%; margin-top: 5px;">
                            <MudExpansionPanel Text="@panelText" Style="color: dark;">
                                @foreach (ListeningLessonViewModel lesson in chapter.ChapterLessons)
                                {
                                    <MudText Typo="Typo.h6" GutterBottom="true" Style="font-size: 17px;">
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Style="color: #FC6F05;" Size="Size.Small"></MudIcon>
                                        <strong class="hover-link">@lesson.LessonTitle</strong>
                                        @* <MudLink OnClick="@( () => NavigateToLesson(@lesson.LessonId) )">
                                <strong class="hover-link">@lesson.LessonTitle</strong>
                                </MudLink> *@
                                    </MudText>
                                }
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </div>
                </ItemContent>
            </MudTimelineItem>
            LastChapterCompleted = true;
        }
    }
    @* TO DO: culoare verde la bulina daca ChapterResult.IsCompleted = true, gri altfel + butonul OPEN sa fie disabled *@
</MudTimeline>


<style>
    .block-left {
        float: left;
    }

    .block-right {
        float: right;
    }

    .hover-link {
        color: #2563EB;
    }

    /* .hover-link:hover {
        color: #02497E;
    } */

</style>

@code {
    [Inject]
    public ILanguageLevelDataService LanguageLevelDataService { get; set; }
    [Inject]
    public ILanguageLevelResultDataService LanguageLevelResultDataService { get; set; }
    [Inject]
    public IChapterResultDataService ChapterResultDataService { get; set; }
    [Inject]
    public ILessonResultDataService LessonResultDataService { get; set; }
    [Inject]
    public ILessonDataService LessonDataService { get; set; }

    [Parameter]
    public string Id { get; set; }
    private Guid CurrentLanguageLevelId = Guid.Empty;
    private Guid CurrentLanguageLevelResultId = Guid.Empty;
    private LanguageLevelResultViewModel languageLevelResult = new LanguageLevelResultViewModel();
    private LanguageLevelViewModel languageLevel = new LanguageLevelViewModel();
    private bool IsDataLoaded = false;
    private bool LastChapterCompleted = false;
    private double languageLevelFinalScore = 0;

    protected override async Task OnInitializedAsync()
    {
        CurrentLanguageLevelResultId = Guid.Parse(Id);
        languageLevelResult = await LanguageLevelResultDataService.GetLanguageLevelResultByIdAsync(CurrentLanguageLevelResultId);
        CurrentLanguageLevelId = languageLevelResult.LanguageLevelId;
        languageLevel = await LanguageLevelDataService.GetLanguageLevelByIdAsync(CurrentLanguageLevelId);

        foreach (var chapter in languageLevel.LanguageChapters)
        {
            var chapterResult = languageLevelResult.ChapterResults.FirstOrDefault(x => x.ChapterId == chapter.ChapterId);
            if (chapterResult != null)
            {
                chapter.IsCompleted = chapterResult.IsCompleted;
            }
        }

        if(languageLevelResult.IsCompleted)
        {
            languageLevelFinalScore = 0;
            foreach (var chapterResult in languageLevelResult.ChapterResults)
            {
                double chapterScore = 0;
                var chapterResultData = await ChapterResultDataService.GetChapterResultByIdAsync(chapterResult.ChapterResultId);
                foreach (var lessonResult in chapterResultData.LessonResults)
                {
                    double lessonScore = 0;
                    var lessonResultData = await LessonResultDataService.GetLessonResultByIdAsync(lessonResult.LessonResultId);
                    foreach (var questionResult in lessonResultData.QuestionResults)
                    {
                        if (questionResult.IsCorrect)
                        {
                            lessonScore++;
                        }
                    }
                    chapterScore+= lessonScore / lessonResultData.QuestionResults.Count;
                }
                languageLevelFinalScore += chapterScore / chapterResultData.LessonResults.Count;
            }
            languageLevelFinalScore = Math.Round(languageLevelFinalScore / languageLevel.LanguageChapters.Count * 100, 2);

            if (Double.IsNaN(languageLevelFinalScore))
            {
                languageLevelFinalScore = 100;
            }
        }

        IsDataLoaded = true;
    }
}

@functions {
    private void NavigateToChapterDashboard(Guid chapterId)
    {
        var chapterResult = languageLevelResult.ChapterResults.FirstOrDefault(x => x.ChapterId == chapterId);
        NavigationManager.NavigateTo($"/chapter-dashboard/{chapterResult.ChapterResultId}");
    }

    private async Task NavigateToLesson(Guid lessonId)
    {
        var lesson = await LessonDataService.GetLessonByIdAsync(lessonId);
        var chapterResult = languageLevelResult.ChapterResults.FirstOrDefault(x => x.ChapterId == lesson.ChapterId);
        var updatedChapterResult = await ChapterResultDataService.GetChapterResultByIdAsync(chapterResult.ChapterResultId);
        var lessoonResult = updatedChapterResult.LessonResults.FirstOrDefault(x => x.LessonId == lessonId);
        NavigationManager.NavigateTo($"/lesson-dashboard/{lessoonResult.LessonResultId}");
        await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
    }

    private void NavigateToLanguageDashboard()
    {
        NavigationManager.NavigateTo($"/language-dashboard/{languageLevelResult.EnrollmentId}");
    }
}
