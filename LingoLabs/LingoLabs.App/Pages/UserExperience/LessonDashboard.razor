@page "/lesson-dashboard/{Id}"
@using LingoLabs.App.Auth
@using LingoLabs.App.Contracts.AuthContracts
@using LingoLabs.App.Contracts.EnrollmentContracts
@using LingoLabs.App.Contracts.LanguageContracts
@using LingoLabs.App.Services.Responses
@using LingoLabs.App.ViewModel.EnrollmentModels
@using LingoLabs.App.ViewModel.LanguageModels
@using LingoLabs.App.ViewModel.MudBlazor
@using LingoLabs.App.ViewModel.Responses
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@inject NavigationManager NavigationManager
@inject CustomStateProvider authStateProvider
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top: -10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -45px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -30px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -15px; max-width: 150px;">
    <img src="/images/homepage/jos.png" style="position: absolute; bottom: 0; right: 0; max-width: 150px;">
    <img src="/images/homepage/sus.png" style="position: absolute; top: 0; right: 0; max-width: 200px;">
</div>

@* GET BY ID INFORMATIONS *@
<MudContainer>
    @if(!IsDataLoaded)
    {
        <div class="text-center" style="margin-top: 45px; margin-bottom: 10px;">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </div>
    } else {
        <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom: 40px;">
            <div class="col-md-6 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <div class="row">
                    <h1 style="color: #2563EB; padding: 20px; margin-top: 10px;" class="poppins-semi-bold">@lesson.LessonTitle</h1>
                </div>
            </div>
        </div>

        <div class="row mx-0 justify-content-between">
            <div class="col-md-3 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <div class="row">
                    <span style="color: #FC6F05; padding: 3px; font-size: 20px;" class="poppins-semi-bold">@lesson.LanguageLevelName</span>
                </div>
            </div>
            <div class="col-md-3 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <div class="row">
                    <span style="color: #FC6F05; padding: 3px; font-size: 20px;" class="poppins-semi-bold">@lesson.LanguageCompetenceName</span>
                </div>
            </div>
            <div class="col-md-3 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <div class="row">
                    <span style="color: #FC6F05; padding: 3px; font-size: 20px;" class="poppins-semi-bold">@lesson.ChapterName</span>
                </div>
            </div>
        </div>
    }

    @if(!IsDataLoaded)
    {
        <div class="text-center" style="margin-top: 45px; margin-bottom: 10px;">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </div>
    } else {
    @if (!string.IsNullOrEmpty(lesson.LessonDescription))
    {
        <div class="row" style="margin-top: 70px; margin-bottom: 70px;">
            <div class="col">
                <div class="text-center" style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                    <p style="color: black; font-size: 22px;" class="poppins-semi-bold">@lesson.LessonDescription</p>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(lesson.LessonVideoLink))
    {
        <div class="row" style="margin-top: 45px; margin-bottom: 10px;">
            <div class="col">
                <div class="text-center" style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                    <p class="custom-text" style="font-size: 40px; margin-bottom: -3px;">
                        <span style="color: #FC6F05;"><strong>Hear</strong></span>,
                        <span style="color: #2563EB;"><strong>understand</strong></span>,
                        <span style="color: lawngreen;"><strong>express</strong></span>
                    </p>
                    <p style="font-size: 22px;">Right here, right now, we’ve got a video that’ll tie up all the loose ends of this lesson, giving you the scoop on everything you need to know. Let’s dive in! 😊</p>
                </div>
            </div>
        </div>

        <div class="row" style="margin-bottom: 70px;">
            <div class="col text-center">
                <iframe style="width: 700px; height: 394px; margin-top: 9px;" src="@lesson.LessonVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(lesson.LessonContent))
    {
        <div class="row" style="margin-top: 70px; margin-bottom: 70px;">
            <div class="col">
                <div class="text-center" style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                    <p style="color: black; font-size: 22px;" class="poppins-semi-bold">@lesson.LessonContent</p>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(lesson.LessonImageData))
    {
        <div class="row" style="margin-top: 70px; margin-bottom: 150px;">
            <div class="d-flex justify-content-center align-items-center" style="height: 100%;">
                <img src="@lesson.LessonImageData" style="max-width: 700px; height: auto;">
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(lesson.LessonRequirement))
    {
        <div class="row" style="margin-top: 70px; margin-bottom: 70px;">
            <div class="col">
                <div class="text-center" style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                    <p style="color: black; font-size: 22px;" class="poppins-semi-bold">@lesson.LessonRequirement</p>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(lesson.LanguageCompetenceName) && string.Compare(lesson.LanguageCompetenceName, "Writing") == 0)
    {

        @* WRITE THE ESSAY *@
        <div class="container">
            <div class="row" style="margin-top: 20px; margin-bottom: -20px;">
                <div class="col">
                    <div style="display: flex; flex-direction: column; justify-content: start; height: 100%;">
                        <p style="color: black; font-size: 22px;" class="poppins-semi-bold">Start to type your essay here:</p>
                    </div>
                </div>
            </div>

            <MudTextField @bind-Text="sampleText" T="string" Variant="Variant.Text" AutoGrow Lines="1" HelperText="Start to write your essay here!" Style="width: 100%;" />

            <p>@wordCount/100 words</p>

            <div class="row">
                <div class="col">
                    <div style="display: flex; flex-direction: column; justify-content: end; height: 100%;">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@isButtonDisabled" OnClick="() => SendWrittenEssay(sampleText)" Style="background-color: #FC6F05; color: white; padding: 10px;"><MudIcon Icon="@Icons.Material.Filled.Send"></MudIcon> Submit</MudButton>
                    </div>
                </div>
            </div>
        </div>


        <div class="row" style="margin-top: 85px; margin-bottom: -20px;">
            <div class="col">
                <div style="display: flex; flex-direction: column; justify-content: start; height: 100%;">
                    <p style="color: black; font-size: 22px;" class="poppins-semi-bold">Or, if you prefer, upload pictures of your handwritten essay. We'll take care of the rest!</p>
                </div>
            </div>
        </div>

        @* UPLOAD ESSAY IMAGE       -> doar daca este WRITTING LESSON*@
        <MudStack Style="width: 100%">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                           Accept=".png, .jpg"
                           MaximumFileCount="100"
                           OnFilesChanged="OnInputFileChanged"
                           Hidden="@false"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                           InputStyle="opacity:0"
                           @ondragenter="@SetDragClass"
                           @ondragleave="@ClearDragClass"
                           @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    <MudPaper Height="300px"
                              Outlined="true"
                              Class="@_dragClass">
                        <MudText Typo="Typo.h6">
                            Drag and drop files here or click
                        </MudText>
                        @foreach (var file in _fileNames)
                        {
                            <MudChip Color="Color.Dark" Text="@file" />
                        }
                    </MudPaper>
                    <MudToolBar DisableGutters="true"
                                Class="relative d-flex justify-end gap-4 z-30">
                        <MudButton HtmlTag="label"
                                   Style="background-color: #2563EB; color: white;"
                                   for="@context.Id"
                                   Variant="Variant.Filled">
                            Open file picker
                        </MudButton>
                        <MudButton OnClick="@Upload"
                                   Style="background-color: #2563EB; color: white;"
                                   Disabled="@(!_fileNames.Any())"
                                   Variant="Variant.Filled">
                            Upload
                        </MudButton>
                        <MudButton OnClick="@Clear"
                                   Color="Color.Error"
                                   Disabled="@(!_fileNames.Any())"
                                   Variant="Variant.Filled">
                            Clear
                        </MudButton>
                    </MudToolBar>
                </ButtonTemplate>
            </MudFileUpload>
        </MudStack>
    }

    @if (!showQuizResults && !string.IsNullOrEmpty(lesson.LanguageCompetenceName) && 
            string.Compare(lesson.LanguageCompetenceName, "Writing") != 0 && 
            lesson.LessonQuestions != null && 
            lesson.LessonQuestions.Count > 0 &&
            CurrentLessonResultId == Guid.Empty)
    {
        <div class="text-center" style="margin-bottom: 50px;">
            <h1 style="color: black; font-size: 33px; margin-top: 80px; margin-bottom: 15px;">
                Time for a <span style="color: #FC6F05;">Quiz</span>
            </h1>
            <h2 style="font-size: 19px; margin-bottom: 30px;">
                Get ready to test your knowledge with our comprehensive quiz. Spanning a minimum of 10 questions, each designed to challenge and enhance your understanding of the lesson. Good luck!
            </h2>
            <MudButton Variant="Variant.Filled" OnClick="() => StartQuiz()" Color="Color.Primary" Style="background-color: #FC6F05; color: white; padding: 10px;"><MudIcon Icon="@Icons.Material.Filled.Quiz"></MudIcon> START NOW!</MudButton>
        </div>        
    }
    }
</MudContainer>


@* COMPLETE QUIZ *@
@if (showCompleteQuiz)
{
    <div class="row">
        <div class="col text-center">
            <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowDown" Style="font-size: 48px;" Class="animated-arrow"></MudIcon>
        </div>
    </div>

    <div style="width: 98vw; overflow-x: hidden;">
        <MudCarousel Class="mud-width-full" Style="height: 500px;" AutoCycle="false" TData="object">

            <BulletTemplate Context="selected">
                <div Class="container mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon" style="margin-top: 25px;">
                    <span class="mud-icon-button-label">
                        <MudIcon Icon="@(selected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.CheckCircle)" Style="@(selected ? "color: green;" : "color : gray;")" />
                    </span>
                </div>
            </BulletTemplate>

            <PreviousButtonTemplate>
                <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                    <span class="mud-icon-button-label">
                        <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.SkipPrevious" Color="@Color.Inherit" />
                    </span>
                </div>
            </PreviousButtonTemplate>
            <NextButtonTemplate>
                <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                    <span class="mud-icon-button-label">
                        <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.SkipNext" Color="@Color.Inherit" />
                    </span>
                </div>
            </NextButtonTemplate>
            <ChildContent>
                @foreach (QuestionViewModel question in lesson.LessonQuestions)
                {
                    var counter = lesson.LessonQuestions.IndexOf(question) + 1;
                    <MudCarouselItem>
                        @if (question.QuestionType == QuestionTypeViewModel.MultipleChoice)
                        {
                            var columns = Math.Ceiling(Math.Sqrt(question.Choices.Count()));
                            <div class="d-flex flex-column align-items-center justify-content-center" style="height:100%; padding: 30px; margin-bottom: 15px;">
                                <div class="md-2 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 10px; margin-bottom: 40px; margin-top: -10px;">
                                    <div class="row text-center" style="width: 100%;">
                                        <span style="color: black; padding: 3px; font-size: 15px;" class="poppins-semi-bold">Multiple-Choice Question</span>
                                    </div>
                                </div>

                                <div class="mb-3" style="margin-bottom: 45px;">
                                    <span style="color: #FC6F05; padding: 10px; font-size: 29px;">@counter. @question.QuestionRequirement</span>
                                </div>

                                <div style="display: grid; grid-template-columns: repeat(@columns, 1fr); gap: 35px; margin-top: 25px; justify-items: center;">
                                    @foreach (ChoiceViewModel choice in question.Choices)
                                    {
                                        <div style="display: flex; justify-content: center;">
                                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" Style="@(choice.ChoiceId == userQuiz.UserQuestions.Find(x => x.QuestionId == question.QuestionId).ChoiceId ? "color: white; border-color: #2563EB; background-color: #2563EB; padding: 10px; font-size: 20px;" : "color: #2563EB; border-color: #2563EB; background-color: white; padding: 10px; font-size: 20px;")" OnClick="() => {SelectAnswer(question, choice); CheckAllQuestionsCompleted();}">
                                                @choice.ChoiceContent
                                            </MudButton>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        @if (question.QuestionType == QuestionTypeViewModel.TrueFalse)
                        {
                            <div class="d-flex flex-column align-items-center justify-content-center" style="height:100%; padding: 30px; margin-bottom: 15px;">
                                <div class="md-2 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 10px; margin-bottom: 40px; margin-top: -10px;">
                                    <div class="row text-center" style="width: 100%;">
                                        <span style="color: black; padding: 3px; font-size: 15px;" class="poppins-semi-bold">True/False Question</span>
                                    </div>
                                </div>

                                <div class="mb-3" style="margin-bottom: 45px;">
                                    <span style="color: #FC6F05; padding: 10px; font-size: 29px;">@counter. @question.QuestionRequirement</span>
                                </div>

                                <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 35px; margin-top: 25px; justify-items: center;">
                                    <div style="display: flex; justify-content: center;">
                                        <MudButton Color="Color.Primary" Variant="Variant.Outlined" Style="@(userQuiz.UserQuestions.Find(x => x.QuestionId == question.QuestionId).ChoiceIsCorrect == true ? "color: white; border-color: green; background-color: green; padding: 10px; font-size: 20px;" : "color: green; border-color: green; background-color: white; padding: 10px; font-size: 20px;")" OnClick='() => {SelectAnswer(question, true); CheckAllQuestionsCompleted();}'>
                                            True
                                        </MudButton>
                                    </div>
                                    <div style="display: flex; justify-content: center;">
                                        <MudButton Color="Color.Primary" Variant="Variant.Outlined" Style="@(userQuiz.UserQuestions.Find(x => x.QuestionId == question.QuestionId).ChoiceIsCorrect == false ? "color: white; border-color: red; background-color: red; padding: 10px; font-size: 20px;" : "color: red; border-color: red; background-color: white; padding: 10px; font-size: 20px;")" OnClick='() => {SelectAnswer(question, false); CheckAllQuestionsCompleted();}'>
                                            False
                                        </MudButton>
                                    </div>
                                </div>

                            </div>
                        }

                        @if (question.QuestionType == QuestionTypeViewModel.MissingWord)
                        {
                            <div class="d-flex flex-column align-items-center justify-content-center" style="height:100%; padding: 30px; margin-bottom: 15px;">
                                <div class="md-2 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 10px; margin-bottom: 40px; margin-top: -10px;">
                                    <div class="row text-center" style="width: 100%;">
                                        <span style="color: black; padding: 3px; font-size: 15px;" class="poppins-semi-bold">Missing Word Question</span>
                                    </div>
                                </div>

                                <div class="mb-3" style="margin-bottom: 45px;">
                                    <span style="color: #FC6F05; padding: 10px; font-size: 29px;">@counter. @question.QuestionRequirement</span>
                                </div>

                                <div style="display: flex; justify-content: center; align-items: center;">
                                    <MudTextField HelperText="Enter your answer here" Variant="Variant.Outlined" ValueChanged="(string value) => { ValidateMissingWordQuestion(value, question); CheckAllQuestionsCompleted(); }" />
                                </div>
                            </div>
                        }

                    </MudCarouselItem>

                }
            </ChildContent>
        </MudCarousel>
    </div>

    if(showSubmitButton)
    {
        <div class="row" style="margin-top: 35px; margin-bottom: 50px;">
            <div class="col text-center">
                <MudButton Variant="Variant.Filled" OnClick="() => SubmitQuiz(userQuiz)" Color="Color.Primary" Style="background-color: #FC6F05; color: white; padding: 10px;"><MudIcon Icon="@Icons.Material.Filled.Send"></MudIcon> SUBMIT</MudButton>
            </div>
        </div>
    }
}

@* QUIZ RESULTS *@
@if (showQuizResults)
{
    <div id="quizResults" class="text-center" style="margin-bottom: 50px;">
        <hr style="width: 20%; border: 1px solid rgba(128, 128, 128, 0.5); margin: auto; margin-top: 50px; margin-bottom: 50px;">
        @if (score >= 45)
        {
            <p style="font-size: 19px; margin-bottom: 30px;">
                Congratulations! You've passed the quiz with flying colors.<br>
                Keep up the good work and continue to improve your skills. 😊
            </p>
        }
        else
        {
            <p style="font-size: 19px; margin-bottom: 30px;">
                Don't worry if you didn't pass this time. Review your answers, learn from your mistakes, and try again.<br>
                You've got this! 💪
            </p>
        }

        <span style="color: black; font-size: 19px; margin-top: 80px; margin-bottom: 15px;">
            Result
        </span>
        <h1 style="color: black; font-size: 37px; margin-bottom: 15px;">
            Your Quiz Score: <span style="color: #FC6F05;">@score%</span>
        </h1>

        @if (score >= 70)
        {
            <img src="images/quiz/best-score.png">
        }
        else if (score < 70 && score >= 45)
        {
            <img src="images/quiz/middle-score.png">
        }
        else
        {
            <div>
                <img src="images/quiz/low-score.png">
            </div>
            <div>
                <MudButton Icon="@Icons.Material.Filled.ChangeCircle" Style="background-color: red; color: white; margin-top: 35px;" Class="text-center align-items-center justify-content-center" OnClick="TryAgainQuiz">Try Again Now</MudButton>
            </div>
        }
    </div>
}

@* QUIZ RESULTS TABLE *@
@if (showQuizResultsTable)
{
    <div class="text-center" style="margin-bottom: 50px;">
        <h1 style="color: black; font-size: 33px; margin-top: 80px; margin-bottom: 15px;">
            Quiz <span style="color: #FC6F05;">Results</span> Await
        </h1>
        <h2 style="font-size: 19px; margin-bottom: 30px;">
            Here are the results of your quiz. You can review your answers and see how you did. Keep up the good work!
        </h2>
    </div>

    <div class="container" style="margin-bottom: 20px;">
        <MudTable Items="@quizResultsElement.questionResultElements" Bordered="@bordered" Filter="new Func<QuestionResultElement,bool>(FilterFunc1)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Your Quiz Answers</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Class="text-center">Question Type</MudTh>
                <MudTh Class="text-center">Question Requirement</MudTh>
                <MudTh Class="text-center">Your Answer</MudTh>
                <MudTh Class="text-center">Correct Answer</MudTh>
                <MudTh Class="text-center">Is Correct</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Question Type" Class="text-center">@context.QuestionType</MudTd>
                <MudTd DataLabel="Question Requirement" Class="text-center">@context.QuestionRequirement</MudTd>

                @if (context.QuestionType == QuestionTypeViewModel.MultipleChoice)
                {
                    <MudTd DataLabel="Your Answer" Class="text-center">@context.GrilaUserChoiceId</MudTd>
                    <MudTd DataLabel="Correct Answer" Class="text-center">@context.GrilaCorrectChoiceId</MudTd>
                }
                else if (context.QuestionType == QuestionTypeViewModel.TrueFalse)
                {
                    <MudTd DataLabel="Your Answer" Class="text-center">@context.TrueFalseUserValue</MudTd>
                    <MudTd DataLabel="Correct Answer" Class="text-center">@context.TrueFalseCorrectValue</MudTd>
                }
                else if (context.QuestionType == QuestionTypeViewModel.MissingWord)
                {
                    <MudTd DataLabel="Your Answer" Class="text-center">@context.CuvantLipsaUserValue</MudTd>

                    List<string> cuvantLipsaCorrectValues = context.CuvantLipsaCorrectValues;
                    string cuvantLipsaCorrectValuesString = string.Join(" / ", cuvantLipsaCorrectValues);

                    <MudTd DataLabel="Correct Answer" Class="text-center">@cuvantLipsaCorrectValuesString</MudTd>
                }

                @if (@context.UserAnswerIsCorrect)
                {
                    <MudTd DataLabel="Is Correct" Style="color: forestgreen;" Class="text-center">Yes</MudTd>
                }
                else
                {
                    <MudTd DataLabel="Is Correct" Style="color: red;" Class="text-center">No</MudTd>
                }
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
}
 
<style>
    @@keyframes moveArrow {
        0% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(20px);
        }

        100% {
            transform: translateY(0);
        }
    }

    .animated-arrow {
        animation: moveArrow 2s infinite;
    }
</style>

@code {
    [Inject]
    public ILanguageDataService languageDataService { get; set; }

    [Inject]
    public ILanguageLevelDataService languageLevelDataService { get; set; }

    [Inject]
    public ILanguageCompetenceDataService languageCompetenceDataService { get; set; }

    [Inject]
    public IChapterDataService chapterDataService { get; set; }

    [Inject]
    public ILessonDataService lessonDataService { get; set; }

    [Inject]
    public IEnrollmentDataService enrollmentDataService { get; set; }

    [Inject]
    public ILanguageLevelResultDataService languageLevelResultDataService { get; set; }

    [Inject]
    public ILanguageCompetenceResultDataService languageCompetenceResultDataService { get; set; }

    [Inject]
    public IChapterResultDataService chapterResultDataService { get; set; }

    [Inject]
    public ILessonResultDataService lessonResultDataService { get; set; }

    [Inject]
    public IQuestionResultDataService questionResultDataService { get; set; }

    public LessonViewModel lesson { get; set; } = new LessonViewModel();
    private AuthenticationState authState;
    private UserEnrollmentsResponse userEnrollments = new UserEnrollmentsResponse();

    [Parameter]
    public string Id { get; set; }
    private Guid CurrentLessonId = Guid.Empty;
    private Guid CurrentLessonResultId = Guid.Empty;
    private LessonResultViewModel lessonResult = new LessonResultViewModel();
    private bool IsDataLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        authState = await authStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        var claims = user.Claims.ToList();

        CurrentLessonId = Guid.Parse(Id);

        lesson = await lessonDataService.GetLessonByIdAsync(CurrentLessonId);

        var chapter = await chapterDataService.GetChapterByIdAsync(lesson.ChapterId);
        var languageLevel = await languageLevelDataService.GetLanguageLevelByIdAsync(chapter.LanguageLevelId);
        var language = await languageDataService.GetLanguageByIdAsync(languageLevel.LanguageId);

        userEnrollments = await enrollmentDataService.GetAllEnrollmentsByUserIdAsync();
        var enrollment = userEnrollments.Enrollments.Find(x => x.LanguageId == language.LanguageId);

        if(enrollment != null && enrollment.LanguageLevelResults.Find(x => x.LanguageLevelId == languageLevel.LanguageLevelId) != null)
        {
            var languageLevelResult = enrollment.LanguageLevelResults.Find(x => x.LanguageLevelId == languageLevel.LanguageLevelId);
            if(languageLevelResult != null && languageLevelResult.ChapterResults.Find(x => x.ChapterId == chapter.ChapterId) != null)
            {
                var chapterResult = languageLevelResult.ChapterResults.Find(x => x.ChapterId == chapter.ChapterId);
                if(chapterResult != null && chapterResult.LessonResults.Find(x => x.LessonId == lesson.LessonId) != null)
                {
                    lessonResult = chapterResult.LessonResults.Find(x => x.LessonId == lesson.LessonId);
                    CurrentLessonResultId = lessonResult.LessonResultId;
                }
            }
        }


        IsDataLoaded = true;
    }
}

@* COMPLETE QUIZ *@
@functions {
    private bool showCompleteQuiz = false;
    private bool showSubmitButton = false;
    private bool bordered = false;
    // private LessonElement lesson = new LessonElement();
    private UserQuizElement userQuiz = new UserQuizElement();


    void StartQuiz()
    {
        showCompleteQuiz = true;
        List<UserQuestionElement> userQuestions = new List<UserQuestionElement>();
        foreach (QuestionViewModel question in lesson.LessonQuestions)
        {
            userQuestions.Add(new UserQuestionElement
            {
                QuestionId = question.QuestionId,
                QuestionType = question.QuestionType,
                QuestionCompleted = false
            });
        }

        userQuiz = new UserQuizElement
        {
            LessonId = lesson.LessonId,
            UserQuestions = userQuestions
        };
    }

    void SelectAnswer(QuestionViewModel questionElement, ChoiceViewModel choice)    // grila question
    {
        if (questionElement.QuestionType == QuestionTypeViewModel.MultipleChoice)
        {
            userQuiz.UserQuestions.Find(x => x.QuestionId == questionElement.QuestionId).ChoiceId = choice.ChoiceId;
            userQuiz.UserQuestions.Find(x => x.QuestionId == questionElement.QuestionId).QuestionCompleted = true;
        }
    }

    void SelectAnswer(QuestionViewModel questionElement, bool trueFalseAnswer)        // true/false question
    {
        if (questionElement.QuestionType == QuestionTypeViewModel.TrueFalse)
        {
            userQuiz.UserQuestions.Find(x => x.QuestionId == questionElement.QuestionId).ChoiceIsCorrect = trueFalseAnswer;
            userQuiz.UserQuestions.Find(x => x.QuestionId == questionElement.QuestionId).QuestionCompleted = true;
        }
    }

    void ValidateMissingWordQuestion(string value, QuestionViewModel question)        // missing word question
    {
        if (!string.IsNullOrEmpty(value))
        {
            userQuiz.UserQuestions.Find(x => x.QuestionId == question.QuestionId).QuestionCompleted = true;
            userQuiz.UserQuestions.Find(x => x.QuestionId == question.QuestionId).ChoiceContent = value;
        }
    }

    void CheckAllQuestionsCompleted()
    {
        foreach (var question in userQuiz.UserQuestions)
        {
            if (!question.QuestionCompleted)
            {
                showSubmitButton = false;
                return;
            }
        }
        showSubmitButton = true;
    }
}


@* SHOW QUIZ RESULTS *@
 @functions {
    private Snackbar snackbar;
    private bool showQuizResultsTable = false;
    private bool showQuizResults = false;
    private QuizResultsElement quizResultsElement = new QuizResultsElement();
    private string searchString1 = "";

    public async Task SubmitQuiz(UserQuizElement userQuiz)
    {

        quizResultsElement = new QuizResultsElement
        {
            LessonId = userQuiz.LessonId,
            questionResultElements = userQuiz.UserQuestions.Select(q => new QuestionResultElement
            {
                QuestionId = q.QuestionId,
                QuestionType = q.QuestionType
            }).ToList()
        };

        foreach (QuestionResultElement questionResult in quizResultsElement.questionResultElements)
        {
            UserQuestionElement userQuestion = userQuiz.UserQuestions.Find(x => x.QuestionId == questionResult.QuestionId);

            if (questionResult.QuestionType == QuestionTypeViewModel.MultipleChoice)
            {
                questionResult.GrilaUserChoiceId = userQuiz.UserQuestions.Find(x => x.QuestionId == questionResult.QuestionId).ChoiceId;
            }
            else if (questionResult.QuestionType == QuestionTypeViewModel.TrueFalse)
            {
                questionResult.TrueFalseUserValue = userQuestion.ChoiceIsCorrect;
            }
            else if (questionResult.QuestionType == QuestionTypeViewModel.MissingWord)
            {
                questionResult.CuvantLipsaUserValue = userQuestion.ChoiceContent;
            }
        }

        foreach (QuestionResultElement questionResult in quizResultsElement.questionResultElements)
        {
            QuestionViewModel question = lesson.LessonQuestions.Find(x => x.QuestionId == questionResult.QuestionId);

            questionResult.QuestionRequirement = question.QuestionRequirement;

            if (question.QuestionType == QuestionTypeViewModel.MultipleChoice)
            {
                questionResult.GrilaCorrectChoiceId = question.Choices.Find(x => x.IsCorrect).ChoiceId;
                if (questionResult.GrilaUserChoiceId == questionResult.GrilaCorrectChoiceId)
                    questionResult.UserAnswerIsCorrect = true;
                else
                    questionResult.UserAnswerIsCorrect = false;
            }
            else if (question.QuestionType == QuestionTypeViewModel.TrueFalse)
            {                
                questionResult.TrueFalseCorrectValue = question.Choices[0].IsCorrect;
                if (questionResult.TrueFalseUserValue == questionResult.TrueFalseCorrectValue)
                    questionResult.UserAnswerIsCorrect = true;
                else
                    questionResult.UserAnswerIsCorrect = false;
            }
            else if (question.QuestionType == QuestionTypeViewModel.MissingWord)
            {
                List<string> cuvantLipsaCorrectValues = new List<string>();
                foreach (var choice in question.Choices)
                {
                    cuvantLipsaCorrectValues.Add(choice.ChoiceContent);
                }
                questionResult.CuvantLipsaCorrectValues = cuvantLipsaCorrectValues;

                questionResult.UserAnswerIsCorrect = false;
                foreach (string correctValue in questionResult.CuvantLipsaCorrectValues)
                {
                    if (questionResult.CuvantLipsaUserValue == correctValue)
                    {
                        questionResult.UserAnswerIsCorrect = true;
                        break;
                    }
                }
            }
        }

        showCompleteQuiz = false;
        showSubmitButton = false;
        showQuizResults = true;
        showQuizResultsTable = true;

        double score = CalculateScore();

        if (score >= 45)
        {
            Guid currentLessonResultId = await CreateResultsEntities();

            foreach (QuestionResultElement questionResult in quizResultsElement.questionResultElements)
            {
                QuestionResultViewModel createQuestionResult = new QuestionResultViewModel
                    {
                        QuestionId = questionResult.QuestionId,
                        LessonResultId = currentLessonResultId,
                        IsCorrect = questionResult.UserAnswerIsCorrect
                    };

                var response = await questionResultDataService.CreateQuestionResultAsync(createQuestionResult);

                if (!response.IsSuccess)
                {
                    var errorMessage = "Error creating <QuestionResult> entity: " + response.Message;
                    if (response.ValidationErrors != null)
                    {
                        errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
                    }
                    snackbar = Snackbar.Add(errorMessage, Severity.Error);
                    return;
                }
            }

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            Snackbar.Add("Quiz submitted successfully!", Severity.Success);
        }
    }

    async Task<Guid> CreateResultsEntities()
    {
        var chapter = await chapterDataService.GetChapterByIdAsync(lesson.ChapterId);
        var languageLevel = await languageLevelDataService.GetLanguageLevelByIdAsync(chapter.LanguageLevelId);
        var languageCompetence = await languageCompetenceDataService.GetLanguageCompetenceByIdAsync(lesson.LanguageCompetenceId);
        var language = await languageDataService.GetLanguageByIdAsync(languageLevel.LanguageId);

        userEnrollments = await enrollmentDataService.GetAllEnrollmentsByUserIdAsync();

        var enrollment = userEnrollments.Enrollments.Find(x => x.LanguageId == language.LanguageId);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        ApiResponse<LanguageCompetenceResultResponse> responseCompetenceResult = new ApiResponse<LanguageCompetenceResultResponse>();

        if (enrollment.LanguageCompetenceResults.Find(x => x.LanguageCompetenceId == languageCompetence.LanguageCompetenceId) == null)
        {
            LanguageCompetenceResultViewModel languageCompetenceResult = new LanguageCompetenceResultViewModel
            {
                LanguageCompetenceId = languageCompetence.LanguageCompetenceId,
                EnrollmentId = enrollment.EnrollmentId
            };

            responseCompetenceResult = await languageCompetenceResultDataService.CreateLanguageCompetenceResultAsync(languageCompetenceResult);

            if (!responseCompetenceResult.IsSuccess)
            {
                var errorMessage = "Error creating <LanguageCompetenceResult> entity: " + responseCompetenceResult.Message;
                if (responseCompetenceResult.ValidationErrors != null)
                {
                    errorMessage += "\n" + string.Join("\n", responseCompetenceResult.ValidationErrors);
                }
                snackbar = Snackbar.Add(errorMessage, Severity.Error);
                return Guid.Empty;
            }            
        }

        if (enrollment.LanguageLevelResults.Find(x => x.LanguageLevelId == languageLevel.LanguageLevelId) == null)
        {
            LanguageLevelResultViewModel languageLevelResult = new LanguageLevelResultViewModel
            {
                LanguageLevelId = languageLevel.LanguageLevelId,
                EnrollmentId = enrollment.EnrollmentId,
            };

            var responseLevelResult = await languageLevelResultDataService.CreateLanguageLevelResultAsync(languageLevelResult);

            if (!responseLevelResult.IsSuccess)
            {
                var errorMessage = "Error creating <LanguageLevelResult> entity: " + responseLevelResult.Message;
                if (responseLevelResult.ValidationErrors != null)
                {
                    errorMessage += "\n" + string.Join("\n", responseLevelResult.ValidationErrors);
                }
                snackbar = Snackbar.Add(errorMessage, Severity.Error);
                return Guid.Empty;
            }

            ChapterResultViewModel chapterResult = new ChapterResultViewModel
            {
                ChapterId = chapter.ChapterId,
                LanguageLevelResultId = responseLevelResult.Data.LanguageLevelResult.LanguageLevelResultId
            };

            var responseChapterResult = await chapterResultDataService.CreateChapterResultAsync(chapterResult);

            if (!responseChapterResult.IsSuccess)
            {
                var errorMessage = "Error creating <ChapterResult> entity: " + responseChapterResult.Message;
                if (responseChapterResult.ValidationErrors != null)
                {
                    errorMessage += "\n" + string.Join("\n", responseChapterResult.ValidationErrors);
                }
                snackbar = Snackbar.Add(errorMessage, Severity.Error);
                return Guid.Empty;
            }

            LessonResultViewModel lessonResult = new LessonResultViewModel
            {
                LessonId = lesson.LessonId,
                ChapterResultId = responseChapterResult.Data.ChapterResult.ChapterResultId,
                LanguageCompetenceResultId = responseCompetenceResult.Data.LanguageCompetenceResult.LanguageCompetenceResultId
            };

            var responseLessonResult = await lessonResultDataService.CreateLessonResultAsync(lessonResult);

            if (!responseLessonResult.IsSuccess)
            {
                var errorMessage = "Error creating <LessonResult> entity: " + responseLessonResult.Message;
                if (responseLessonResult.ValidationErrors != null)
                {
                    errorMessage += "\n" + string.Join("\n", responseLessonResult.ValidationErrors);
                }
                snackbar = Snackbar.Add(errorMessage, Severity.Error);
                return Guid.Empty;
            }
            return responseLessonResult.Data.LessonResult.LessonResultId;
        } else
        {
            var languageLevelResult = enrollment.LanguageLevelResults.Find(x => x.LanguageLevelId == languageLevel.LanguageLevelId);

            if(languageLevelResult.ChapterResults.Find(x => x.ChapterId == chapter.ChapterId) == null)
            {

                ChapterResultViewModel chapterResult = new ChapterResultViewModel
                {
                    ChapterId = chapter.ChapterId,
                    LanguageLevelResultId = languageLevelResult.LanguageLevelResultId
                };

                var responseChapterResult = await chapterResultDataService.CreateChapterResultAsync(chapterResult);

                if (!responseChapterResult.IsSuccess)
                {
                    var errorMessage = "Error creating <ChapterResult> entity: " + responseChapterResult.Message;
                    if (responseChapterResult.ValidationErrors != null)
                    {
                        errorMessage += "\n" + string.Join("\n", responseChapterResult.ValidationErrors);
                    }
                    snackbar = Snackbar.Add(errorMessage, Severity.Error);
                    return Guid.Empty;
                }

                LessonResultViewModel lessonResult = new LessonResultViewModel
                {
                    LessonId = lesson.LessonId,
                    ChapterResultId = responseChapterResult.Data.ChapterResult.ChapterResultId,
                    LanguageCompetenceResultId = responseCompetenceResult.Data.LanguageCompetenceResult.LanguageCompetenceResultId
                };

                var responseLessonResult = await lessonResultDataService.CreateLessonResultAsync(lessonResult);

                if (!responseLessonResult.IsSuccess)
                {
                    var errorMessage = "Error creating <LessonResult> entity: " + responseLessonResult.Message;
                    if (responseLessonResult.ValidationErrors != null)
                    {
                        errorMessage += "\n" + string.Join("\n", responseLessonResult.ValidationErrors);
                    }
                    snackbar = Snackbar.Add(errorMessage, Severity.Error);
                    return Guid.Empty;
                }

                return responseLessonResult.Data.LessonResult.LessonResultId;
            } else
            {
                var chapterResult = languageLevelResult.ChapterResults.Find(x => x.ChapterId == chapter.ChapterId);

                if(chapterResult.LessonResults.Find(x => x.LessonId == lesson.LessonId) == null)
                {
                    LessonResultViewModel lessonResult = new LessonResultViewModel
                    {
                        LessonId = lesson.LessonId,
                        ChapterResultId = chapterResult.ChapterResultId,
                        LanguageCompetenceResultId = responseCompetenceResult.Data.LanguageCompetenceResult.LanguageCompetenceResultId
                    };

                    var responseLessonResult = await lessonResultDataService.CreateLessonResultAsync(lessonResult);

                    if (!responseLessonResult.IsSuccess)
                    {
                        var errorMessage = "Error creating <LessonResult> entity: " + responseLessonResult.Message;
                        if (responseLessonResult.ValidationErrors != null)
                        {
                            errorMessage += "\n" + string.Join("\n", responseLessonResult.ValidationErrors);
                        }
                        snackbar = Snackbar.Add(errorMessage, Severity.Error);
                        return Guid.Empty;
                    }

                    return responseLessonResult.Data.LessonResult.LessonResultId;
                } else
                {
                    var lessonResult = chapterResult.LessonResults.Find(x => x.LessonId == lesson.LessonId); 

                    return lessonResult.LessonResultId;
                }
            }
        }
    }

    void TryAgainQuiz()
    {
        showQuizResults = false;
        showQuizResultsTable = false;
        showCompleteQuiz = true;
        showSubmitButton = false;
        StartQuiz();
    }

    private bool FilterFunc1(QuestionResultElement element) => FilterFunc(element, searchString1);

    private bool FilterFunc(QuestionResultElement element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.QuestionRequirement.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.QuestionType.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CuvantLipsaUserValue != null && element.CuvantLipsaUserValue.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CuvantLipsaCorrectValues != null)
        {
            foreach (var value in element.CuvantLipsaCorrectValues)
            {
                if (value.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
            }
        }
        return false;
    }

    private int score;

    double CalculateScore()
    {
        score = 0;
        foreach (var questionResult in quizResultsElement.questionResultElements)
        {
            if (questionResult.UserAnswerIsCorrect)
            {
                score++;
            }
        }

        score = (score * 100) / quizResultsElement.questionResultElements.Count;

        return score;
    }
}


@* UPLOAD ESSAY IMAGE *@
@functions {
    #nullable enable
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();

    private async Task Clear()
    {
        _fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file.Name);
        }
    }

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        Snackbar.Add("Files uploaded successfully!", Severity.Success);
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;


    // WRITE YOUR ESSAY
    string sampleText = "";
    int wordCount => string.IsNullOrWhiteSpace(sampleText) ? 0 : sampleText.Split(' ').Length;
    bool isButtonDisabled => wordCount < 3;

    async Task SendWrittenEssay(string text)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        Snackbar.Add("Essay submitted successfully!", Severity.Success);
    }
}