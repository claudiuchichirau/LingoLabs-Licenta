@page "/placement-test/{Id}"
@using LingoLabs.App.Auth
@using LingoLabs.App.Contracts.AuthContracts
@using LingoLabs.App.Contracts.EnrollmentContracts
@using LingoLabs.App.Contracts.LanguageContracts
@using LingoLabs.App.ViewModel.EnrollmentModels
@using LingoLabs.App.ViewModel.LanguageModels
@using LingoLabs.App.ViewModel.LanguageModels.EnrollmentModels
@using LingoLabs.App.ViewModel.LanguageModels.LanguagePlacementTest
@using LingoLabs.App.ViewModel.MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@using static LingoLabs.App.Pages.GeneralPages.Dashboard
@inject NavigationManager NavigationManager
@inject CustomStateProvider authStateProvider
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="text-center" style="margin-bottom: 50px;">
    <h1 style="color: black; font-size: 33px; margin-top: 80px; margin-bottom: 15px;">
        Time for your first <span style="color: #FC6F05;">LingoLab's</span> Quiz
    </h1>
    <h2 style="font-size: 19px; margin-bottom: 30px;">
        Prepare to embark on a linguistic journey with our tailored assessment. Featuring a series of questions aimed<br />
        at gauging your proficiency and understanding of the language. Wishing you the best of luck!
    </h2>
    <MudButton Variant="Variant.Filled" OnClick="() => StartQuiz()" Color="Color.Primary" Style="background-color: #FC6F05; color: white; padding: 10px;"><MudIcon Icon="@Icons.Material.Filled.Quiz"></MudIcon> START NOW!</MudButton>
</div>        


@* COMPLETE QUIZ *@
@if (showCompleteQuiz)
{
    <div class="row">
        <div class="col text-center">
            <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowDown" Style="font-size: 48px;" Class="animated-arrow"></MudIcon>
        </div>
    </div>

    <div style="width: 98vw; overflow-x: hidden;">
        <MudCarousel Class="mud-width-full" Style="height: 500px;" AutoCycle="false" TData="object">

            <BulletTemplate Context="selected">
                <div Class="container mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon" style="margin-top: 25px;">
                    <span class="mud-icon-button-label">
                        <MudIcon Icon="@(selected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.CheckCircle)" Style="@(selected ? "color: green;" : "color : gray;")" />
                    </span>
                </div>
            </BulletTemplate>

            <PreviousButtonTemplate>
                <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                    <span class="mud-icon-button-label">
                        <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.SkipPrevious" Color="@Color.Inherit" />
                    </span>
                </div>
            </PreviousButtonTemplate>
            <NextButtonTemplate>
                <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                    <span class="mud-icon-button-label">
                        <MudIcon Class="mud-ripple mud-ripple-icon mud-icon-button-size-medium" Icon="@Icons.Material.Filled.SkipNext" Color="@Color.Inherit" />
                    </span>
                </div>
            </NextButtonTemplate>
            <ChildContent>
                @foreach (QuestionViewModel question in language.PlacementTest)
                {
                    var counter = language.PlacementTest.IndexOf(question) + 1;
                    <MudCarouselItem>
                        @if (question.QuestionType == QuestionTypeViewModel.MultipleChoice)
                        {
                            var columns = Math.Ceiling(Math.Sqrt(question.Choices.Count()));
                            <div class="d-flex flex-column align-items-center justify-content-center" style="height:100%; padding: 30px; margin-bottom: 15px;">
                                <div class="md-2 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 10px; margin-bottom: 40px; margin-top: -10px;">
                                    <div class="row text-center" style="width: 100%;">
                                        <span style="color: black; padding: 3px; font-size: 15px;" class="poppins-semi-bold">Multiple-Choice Question</span>
                                    </div>
                                </div>

                                <div class="mb-3" style="margin-bottom: 45px;">
                                    <span style="color: #FC6F05; padding: 10px; font-size: 29px;">@counter. @question.QuestionRequirement</span>
                                </div>

                                <div style="display: grid; grid-template-columns: repeat(@columns, 1fr); gap: 35px; margin-top: 25px; justify-items: center;">
                                    @foreach (ChoiceViewModel choice in question.Choices)
                                    {
                                        <div style="display: flex; justify-content: center;">
                                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" Style="@(choice.ChoiceId == userQuestions.Find(x => x.QuestionId == question.QuestionId).UserChoiceId ? "color: white; border-color: #2563EB; background-color: #2563EB; padding: 10px; font-size: 20px;" : "color: #2563EB; border-color: #2563EB; background-color: white; padding: 10px; font-size: 20px;")" OnClick="() => {SelectAnswer(question, choice); CheckAllQuestionsCompleted();}">
                                                @choice.ChoiceContent
                                            </MudButton>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        @if (question.QuestionType == QuestionTypeViewModel.TrueFalse)
                        {
                            <div class="d-flex flex-column align-items-center justify-content-center" style="height:100%; padding: 30px; margin-bottom: 15px;">
                                <div class="md-2 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 10px; margin-bottom: 40px; margin-top: -10px;">
                                    <div class="row text-center" style="width: 100%;">
                                        <span style="color: black; padding: 3px; font-size: 15px;" class="poppins-semi-bold">True/False Question</span>
                                    </div>
                                </div>

                                <div class="mb-3" style="margin-bottom: 45px;">
                                    <span style="color: #FC6F05; padding: 10px; font-size: 29px;">@counter. @question.QuestionRequirement</span>
                                </div>

                                <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 35px; margin-top: 25px; justify-items: center;">
                                    <div style="display: flex; justify-content: center;">
                                        <MudButton Color="Color.Primary" Variant="Variant.Outlined" Style="@(userQuestions.Find(x => x.QuestionId == question.QuestionId).ChoiceUserIsCorrect == true ? "color: white; border-color: green; background-color: green; padding: 10px; font-size: 20px;" : "color: green; border-color: green; background-color: white; padding: 10px; font-size: 20px;")" OnClick='() => {SelectAnswer(question, true); CheckAllQuestionsCompleted();}'>
                                            True
                                        </MudButton>
                                    </div>
                                    <div style="display: flex; justify-content: center;">
                                        <MudButton Color="Color.Primary" Variant="Variant.Outlined" Style="@(userQuestions.Find(x => x.QuestionId == question.QuestionId).ChoiceUserIsCorrect == false ? "color: white; border-color: red; background-color: red; padding: 10px; font-size: 20px;" : "color: red; border-color: red; background-color: white; padding: 10px; font-size: 20px;")" OnClick='() => {SelectAnswer(question, false); CheckAllQuestionsCompleted();}'>
                                            False
                                        </MudButton>
                                    </div>
                                </div>

                            </div>
                        }

                        @if (question.QuestionType == QuestionTypeViewModel.MissingWord)
                        {
                            <div class="d-flex flex-column align-items-center justify-content-center" style="height:100%; padding: 30px; margin-bottom: 15px;">
                                <div class="md-2 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 10px; margin-bottom: 40px; margin-top: -10px;">
                                    <div class="row text-center" style="width: 100%;">
                                        <span style="color: black; padding: 3px; font-size: 15px;" class="poppins-semi-bold">Missing Word Question</span>
                                    </div>
                                </div>

                                <div class="mb-3" style="margin-bottom: 45px;">
                                    <span style="color: #FC6F05; padding: 10px; font-size: 29px;">@counter. @question.QuestionRequirement</span>
                                </div>

                                <div style="display: flex; justify-content: center; align-items: center;">
                                    <MudTextField HelperText="Enter your answer here" Variant="Variant.Outlined" ValueChanged="(string value) => { ValidateMissingWordQuestion(value, question); CheckAllQuestionsCompleted(); }" />
                                </div>
                            </div>
                        }

                    </MudCarouselItem>

                }
            </ChildContent>
        </MudCarousel>
    </div>

    if (showSubmitButton)
    {
        <div class="row" style="margin-top: 35px; margin-bottom: 50px;">
            <div class="col text-center">
                <MudButton Variant="Variant.Filled" OnClick="() => SubmitQuiz(userQuestions)" Color="Color.Primary" Style="background-color: #FC6F05; color: white; padding: 10px;"><MudIcon Icon="@Icons.Material.Filled.Send"></MudIcon> SUBMIT</MudButton>
            </div>
        </div>
    }
}

@* QUIZ RESULTS *@
@if (showQuizResults)
{
    <div id="quizResults" class="text-center" style="margin-bottom: 50px;">
        <hr style="width: 20%; border: 1px solid rgba(128, 128, 128, 0.5); margin: auto; margin-top: 50px; margin-bottom: 50px;">
        
        <p style="font-size: 19px; margin-bottom: 30px;">
            You've completed the assessment, and your linguistic abilities have been mapped across various competencies.<br>
            Here's a snapshot of your language profile as it stands today. Embrace this insight as a guide on your journey to language mastery. 🌟
        </p>

        <span style="color: black; font-size: 19px; margin-top: 80px; margin-bottom: 15px;">
            Result
        </span>
        <h1 style="color: black; font-size: 37px; margin-bottom: 15px;">
            Your Quiz Score: <span style="color: #FC6F05;">@score%</span>
        </h1>

        @if (score >= 70)
        {
            <img src="images/quiz/best-score.png">
        }
        else if (score < 70 && score >= 45)
        {
            <img src="images/quiz/middle-score.png">
        }
        else
        {
            <div>
                <img src="images/quiz/low-score.png">
            </div>
        }
    </div>
}

@* QUIZ RESULTS TABLE *@
@if (showQuizResultsTable)
{
    <div class="text-center" style="margin-bottom: 50px;">
        <h1 style="color: black; font-size: 33px; margin-top: 80px; margin-bottom: 15px;">
            Quiz <span style="color: #FC6F05;">Results</span> Await
        </h1>
        <h2 style="font-size: 19px; margin-bottom: 30px;">
            Here are the results of your quiz. You can review your answers and see how you did. Keep up the good work!
        </h2>
    </div>

    <div class="container" style="margin-bottom: 20px;">
        <MudTable Items="@userQuestions" Bordered="@bordered" Filter="new Func<UserQuestionResponseViewModel,bool>(FilterFunc1)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Your Quiz Answers</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Class="text-center">Question Type</MudTh>
                <MudTh Class="text-center">Question Requirement</MudTh>
                <MudTh Class="text-center">Your Answer</MudTh>
                <MudTh Class="text-center">Correct Answer</MudTh>
                <MudTh Class="text-center">Is Correct</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Question Type" Class="text-center">@context.QuestionType</MudTd>
                <MudTd DataLabel="Question Requirement" Class="text-center">@context.QuestionRequirement</MudTd>
                @{
                    QuestionViewModel correctQuestion = language.PlacementTest.Find(x => x.QuestionId == context.QuestionId);
                }

                @if (context.QuestionType == QuestionTypeViewModel.MultipleChoice && correctQuestion.Choices.Count > 0)        // MULTIPLE CHOICE
                {
                    var correctChoiceContent = correctQuestion.Choices.Find(x => x.IsCorrect).ChoiceContent;
                    var userChoiceContent = correctQuestion.Choices.Find(x => x.ChoiceId == context.UserChoiceId).ChoiceContent;
                    <MudTd DataLabel="Your Answer" Class="text-center">@userChoiceContent</MudTd>
                    <MudTd DataLabel="Correct Answer" Class="text-center">@correctChoiceContent</MudTd>
                }
                else if (context.QuestionType == QuestionTypeViewModel.TrueFalse && correctQuestion.Choices.Count > 0)         // TRUE / FALSE
                {
                    bool correctitudinesQuestion = correctQuestion.Choices[0].IsCorrect;
                    <MudTd DataLabel="Your Answer" Class="text-center">@context.ChoiceUserIsCorrect</MudTd>
                    <MudTd DataLabel="Correct Answer" Class="text-center">@correctitudinesQuestion</MudTd>
                }
                else if (context.QuestionType == QuestionTypeViewModel.MissingWord && correctQuestion.Choices.Count > 0)       // MISSING WORD
                {
                    <MudTd DataLabel="Your Answer" Class="text-center">@context.ChoiceContent</MudTd>

                    List<string> cuvantLipsaCorrectValues = new List<string>();
                    foreach (var choice in correctQuestion.Choices)
                    {
                        cuvantLipsaCorrectValues.Add(choice.ChoiceContent);
                    }
                    string cuvantLipsaCorrectValuesString = string.Join(" / ", cuvantLipsaCorrectValues);

                    <MudTd DataLabel="Correct Answer" Class="text-center">@cuvantLipsaCorrectValuesString</MudTd>
                }

                @if (@context.Result == true)
                {
                    <MudTd DataLabel="Is Correct" Style="color: forestgreen;" Class="text-center">Yes</MudTd>
                }
                else
                {
                    <MudTd DataLabel="Is Correct" Style="color: red;" Class="text-center">No</MudTd>
                }
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
}

@if (IsUSerLanguageLevelsInfoLoaded == true)
{
    <div class="container">
        <div style="padding: 15px; margin-bottom: 10px;">
            <p class="text-center" style="color: black; font-size: 18px;"><MudIcon Icon="@Icons.Material.Filled.Analytics" Size=Size.Large Color="Color.Success" />This is your approximate levels for @language.LanguageName</p>
        </div>

        @foreach (var competence in language.LanguageCompetences)
        {
            <div class="row justify-content-center align-items-center" style="padding: 15px;">
                <div class="col text-center">
                    <p style="font-size: 22px; color: black;">@competence.LanguageCompetenceName</p>
                </div>
                <div class="col text-left" style="width: 70%; height: 70%;">

                    <MudTimeline TimelineOrientation=TimelineOrientation.Horizontal TimelinePosition=TimelinePosition.Bottom Reverse=false>
                        @{
                            bool found = false;
                            if (competenceLevelDictionary.ContainsKey(competence.LanguageCompetenceId))
                            {
                                @foreach (var level in language.LanguageLevels)
                                {
                                    if (competenceLevelDictionary[competence.LanguageCompetenceId] == level.LanguageLevelId)
                                    {
                                        found = true;
                                        <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
                                            <ItemContent>
                                                <MudAlert Severity="Severity.Success">@level.LanguageLevelName</MudAlert>
                                            </ItemContent>
                                        </MudTimelineItem>
                                    }
                                    else if (!found && competenceLevelDictionary[competence.LanguageCompetenceId] != level.LanguageLevelId)
                                    {
                                        <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
                                            <ItemContent>
                                                <MudAlert Severity="Severity.Success">@level.LanguageLevelName</MudAlert>
                                            </ItemContent>
                                        </MudTimelineItem>
                                    }
                                    else if (found && competenceLevelDictionary[competence.LanguageCompetenceId] != level.LanguageLevelId)
                                    {
                                        <MudTimelineItem Color="Color.Dark" Variant="Variant.Filled">
                                            <ItemContent>
                                                <MudAlert Severity="Severity.Normal">@level.LanguageLevelName</MudAlert>
                                            </ItemContent>
                                        </MudTimelineItem>                                    
                                    }
                                }
                            }
                            else
                            {
                                @foreach (var level in language.LanguageLevels)
                                {
                                    <MudTimelineItem Color="Color.Dark" Variant="Variant.Filled">
                                        <ItemContent>
                                            <MudAlert Severity="Severity.Normal">@level.LanguageLevelName</MudAlert>
                                        </ItemContent>
                                    </MudTimelineItem>
                                }
                            }
                        }
                    </MudTimeline>
                </div>
            </div>
        }
    </div>
}
else if (IsUSerLanguageLevelsInfoLoaded == false && showQuizResults == true)
{
    <div class="text-center" style="margin-bottom: 50px;">
        <h1 style="color: black; font-size: 33px; margin-top: 80px; margin-bottom: 15px;">
            Your <span style="color: #FC6F05;">LingoLab's</span> Quiz Results
        </h1>
        <h2 style="font-size: 19px; margin-bottom: 30px;">
            Your quiz results are being processed. Please wait a moment while we calculate your language levels.
            <div class="text-center" style="margin-top: 100px; margin-bottom: 48px;">
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            </div>
        </h2>
    </div>

}

@if (showQuizResults == true)
{
    <div style="display: flex; justify-content: center; padding: 25px;">
        <MudButton Variant="Variant.Filled" OnClick="NavigateToLanguageDashboard" Color="Color.Primary" Style="background-color: #FC6F05; color: white;">
            <MudIcon Icon="@Icons.Material.Filled.Quiz"></MudIcon> Explore Lessons
        </MudButton>
    </div>
}


<style>
    @@keyframes moveArrow {
        0% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(20px);
        }

        100% {
            transform: translateY(0);
        }
    }

    .animated-arrow {
        animation: moveArrow 2s infinite;
    }
</style>


@code {
    [Inject]
    private ILanguageDataService LanguageDataService { get; set; }
    [Inject]
    private ILanguageCompetenceDataService LanguageCompetenceDataService { get; set; }
    [Inject]
    private ILanguageLevelDataService LanguageLevelDataService { get; set; }
    [Inject]
    private IChapterDataService ChapterDataService { get; set; }
    [Inject]
    private ILessonDataService LessonDataService { get; set; }
    [Inject]
    private IQuestionDataService QuestionDataService { get; set; }
    [Inject]
    private IChoiceDataService ChoiceDataService { get; set; }
    [Inject]
    private IUserLanguageLevelDataService UserLanguageLevelDataService { get; set; }

    [Inject]
    private IEnrollmentDataService EnrollmentDataService { get; set; }
    [Inject]
    private ILanguageLevelResultDataService LanguageLevelResultDataService { get; set; }
    [Inject]
    private IChapterResultDataService ChapterResultDataService { get; set; }
    [Inject]
    private ILessonResultDataService LessonResultDataService { get; set; }
    [Inject]
    private IQuestionResultDataService QuestionResultDataService { get; set; }

    [Parameter]
    public string Id { get; set; }
    Guid CurrentLanguageId = Guid.Empty;
    Guid UserId = Guid.Empty;
    Guid CurrentEnrollmentId = Guid.Empty;

    private LanguageViewModel language = new LanguageViewModel();
    private EnrollmentViewModel enrollment = new EnrollmentViewModel();
    Dictionary<Guid, Guid> competenceLevelDictionary = new Dictionary<Guid, Guid>();
    private AuthenticationState authState;
    private bool IsLanguageInfoLoaded = false;
    private bool IsUSerLanguageLevelsInfoLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        authState = await authStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        var claims = user.Claims.ToList();
        var userId = claims.Find(x => x.Type == "nameid").Value;
        UserId = Guid.Parse(userId);

        CurrentLanguageId = Guid.Parse(Id);

        language = await LanguageDataService.GetLanguageByIdAsync(CurrentLanguageId);

        IsLanguageInfoLoaded = true;
    }
}

@* COMPLETE QUIZ *@
@functions {
    private bool showCompleteQuiz = false;
    private bool showSubmitButton = false;
    private bool bordered = false;
    private LessonElement lesson = new LessonElement();
    List<UserQuestionResponseViewModel> userQuestions;

    void StartQuiz()
    {
        showCompleteQuiz = true;
        userQuestions = new List<UserQuestionResponseViewModel>();
        foreach (QuestionViewModel question in language.PlacementTest)
        {
            userQuestions.Add(new UserQuestionResponseViewModel
            {
                QuestionId = question.QuestionId,
                QuestionType = question.QuestionType,
                QuestionRequirement = question.QuestionRequirement,
                QuestionCompleted = false
            });
        }
    }

    void SelectAnswer(QuestionViewModel QuestionViewModel, ChoiceViewModel choice)    // MultipleChoice question
    {
        if (QuestionViewModel.QuestionType == QuestionTypeViewModel.MultipleChoice)
        {
            userQuestions.Find(x => x.QuestionId == QuestionViewModel.QuestionId).UserChoiceId = choice.ChoiceId;
            userQuestions.Find(x => x.QuestionId == QuestionViewModel.QuestionId).QuestionCompleted = true;
        }
    }

    void SelectAnswer(QuestionViewModel QuestionViewModel, bool trueFalseAnswer)        // true/false question
    {
        if (QuestionViewModel.QuestionType == QuestionTypeViewModel.TrueFalse)
        {
            userQuestions.Find(x => x.QuestionId == QuestionViewModel.QuestionId).ChoiceUserIsCorrect = trueFalseAnswer;
            userQuestions.Find(x => x.QuestionId == QuestionViewModel.QuestionId).QuestionCompleted = true;
        }
    }

    void ValidateMissingWordQuestion(string value, QuestionViewModel question)        // missing word question
    {
        if (!string.IsNullOrEmpty(value))
        {
            userQuestions.Find(x => x.QuestionId == question.QuestionId).ChoiceContent = value;
            userQuestions.Find(x => x.QuestionId == question.QuestionId).QuestionCompleted = true;
        }
    }

    void CheckAllQuestionsCompleted()
    {
        foreach (var question in userQuestions)
        {
            if (!question.QuestionCompleted)
            {
                showSubmitButton = false;
                return;
            }
        }
        showSubmitButton = true;
    }
}


@* SHOW QUIZ RESULTS *@
@functions {
    private Snackbar snackbar;
    private bool showQuizResultsTable = false;
    private bool showQuizResults = false;
    private string searchString1 = "";

    public async Task SubmitQuiz(List<UserQuestionResponseViewModel> userQuestionResponses)
    {
        int correctAnswers = 0;

        foreach (UserQuestionResponseViewModel questionResult in userQuestionResponses)
        {
            Guid questionResultId = questionResult.QuestionId;

            QuestionViewModel correctQuestion = language.PlacementTest.Find(x => x.QuestionId == questionResultId);

            if (questionResult.QuestionType == QuestionTypeViewModel.MultipleChoice && correctQuestion.Choices.Count > 0)     // MULTIPLE CHOICES
            {
                Guid correctChoiceId = correctQuestion.Choices.Find(x => x.IsCorrect).ChoiceId;
                if (questionResult.UserChoiceId == correctChoiceId)
                {
                    questionResult.Result = true;
                    correctAnswers++;
                }
                else
                    questionResult.Result = false;
            }
            else if (questionResult.QuestionType == QuestionTypeViewModel.TrueFalse && correctQuestion.Choices.Count > 0)     // TRUE / FALSE
            {
                bool correctitudinesQuestion = correctQuestion.Choices[0].IsCorrect;
                if (questionResult.ChoiceUserIsCorrect == correctitudinesQuestion)
                {
                    questionResult.Result = true;
                    correctAnswers++;
                }
                else
                    questionResult.Result = false;
            }
            else if (questionResult.QuestionType == QuestionTypeViewModel.MissingWord && correctQuestion.Choices.Count > 0)      // MISSING WORD
            {
                List<string> cuvantLipsaCorrectValues = new List<string>();
                foreach (var choice in correctQuestion.Choices)
                {
                    cuvantLipsaCorrectValues.Add(choice.ChoiceContent);
                }

                questionResult.Result = false;
                foreach (string correctValue in cuvantLipsaCorrectValues)
                {
                    if (questionResult.ChoiceContent == correctValue)
                    {
                        questionResult.Result = true;
                        correctAnswers++;
                        break;
                    }
                }
            }
        }

        showCompleteQuiz = false;
        showSubmitButton = false;
        showQuizResultsTable = true;


        // CREATE RESULTS

        EnrollmentViewModel enrollmentViewModel = new EnrollmentViewModel
        {
            LanguageId = CurrentLanguageId,
            UserId = UserId,
        };

        var response = await EnrollmentDataService.CreateEnrollmentAsync(enrollmentViewModel);
        CurrentEnrollmentId = response.Data.EnrollmentId;

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        if (!response.IsSuccess)
        {
            var errorMessage = "An error occurred while submitting the quiz. Please try again later: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            Snackbar.Add("Quiz submitted successfully!", Severity.Success);
        }

        CalculateScore(correctAnswers);
        CalculateUserLanguageLevels(userQuestionResponses);
    }

    private bool FilterFunc1(UserQuestionResponseViewModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(UserQuestionResponseViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.QuestionRequirement.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.QuestionType.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ChoiceContent != null && element.ChoiceContent.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private int score;

    void CalculateScore(int correctAnswers)
    {
        score = 0;

        score = (correctAnswers * 100) / userQuestions.Count;

        showQuizResults = true;
    }

    async void CalculateUserLanguageLevels(List<UserQuestionResponseViewModel> userQuestionResponses)
    {
        foreach (var languageCompetence in language.LanguageCompetences)
        {
            List<UserQuestionResponseViewModel> languageCompetenceQuestions = new List<UserQuestionResponseViewModel>();

            foreach (var question in userQuestionResponses)
            {
                var placementTestQuestion = language.PlacementTest.Find(q => q.QuestionId == question.QuestionId);
                LessonViewModel lesson = await LessonDataService.GetLessonByIdAsync(placementTestQuestion.LessonId);

                if (lesson.LanguageCompetenceId == languageCompetence.LanguageCompetenceId)
                {
                    languageCompetenceQuestions.Add(question);
                }
            }


            if (!languageCompetenceQuestions.Any())
            {
                continue;
            }

            Guid? highestPassedLevelId = null;

            foreach (var languageLevel in language.LanguageLevels)
            {
                List<UserQuestionResponseViewModel> levelQuestions = new List<UserQuestionResponseViewModel>();

                foreach (var question in languageCompetenceQuestions)
                {
                    var placementTestQuestion = language.PlacementTest.Find(q => q.QuestionId == question.QuestionId);
                    LessonViewModel lesson = await LessonDataService.GetLessonByIdAsync(placementTestQuestion.LessonId);
                    ChapterViewModel chapter = await ChapterDataService.GetChapterByIdAsync(lesson.ChapterId);
                    if (chapter.LanguageLevelId == languageLevel.LanguageLevelId)
                    {
                        levelQuestions.Add(question);
                    }
                }

                var correctResponses = levelQuestions
                    .Count(q => userQuestionResponses
                        .Any(r => r.QuestionId == q.QuestionId && r.Result));

                if ((double)correctResponses / levelQuestions.Count >= 0.65)
                {
                    highestPassedLevelId = languageLevel.LanguageLevelId;
                }
            }

            if (highestPassedLevelId.HasValue)
            {
                UserLanguageLevelViewModel userLanguageLevelViewModel = new UserLanguageLevelViewModel
                {
                    EnrollmentId = CurrentEnrollmentId,
                    LanguageCompetenceId = languageCompetence.LanguageCompetenceId,
                    LanguageLevelId = highestPassedLevelId.Value
                };

                var response = await UserLanguageLevelDataService.CreateUserLanguageLevelAsync(userLanguageLevelViewModel);

                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
                if (!response.IsSuccess)
                {
                    var errorMessage = "An error occurred while saving the user language level. Please try again later: " + response.Message;
                    if (response.ValidationErrors != null)
                    {
                        errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
                    }
                    snackbar = Snackbar.Add(errorMessage, Severity.Error);
                    return;
                }
                else
                {
                    snackbar = Snackbar.Add("User language level saved successfully!", Severity.Success); 
                }
            }
        }
        enrollment = await EnrollmentDataService.GetEnrollmentByIdAsync(CurrentEnrollmentId);
        StateHasChanged();

        competenceLevelDictionary = new Dictionary<Guid, Guid>();

        foreach (var userLanguageLevel in enrollment.UserLanguageLevels)
        {
            if (!competenceLevelDictionary.ContainsKey(userLanguageLevel.LanguageCompetenceId))
            {
                competenceLevelDictionary[userLanguageLevel.LanguageCompetenceId] = userLanguageLevel.LanguageLevelId;
            }
        }

        IsUSerLanguageLevelsInfoLoaded = true;
        StateHasChanged();
    }

    void NavigateToLanguageDashboard()
    {
        NavigationManager.NavigateTo($"/language-dashboard/{CurrentLanguageId}");
    }
}

