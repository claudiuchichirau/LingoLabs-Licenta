@page "/language-overview"
@using LingoLabs.App.ViewModel.MudBlazor
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top: -10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
</div>

<MudContainer>
    <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom:50px;">
        <div class="col-md-6 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
            <div class="row">
                <h2 style="color: #2563EB; padding: 20px; margin-top: 10px;" class="poppins-semi-bold">Curs Overview</h2>
            </div>
        </div>
    </div>
</MudContainer>

<div class="row" style="max-width: 100vw; overflow-x: auto;">
    <div class="col">
        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 80px; margin-top: 50px; margin-bottom: 20px;" class="poppins-semi-bold">
                Nume:&emsp;
                <span style="color: #2563EB; font-size: 21px;">
                    Limba Engleza
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Descriere:&emsp;
                <span style="font-size: 21px; color: #2563EB;">
                    Cursul de limba engleza este un curs de nivel incepator, care se adreseaza persoanelor care doresc sa invete limba engleza de la zero.
                </span>
            </h1>
        </div>

        <div class="row">
            <!-- First Column (1/3 width) -->
            <div class="col-md-4">
                <div class="text-left">
                    <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                        Video:
                    </h1>
                </div>
            </div>

            <!-- Second Column (2/3 width) -->
            <div class="col-md-8">
                <iframe style="width: 426px; height: 240px; margin-top: 9px;" src="https://www.youtube.com/embed/CA1L7_hyRqs" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
            </div>
        </div>


    </div>
    <div class="col d-flex align-items-center justify-content-center">
        <img src="https://vectorflags.s3-us-west-2.amazonaws.com/flags/uk-circle-01.png" alt="Limba Engleza" style="width: 350px; height: auto;">
    </div>
</div>

<div class="text-left" style="max-width: 100vw; overflow-x: auto;">
    <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
        Cuvinte cheie:
    </h1>

    <MudContainer Style="overflow-x: hidden;">
        <div class="row mx-0" style="margin-top: 25px; margin-bottom: 50px; width: 333vh; min-height: 12vh;">
            <div class="col-md-6" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <MudTooltip>
                    <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #2563EB; color: white; position: absolute; right: -25px; top: -25px;" @onclick='() => OpenDialog()' />
                </MudTooltip>

                <MudStack Row="true">
                    @foreach (var item in KewWords)
                    {
                        <MudPaper Class="pa-3" Style="background-color: #02497E; color: white;">@item</MudPaper>
                    }
                </MudStack>
            </div>
        </div>
    </MudContainer>

    <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă un cuvânt cheie</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" @bind-Value="keyWord" Label="Nume"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Cancel" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton OnClick="@(async () => AddKeyWord(keyWord))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

</div>

<div class="text-left">
    <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 30px;" class="poppins-semi-bold">Nivelurile Lingvistice</h1>
</div>

<div style="max-width: 80%; margin: auto; margin-bottom: 55px;">
    <MudTable Items="@LanguageLevels" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<LanguageLevelElement,bool>(FilterFuncViewLanguage)"
              @bind-SelectedItem="selectedAdminLanguage" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
              OnCommitEditClick="@(() => EditLanguageLevel())"
              IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Niveluri Lingvistice</MudText>
            <MudSpacer />
            <div class="text-center" style="width: 55%;">
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
            </div>
            <MudTooltip Text="Add">
                <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialogLanguageLevel()' />
            </MudTooltip>
        </ToolBarContent>

        <ColGroup>
            @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
            {
                <col style="width:50px;" />
            }
            <col />
            @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
            {
                <col style="width:50px;" />
            }
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LanguageLevelElement, object>(x=>x.LanguageLevelName)">Nume</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LanguageLevelElement, object>(x=>x.LanguageLevelAlias)">Alias</MudTableSortLabel></MudTh>
            <MudTh>Descriere</MudTh>
            <MudTh>Link Video</MudTh>
            <MudTh>Numărul de prioritate</MudTh>
            <MudTh>Vizualizează</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nume">@context.LanguageLevelName</MudTd>
            <MudTd DataLabel="Alias">@context.LanguageLevelAlias</MudTd>
            <MudTd DataLabel="Descriere">@context.LanguageLevelDescription</MudTd>
            <MudTd DataLabel="Link Video">@context.LanguageLevelVideoLink</MudTd>
            <MudTd DataLabel="Numărul de prioritate">@context.LanguageLevelPriorityNumber</MudTd>
            <MudTd DataLabel="Vizualizează">
                <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => NavigateToLanguageLevelOverview() )">Vezi mai multe</MudButton>
            </MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Nume">
                <MudTextField @bind-Value="@context.LanguageLevelName" />
            </MudTd>
            <MudTd DataLabel="Alias">
                <MudTextField @bind-Value="@context.LanguageLevelAlias" />
            </MudTd>
            <MudTd DataLabel="Descriere">
                <MudTextField @bind-Value="@context.LanguageLevelDescription" />
            </MudTd>
            <MudTd DataLabel="Link Video">
                <MudTextField @bind-Value="@context.LanguageLevelVideoLink" />
            </MudTd>
            <MudTd DataLabel="Numărul de prioritate">
                <MudTextField @bind-Value="@context.LanguageLevelPriorityNumber" />
            </MudTd>
            <MudTd DataLabel="Vizualizează"></MudTd>
        </RowEditingTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <EditButtonContent Context="button">
            <div style="display: flex; flex-direction: row;">
                <MudTooltip Text="Editeaza nivelul lingvistic">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" Style="margin-right: 10px;" />
                </MudTooltip>
                <MudTooltip Text="Delete Course">
                    <MudIconButton Text="Strege nivelul lingvistic" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteLanguageLevel" Class="pa-0" Style="margin-left: 10px;" />
                </MudTooltip>
            </div>
        </EditButtonContent>
    </MudTable>

    <MudDialog @bind-IsVisible="visibleLanguageLevel" Options="dialogOptionsForLanguageLevel">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă un nivel lingvistic</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" @bind-Value="LanguageLevelNameValue" Label="Nume"></MudTextField>
            <MudTextField T="string" @bind-Value="LanguageLevelAliasValue" Label="Alias"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CancelLanguageLevel" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton OnClick="@(async () => AddLanguageLevel(LanguageLevelNameValue, LanguageLevelAliasValue))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>
</div>

<div class="text-left">
    <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 30px;" class="poppins-semi-bold">Competențe Lingvistice</h1>
</div>

<div style="max-width: 80%; margin: auto; margin-bottom: 55px;">
    <MudTable Items="@LanguageCompetences" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<LanguageCompetenceElement,bool>(FilterFuncViewCompetence)"
              @bind-SelectedItem="selectedLanguageCompetence" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
              OnCommitEditClick="@(() => EditLanguageCompetence())"
              IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Competențe Lingvistice</MudText>
            <MudSpacer />
            <div class="text-center" style="width: 55%;">
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
            </div>
            <MudTooltip Text="Add">
                <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialogLanguageCompetence()' />
            </MudTooltip>
        </ToolBarContent>

        <ColGroup>
            @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
            {
                <col style="width:50px;" />
            }
            <col />
            @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
            {
                <col style="width:50px;" />
            }
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LanguageCompetenceElement, object>(x=>x.LanguageCompetenceName)">Nume</MudTableSortLabel></MudTh>
            <MudTh>Tip</MudTh>
            <MudTh>Descriere</MudTh>
            <MudTh>Link Video</MudTh>
            <MudTh>Numărul de prioritate</MudTh>
            <MudTh>Vizualizează</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nume">@context.LanguageCompetenceName</MudTd>
            <MudTd DataLabel="Tip">@context.LanguageCompetenceType</MudTd>
            <MudTd DataLabel="Descriere">@context.LanguageCompetenceDescription</MudTd>
            <MudTd DataLabel="Link Video">@context.LanguageCompetenceVideoLink</MudTd>
            <MudTd DataLabel="Numărul de prioritate">@context.LanguageCompetencePriorityNumber</MudTd>
            <MudTd DataLabel="Vizualizează">
                <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => NavigateToLanguageCompetenceOverview() )">Vezi mai multe</MudButton>
            </MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Nume">
                <MudTextField @bind-Value="@context.LanguageCompetenceName" />
            </MudTd>
            <MudTd DataLabel="Tip">
                <MudTextField @bind-Value="@context.LanguageCompetenceType" />
            </MudTd>
            <MudTd DataLabel="Descriere">
                <MudTextField @bind-Value="@context.LanguageCompetenceDescription" />
            </MudTd>
            <MudTd DataLabel="Link Video">
                <MudTextField @bind-Value="@context.LanguageCompetenceVideoLink" />
            </MudTd>
            <MudTd DataLabel="Numărul de prioritate">
                <MudTextField @bind-Value="@context.LanguageCompetencePriorityNumber" />
            </MudTd>
            <MudTd DataLabel="Vizualizează"></MudTd>
        </RowEditingTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <EditButtonContent Context="button">
            <div style="display: flex; flex-direction: row;">
                <MudTooltip Text="Editeaza competența lingvistică">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" Style="margin-right: 10px;" />
                </MudTooltip>
                <MudTooltip Text="Șterge competența lingvistică">
                    <MudIconButton Text="Strege nivelul lingvistic" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteLanguageLevel" Class="pa-0" Style="margin-left: 10px;" />
                </MudTooltip>
            </div>
        </EditButtonContent>
    </MudTable>

    <MudDialog @bind-IsVisible="visibleLanguageCompetence" Options="dialogOptionsForLanguageCompetence">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă o competență lingvistică</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" @bind-Value="LanguageCompetenceNameValue" Label="Nume"></MudTextField>
            <MudSelect T="LanguageCompetenceTypeElement" Label="Tip" @bind-Value="LanguageCompetenceTypeValue">
                <MudSelectItem Value="LanguageCompetenceTypeElement.Grammar">Grammar</MudSelectItem>
                <MudSelectItem Value="LanguageCompetenceTypeElement.Listening">Listening</MudSelectItem>
                <MudSelectItem Value="LanguageCompetenceTypeElement.Speaking">Speaking</MudSelectItem>
                <MudSelectItem Value="LanguageCompetenceTypeElement.Writing">Writing</MudSelectItem>
            </MudSelect>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CancelLanguageCompetence" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton OnClick="@(async () => AddLanguageCompetence(LanguageCompetenceNameValue, LanguageCompetenceTypeValue))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>
</div>

<div class="text-left">
    <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 35px;" class="poppins-semi-bold">Test Inițial</h1>
</div>


@* PLACEMENT TEST DOESN'T EXIST *@
<MudContainer Style="overflow-x: hidden;">
    <div class="row justify-content-center" style="margin-top: 15px; margin-bottom: 50px; min-height: 12vh; background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
        <div class="col-md-6 d-flex justify-content-center align-items-center">
            <p style="font-size: 16px; font-weight: bold; text-align: center; margin-top: 15px; margin-left: 30px;">
                    Momentan nu există niciun test inițial creat. Crează unul chiar acum!
                 </p>
            </div>

            <div class="col-md-6 d-flex justify-content-center align-items-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="background-color: #2563EB; color: white; padding: 10px; width: 60%;" @onclick='() => OpenDialogCreatePlacementTest()'>Crează acum!</MudButton>
            </div>
        </div>
</MudContainer>

<MudDialog @bind-IsVisible="visibleCreatePlacementTest" Options="dialogOptionsForCreatePlacementTest">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Adaugă un test inițial</span>
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudText Typo="Typo.body1">
            <span style="font-size: 16px;">Pentru a crea un test inițial, urmați pașii de mai jos:</span>
        </MudText>
        <MudList>
            <MudListItem>
                <MudText Typo="Typo.body1"><strong>&nbsp;1. Selectați Nivelul Lingvistic:</strong> Începeți prin a vizualiza toate nivelurile lingvistice disponibile pentru limba respectivă, de la A1 (începător) până la C2 (avansat).</MudText>
            </MudListItem>
            <MudListItem>
                <MudText Typo="Typo.body1"><strong>&nbsp;2. Alegeți Competențele Lingvistice:</strong> Pentru fiecare nivel lingvistic, veți vedea o listă de competențe lingvistice, cum ar fi Listening, Writing, Grammar, etc.</MudText>
            </MudListItem>
            <MudListItem>
                <MudText Typo="Typo.body1"><strong>&nbsp;3. Selectați Întrebările:</strong> În cadrul fiecărei competențe lingvistice, vor apărea întrebări specifice pe care trebuie să le selectați. Asigurați-vă că alegeți întrebări care să acopere toate competențele lingvistice.</MudText>
            </MudListItem>
            <MudListItem>
                <MudText Typo="Typo.body1"><strong>&nbsp;4. Verificați Diversitatea Întrebărilor:</strong> Este esențial să selectați <strong>minim 10 întrebări</strong>, asigurându-vă că acestea provin din toate nivelurile lingvistice și toate competențele lingvistice existente.</MudText>
            </MudListItem>
            <MudListItem>
                <MudText Typo="Typo.body1"><strong>&nbsp;5. Adăugați Întrebările la Test:</strong> După ce ați selectat întrebările dorite, apăsați butonul “Add” pentru a le include în testul inițial.</MudText>
            </MudListItem>
        </MudList>

        <MudText Typo="Typo.body1" Style="margin-top: 20px;">
            <span style="font-size: 16px;">Nivelurile lingvistice:</span>
        </MudText>

        @foreach (var level in LanguageLevels)
        {
            <MudStack Spacing="2" Style="margin-top: 35px;">
                <MudButton OnClick="() => OnExpandCollapseClick(level.LanguageLevelName)">@(IsExpanded(level.LanguageLevelName) ? $"Ascunde - {level.LanguageLevelName}" : level.LanguageLevelName)</MudButton>
                <MudDivider />
                <MudCollapse Expanded="@IsExpanded(level.LanguageLevelName)">
                    <MudText Typo="Typo.body1">
                        <span style="font-size: 16px; margin-top: 5px; margin-left: 31px;">Competențe lingvistice:</span>

                        @foreach (var competence in LanguageCompetences)
                        {
                            <MudStack Spacing="2" Style="max-width: 95%; margin-left: auto; margin-right: auto;">
                                <MudButton Style="color: #2563EB;" OnClick="() => OnExpandCollapseClick(competence.LanguageCompetenceName)">@(IsExpanded(competence.LanguageCompetenceName) ? $"Ascunde - {competence.LanguageCompetenceName}" : competence.LanguageCompetenceName)</MudButton>
                                <MudDivider />
                                <MudCollapse Expanded="@IsExpanded(competence.LanguageCompetenceName)" Style="display: flex; justify-content: center; align-items: center;">
                                    <MudText Typo="Typo.body1" Style="margin-top: 20px;">
                                        <MudTable Items="@Questions.Take(10)" MultiSelection="true" @bind-SelectedItems="selectedQuestions" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true"
                                                  CustomHeader="true" CustomFooter="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" >
                                            <HeaderContent>
                                                <MudTHeadRow IsCheckable="true">
                                                    <MudTh>Cerință</MudTh>
                                                    <MudTh>Vezi mai multe</MudTh>
                                                </MudTHeadRow>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Cerință">@context.QuestionRequirement</MudTd>
                                                <MudTd DataLabel="Vezi mai multe">
                                                    <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => OpenDialogQuestion(context) )">Vezi mai multe</MudButton>
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>

                                        <MudDialog @bind-IsVisible="visibleQuestion" Options="dialogOptionsQuestion">
                                            <TitleContent>
                                                <MudText Typo="Typo.h6">
                                                    <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                                                    <span style="color: #2563EB;">Vizualizează întrebarea</span>
                                                </MudText>
                                            </TitleContent>
                                            <DialogContent>
                                                <MudText Typo="Typo.body1">
                                                    <span style="font-size: 16px;">Cerință: @currentQuestion.QuestionRequirement</span>
                                                </MudText>
                                                <MudList>
                                                    <span style="font-size: 16px;">Variante de răspuns: </span>
                                                    @foreach (var choice in currentQuestion.QuestionChoices)
                                                    {
                                                        @if (choice.IsCorrect == true)
                                                        {
                                                            <MudListItem Style="margin: 0; padding: 0;">
                                                                <MudText Typo="Typo.body1" Style="color: green;">&nbsp;- @choice.ChoiceContent</MudText>
                                                            </MudListItem>
                                                        } else if (choice.IsCorrect == false)
                                                        {
                                                            <MudListItem Style="margin: 0; padding: 0;">
                                                                <MudText Typo="Typo.body1" Style="color: gray;">&nbsp;- @choice.ChoiceContent</MudText>
                                                            </MudListItem>
                                                        }
                                                    }
                                                </MudList>

                                                @if (currentQuestion.QuestionImageData != null || currentQuestion.QuestionVideoLink != null)
                                                {
                                                    <MudText>
                                                        <span style="font-size: 16px; margin-top:15px;">Resurse suplimentare:</span>
                                                    </MudText>
                                                    <MudText Style="display: flex; flex-direction: column; align-items: center;">
                                                        @if (currentQuestion.QuestionImageData != null)
                                                        {
                                                            <img src="@currentQuestion.QuestionImageData" alt="Imagine întrebare" style="max-width: 400px; max-height: 500px; width: 100%; height: auto; margin-top: 10px; margin-bottom: 10px;" />
                                                        }
                                                        @if (currentQuestion.QuestionVideoLink != null)
                                                        {
                                                            <MudText Typo="Typo.body1" Style="margin-top: 10px;">
                                                                <iframe style="width: 426px; height: 240px; margin-top: 9px;" src="@currentQuestion.QuestionVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                                                            </MudText>
                                                        }
                                                    </MudText>
                                                }

                                            </DialogContent>
                                            <DialogActions>
                                                <MudButton Variant="Variant.Filled" OnClick="CancelQuestion" Class="px-10" Style="color: black;">Close</MudButton>
                                            </DialogActions>
                                        </MudDialog>

                                        
                                    </MudText>
                                </MudCollapse>
                            </MudStack>
                        }
                    </MudText>
                </MudCollapse>
            </MudStack>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelCreatePlacementTest" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(async () => CreatePlacementTest(selectedQuestions.Select(q => q.QuestionId).ToList()))" Style="color: #2563EB;" Disabled="@(!(selectedQuestions.Count >= 10))">Create</MudButton>
    </DialogActions>
</MudDialog>


@* PLACEMENT TEST EXISTS *@
<MudTable Items="@Questions" Hover="true" SortLabel="Sort By" Filter="new Func<QuestionElement,bool>(FilterFuncViewPlacementTest)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Întrebări - Test Inițial</MudText>
        <MudSpacer />
        <div class="text-center" style="width: 55%;">
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
        </div>
        <MudTooltip Text="Update">
            <MudFab Icon="@Icons.Material.Filled.Update" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialogUpdatePlacementTest()' />
        </MudTooltip>
        <MudTooltip Text="Delete">
            <MudFab Icon="@Icons.Material.Filled.Delete" Style="background-color: #FC6F05; color: white;" @onclick='() => DeletePlacementTest()' />
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<QuestionElement, object>(x=>x.QuestionRequirement)">Cerință</MudTableSortLabel></MudTh>
        <MudTh>Vezi mai multe</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Cerință">@context.QuestionRequirement</MudTd>
        <MudTd DataLabel="Vezi mai multe">
            <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => OpenDialogQuestion(context) )">Vezi mai multe</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
    <EditButtonContent Context="button">
        <div style="display: flex; flex-direction: row;">
            <MudTooltip Text="Șterge întrebarea">
                <MudIconButton Text="Sterge nivelul lingvistic" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteQuestionPlacementTest" Class="pa-0" Style="margin-left: 10px;" />
            </MudTooltip>
        </div>
    </EditButtonContent>
</MudTable>

<MudDialog @bind-IsVisible="visibleQuestion" Options="dialogOptionsQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Vizualizează întrebarea</span>
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.body1">
            <span style="font-size: 16px;">Cerință: @currentQuestion.QuestionRequirement</span>
        </MudText>
        <MudList>
            <span style="font-size: 16px;">Variante de răspuns: </span>
            @foreach (var choice in currentQuestion.QuestionChoices)
            {
                @if (choice.IsCorrect == true)
                {
                    <MudListItem Style="margin: 0; padding: 0;">
                        <MudText Typo="Typo.body1" Style="color: green;">&nbsp;- @choice.ChoiceContent</MudText>
                    </MudListItem>
                }
                else if (choice.IsCorrect == false)
                {
                    <MudListItem Style="margin: 0; padding: 0;">
                        <MudText Typo="Typo.body1" Style="color: gray;">&nbsp;- @choice.ChoiceContent</MudText>
                    </MudListItem>
                }
            }
        </MudList>

        @if (currentQuestion.QuestionImageData != null || currentQuestion.QuestionVideoLink != null)
        {
            <MudText>
                <span style="font-size: 16px; margin-top:15px;">Resurse suplimentare:</span>
            </MudText>
            <MudText Style="display: flex; flex-direction: column; align-items: center;">
                @if (currentQuestion.QuestionImageData != null)
                {
                    <img src="@currentQuestion.QuestionImageData" alt="Imagine întrebare" style="max-width: 400px; max-height: 500px; width: 100%; height: auto; margin-top: 10px; margin-bottom: 10px;" />
                }
                @if (currentQuestion.QuestionVideoLink != null)
                {
                    <MudText Typo="Typo.body1" Style="margin-top: 10px;">
                        <iframe style="width: 426px; height: 240px; margin-top: 9px;" src="@currentQuestion.QuestionVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                    </MudText>
                }
            </MudText>
        }

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelQuestion" Class="px-10" Style="color: black;">Close</MudButton>
    </DialogActions>
</MudDialog>

@* <div style="max-width: 80%; margin: auto; margin-bottom: 55px;">
    <MudTable Items="@LanguageCompetences" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<QuestionElement,bool>(FilterFuncViewPlacementTest)"
              @bind-SelectedItem="selectedQuestions" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
              OnCommitEditClick="@(() => EditLanguageCompetence())"
              IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Întrebări - Test Inițial</MudText>
            <MudSpacer />
            <div class="text-center" style="width: 55%;">
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
            </div>
            <MudTooltip Text="Update">
                <MudFab Icon="@Icons.Material.Filled.Update" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialogUpdatePlacementTest()' />
            </MudTooltip>
            <MudTooltip Text="Delete">
                <MudFab Icon="@Icons.Material.Filled.Delete" Style="background-color: #FC6F05; color: white;" @onclick='() => DeletePlacementTest()' />
            </MudTooltip>
        </ToolBarContent>

        <ColGroup>
            @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
            {
                <col style="width:50px;" />
            }
            <col />
            @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
            {
                <col style="width:50px;" />
            }
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<QuestionElement, object>(x=>x.QuestionRequirement)">Cerință</MudTableSortLabel></MudTh>
            <MudTh>Vezi mai multe</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Cerință">@context.QuestionRequirement</MudTd>
            <MudTd DataLabel="Vezi mai multe">
                <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => OpenDialogQuestion(context) )">Vezi mai multe</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <EditButtonContent Context="button">
            <div style="display: flex; flex-direction: row;">
                <MudTooltip Text="Șterge întrebarea">
                    <MudIconButton Text="Sterge nivelul lingvistic" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteQuestionPlacementTest" Class="pa-0" Style="margin-left: 10px;" />
                </MudTooltip>
            </div>
        </EditButtonContent>
    </MudTable>

    <MudDialog @bind-IsVisible="visibleQuestion" Options="dialogOptionsQuestion">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Vizualizează întrebarea</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudText Typo="Typo.body1">
                <span style="font-size: 16px;">Cerință: @currentQuestion.QuestionRequirement</span>
            </MudText>
            <MudList>
                <span style="font-size: 16px;">Variante de răspuns: </span>
                @foreach (var choice in currentQuestion.QuestionChoices)
                {
                    @if (choice.IsCorrect == true)
                    {
                        <MudListItem Style="margin: 0; padding: 0;">
                            <MudText Typo="Typo.body1" Style="color: green;">&nbsp;- @choice.ChoiceContent</MudText>
                        </MudListItem>
                    }
                    else if (choice.IsCorrect == false)
                    {
                        <MudListItem Style="margin: 0; padding: 0;">
                            <MudText Typo="Typo.body1" Style="color: gray;">&nbsp;- @choice.ChoiceContent</MudText>
                        </MudListItem>
                    }
                }
            </MudList>

            @if (currentQuestion.QuestionImageData != null || currentQuestion.QuestionVideoLink != null)
            {
                <MudText>
                    <span style="font-size: 16px; margin-top:15px;">Resurse suplimentare:</span>
                </MudText>
                <MudText Style="display: flex; flex-direction: column; align-items: center;">
                    @if (currentQuestion.QuestionImageData != null)
                    {
                        <img src="@currentQuestion.QuestionImageData" alt="Imagine întrebare" style="max-width: 400px; max-height: 500px; width: 100%; height: auto; margin-top: 10px; margin-bottom: 10px;" />
                    }
                    @if (currentQuestion.QuestionVideoLink != null)
                    {
                        <MudText Typo="Typo.body1" Style="margin-top: 10px;">
                            <iframe style="width: 426px; height: 240px; margin-top: 9px;" src="@currentQuestion.QuestionVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                        </MudText>
                    }
                </MudText>
            }

        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CancelQuestion" Class="px-10" Style="color: black;">Close</MudButton>
        </DialogActions>
    </MudDialog>
</div> *@

<style type="text/css">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }

    .mud-table-foot .bold-text .mud-table-cell {
        font-weight: 500;
    }
</style>


@* KEW WORDS *@
@code {
    private Snackbar snackbar;
    private bool visible;
    private string currentField;
    private string newValue;
    private bool isModified = false;
    private string keyWord;

    void Submit()
    {
        visible = false;
    }

    void Cancel() => visible = false;

    void OpenDialog()
    {
        visible = true;
    }

    private DialogOptions dialogOptions = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void AddKeyWord(string keyWord)
    {
        visible = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Cuvântul cheie a fost adăugat cu succes!", Severity.Success);
    }

    protected override async Task OnInitializedAsync()
    {
        await PopulateKewWords();
        await PopulateLanguagesLevelsTable();
        await PopulateLanguagesCompetencesTable();
        await PopulateQuestions();
    }

    private IEnumerable<string> KewWords = new List<string>();
    int containerWidth = 333; // Width of MudContainer (in vh units)
    int totalWidth; // Total width of elements (in vh units)
    int numRows; // Number of rows needed

    private async Task PopulateKewWords()
    {
        KewWords = new List<string>
        {
            "Cuvânt cheie 1",
            "Cuvânt cheie 2",
            "Cuvânt cheie 3"
        };

        // Elements = await httpClient.GetFromJsonAsync<List<AdminElement>>("webapi/periodictable");
    }

    void CalculateRowsAndWidth()
    {
        totalWidth = KewWords.Sum(kw => kw.Length);
        numRows = (int)Math.Ceiling((double)totalWidth / containerWidth);
    }
}


@* VIEW & EDIT LANGUAGE LEVELS *@
@code {
    private bool dense = false;
    private bool hover = true;
    private List<string> editEvents = new();
    private bool ronly = false;
    private bool canCancelEdit = true;
    private bool blockSwitch = false;
    private string searchString = "";
    private LanguageLevelElement selectedAdminLanguage = null;
    private LanguageLevelElement elementBeforeEdit;
    private HashSet<LanguageLevelElement> selectedItems1 = new HashSet<LanguageLevelElement>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;
    private IEnumerable<LanguageLevelElement> LanguageLevels = new List<LanguageLevelElement>();

    protected async Task PopulateLanguagesLevelsTable()
    {
        LanguageLevels = new List<LanguageLevelElement>
        {
            new LanguageLevelElement
            {
                LanguageLevelName = "A1",
                LanguageLevelAlias = "Beginner",
                LanguageLevelDescription = "Descriere sasa lorem ipsum vede vidi vici bini",
                LanguageLevelVideoLink = "https://www.youtube.com/watch?v=EzlRcGUdhA4&ab_channel=TheMotans-Topic",
                LanguageLevelPriorityNumber = 1
            },
            new LanguageLevelElement
            {
                LanguageLevelName = "A2",
                LanguageLevelAlias = "Beginner",
                LanguageLevelDescription = null,
                LanguageLevelVideoLink = null,
                LanguageLevelPriorityNumber = null
            }
        };

        // AdminLanguageElements = await httpClient.GetFromJsonAsync<List<AdminViewLanguageElement>>("webapi/periodictable");
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private bool FilterFuncViewLanguage(LanguageLevelElement element) => FilterFuncViewLanguage1(element, searchString);

    private bool FilterFuncViewLanguage1(LanguageLevelElement element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LanguageLevelName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LanguageLevelAlias.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    void EditLanguageLevel()
    {
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Informatiile au fost actualizate cu succes!", Severity.Success);
    }

    void DeleteLanguageLevel()
    {
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Nivelul de limbă a fost șters cu succes!", Severity.Success);
    }

    private bool visibleLanguageLevel;
    private string LanguageLevelNameValue;
    private string LanguageLevelAliasValue;
    private DialogOptions dialogOptionsForLanguageLevel = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void CancelLanguageLevel() => visibleLanguageLevel = false;

    void AddLanguageLevel(string languageNameValue, string languageAliasValue)
    {
        visibleLanguageLevel = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Nivelul de limbă a fost adăugat cu succes!", Severity.Success);
    }

    void OpenDialogLanguageLevel()
    {
        visibleLanguageLevel = true;
    }

    void NavigateToLanguageLevelOverview()
    {
        // NavigationManager.NavigateTo("/languageoverview");
    }
}


@* VIEW & EDIT COMPETENCES *@
@code {
    private LanguageCompetenceElement selectedLanguageCompetence = null;
    private LanguageCompetenceElement LanguageCompetenceBeforeEdit;
    private HashSet<LanguageCompetenceElement> competenceItems = new HashSet<LanguageCompetenceElement>();

    private IEnumerable<LanguageCompetenceElement> LanguageCompetences = new List<LanguageCompetenceElement>();

    protected async Task PopulateLanguagesCompetencesTable()
    {
        LanguageCompetences = new List<LanguageCompetenceElement>
        {
            new LanguageCompetenceElement
            {
                LanguageCompetenceName = "Listening",
                LanguageCompetenceType = LanguageCompetenceTypeElement.Listening,
                LanguageCompetenceDescription = "Descriere sasa lorem ipsum vede vidi vici bini",
                LanguageCompetenceVideoLink = "https://www.youtube.com/watch?v=EzlRcGUdhA4&ab_channel=TheMotans-Topic",
                LanguageCompetencePriorityNumber = 1
            },
            new LanguageCompetenceElement
            {
                LanguageCompetenceName = "Writing",
                LanguageCompetenceType = LanguageCompetenceTypeElement.Writing,
                LanguageCompetenceDescription = null,
                LanguageCompetenceVideoLink = null,
                LanguageCompetencePriorityNumber = null
            }
        };

        // AdminLanguageElements = await httpClient.GetFromJsonAsync<List<AdminViewLanguageElement>>("webapi/periodictable");
    }

    private bool FilterFuncViewCompetence(LanguageCompetenceElement element) => FilterFuncViewCompetence1(element, searchString);

    private bool FilterFuncViewCompetence1(LanguageCompetenceElement element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LanguageCompetenceName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    void EditLanguageCompetence()
    {
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Informatiile au fost actualizate cu succes!", Severity.Success);
    }

    void DeleteLanguageCompetence()
    {
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Competența lingvistică a fost ștearsă cu succes!", Severity.Success);
    }

    private bool visibleLanguageCompetence;
    private string LanguageCompetenceNameValue;
    private LanguageCompetenceTypeElement LanguageCompetenceTypeValue;
    private DialogOptions dialogOptionsForLanguageCompetence = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void CancelLanguageCompetence() => visibleLanguageCompetence = false;

    void AddLanguageCompetence(string languageCompetenceNameValue, LanguageCompetenceTypeElement languageCompetenceTypeValue)
    {
        visibleLanguageCompetence = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Competența lingvistică a fost adăugată cu succes!", Severity.Success);
    }

    void OpenDialogLanguageCompetence()
    {
        visibleLanguageCompetence = true;
    }

    void NavigateToLanguageCompetenceOverview()
    {
        // NavigationManager.NavigateTo("/languageoverview");
    }
}

@* VIEW & EDIT PLACEMENT TEST *@
@code {
    private bool visibleCreatePlacementTest;
    private DialogOptions dialogOptionsForCreatePlacementTest = new() { FullWidth = true, MaxWidth = MaxWidth.Large };
    private Dictionary<string, bool> _expandedStates = new Dictionary<string, bool>();

    void CancelCreatePlacementTest() => visibleCreatePlacementTest = false;

    void CreatePlacementTest(List<Guid> questionIds)
    {
        visibleCreatePlacementTest = false;
        // Do something with questionIds
        var idsString = string.Join(", ", questionIds);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add($"Testul inițial a fost creat cu succes! Lista e: {idsString}", Severity.Success);
    }


    void OpenDialogCreatePlacementTest()
    {
        visibleCreatePlacementTest = true;
    }

    private void OnExpandCollapseClick(string key)
    {
        if (_expandedStates.ContainsKey(key))
        {
            _expandedStates[key] = !_expandedStates[key];
        }
        else
        {
            _expandedStates.Add(key, true);
        }
    }

    private bool IsExpanded(string key)
    {
        return _expandedStates.ContainsKey(key) && _expandedStates[key];
    }

    private IEnumerable<QuestionElement> Questions = new List<QuestionElement>();
    private HashSet<QuestionElement> selectedQuestions = new HashSet<QuestionElement>();
    private QuestionElement currentQuestion;
    private bool visibleQuestion;
    private DialogOptions dialogOptionsQuestion = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void CancelQuestion() => visibleQuestion = false;

    void OpenDialogQuestion(QuestionElement question)
    {
        currentQuestion = question;
        visibleQuestion = true;
    }

    protected async Task PopulateQuestions()
    {
        Questions = new List<QuestionElement>
        {
            new QuestionElement
            {
                QuestionId = Guid.NewGuid(),
                QuestionRequirement = "Aveti de facut 2 teme?",
                QuestionImageData = "https://www.northwestcareercollege.edu/wp-content/uploads/2022/05/learn-english-.webp",
                QuestionVideoLink = "https://www.youtube.com/embed/cOun1gnEhec",
                QuestionChoices = new List<ChoiceElement>
                {
                    new ChoiceElement
                    {
                        ChoiceContent = "Nu, avem 3",
                        IsCorrect = true
                    },
                    new ChoiceElement
                    {
                        ChoiceContent = "Da, avem 2",
                        IsCorrect = false
                    }
                }
            },
            new QuestionElement
            {
                QuestionId = Guid.NewGuid(),
                QuestionRequirement = "Ce luna e acum?",
                QuestionImageData = null,
                QuestionVideoLink = null,
                QuestionChoices = new List<ChoiceElement>
                {
                    new ChoiceElement
                    {
                        ChoiceContent = "Aprilie",
                        IsCorrect = true
                    },
                    new ChoiceElement
                    {
                        ChoiceContent = "Martie",
                        IsCorrect = false
                    }
                }
            }

        };

        // AdminLanguageElements = await httpClient.GetFromJsonAsync<List<AdminViewLanguageElement>>("webapi/periodictable");
    }

    private bool FilterFuncViewPlacementTest(QuestionElement element) => FilterFuncViewPlacementTest1(element, searchString);

    private bool FilterFuncViewPlacementTest1(QuestionElement element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.QuestionRequirement.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    void DeletePlacementTest()
    {
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Testul inițial a fost șters cu succes!", Severity.Success);
    }

    void DeleteQuestionPlacementTest()
    {
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Întrebarea a fost ștearsă cu succes!", Severity.Success);
    }

    void OpenDialogUpdatePlacementTest()
    {
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Testul inițial a fost actualizat cu succes!", Severity.Success);
    }
}