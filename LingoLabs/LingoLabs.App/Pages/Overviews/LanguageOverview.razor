@page "/language-overview/{Id}"
@using LingoLabs.App.Auth
@using LingoLabs.App.Contracts.AuthContracts
@using LingoLabs.App.Contracts.LanguageContracts
@using LingoLabs.App.Services.AuthServices
@using LingoLabs.App.ViewModel.LanguageModels
@using LingoLabs.App.ViewModel.LanguageModels.LanguagePlacementTest
@using LingoLabs.App.ViewModel.MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@inject NavigationManager NavigationManager
@inject CustomStateProvider authStateProvider
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top: -10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -45px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -30px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -15px; max-width: 150px;">
    <img src="/images/homepage/jos.png" style="position: absolute; bottom: 0; right: 0; max-width: 150px;">
    <img src="/images/homepage/sus.png" style="position: absolute; top: 0; right: 0; max-width: 200px;">
</div>

<MudContainer>
    <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom:50px;">
        <div class="col-md-6 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
            <div class="row">
                <h2 style="color: #2563EB; padding: 20px; margin-top: 10px;" class="poppins-semi-bold">Curs - Overview</h2>
            </div>
        </div>
    </div>
</MudContainer>

@if(!IsLanguageInfoLoaded)
{
    <div class="row mx-0 justify-content-md-center">
        <div class="col-md-6 d-flex flex-column align-items-center justify-item-center" style="margin-top: 50px;">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </div>
    </div>
}
else {
<div class="row" style="max-width: 100vw; overflow-x: auto;">
    <div class="col">
        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 75px; margin-top: 50px; padding: 5px;" class="poppins-semi-bold">
                Nume:&emsp;
                <span style="color: #2563EB; font-size: 25px;">
                    @language.LanguageName
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Descriere:&emsp;
                @if (!string.IsNullOrEmpty(@language.LanguageDescription))
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                            @language.LanguageDescription
                    </span>
                }
                else
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">-</span>
                }
            </h1>
        </div>

        <div class="row">
            <!-- First Column (1/3 width) -->
            <div class="col-md-4">
                <div class="text-left">
                    <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                        Video:
                    </h1>
                </div>
            </div>

            <!-- Second Column (2/3 width) -->
            <div class="col-md-8">
                <iframe style="width: 426px; height: 240px; margin-top: 9px;" src="@language.LanguageVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
            </div>
        </div>


    </div>
    <div class="col d-flex align-items-center justify-content-center">
        <img src="@language.LanguageFlag" alt="@language.LanguageName's Flag" style="width: 350px; height: auto;">
    </div>
</div>

@* <div class="text-left" style="max-width: 100vw; overflow-x: auto;">
    <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
        Cuvinte cheie:
    </h1>

    <MudContainer Style="overflow-x: hidden;">
        <div class="row mx-0" style="margin-top: 25px; margin-bottom: 50px; width: 333vh; min-height: 12vh;">
            <div class="col-md-6" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <MudTooltip>
                    <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #2563EB; color: white; position: absolute; right: -25px; top: -25px;" @onclick='() => OpenDialog()' />
                </MudTooltip>

                <MudStack Row="true">
                    @foreach (var item in KewWords)
                    {
                        <MudPaper Class="pa-3" Style="background-color: #02497E; color: white;">@item</MudPaper>
                    }
                </MudStack>
            </div>
        </div>
    </MudContainer>

    <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă un cuvânt cheie</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" @bind-Value="keyWord" Label="Nume"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Cancel" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton Disabled="keyWord == null" OnClick="@(async () => AddKeyWord(keyWord))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

</div> *@

@* LANGUEAGE LEVELS *@
<div class="text-left">
    <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 30px;" class="poppins-semi-bold">Nivelurile Lingvistice</h1>
</div>

<div style="max-width: 80%; margin: auto; margin-bottom: 55px;">
    <MudTable Items="@language.LanguageLevels" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<LanguageLevelViewModel,bool>(FilterFuncViewLanguage)"
              @bind-SelectedItem="selectedAdminLanguage" SortLabel="Sort By" IsEditRowSwitchingBlocked="@blockSwitch" >
        <ToolBarContent>
            <MudText Typo="Typo.h6">Niveluri Lingvistice</MudText>
            <MudSpacer />
            <div class="text-center" style="width: 55%;">
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
            </div>
            <MudTooltip Text="Add">
                <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialogAddLanguageLevel()' />
            </MudTooltip>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="text-align: center;">Nr. Crt.</MudTh>
            <MudTh Style="text-align: center;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LanguageLevelElement, object>(x=>x.LanguageLevelName)">Nume</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LanguageLevelElement, object>(x=>x.LanguageLevelAlias)">Alias</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;">Descriere</MudTh>
            <MudTh Style="text-align: center;">Link Video</MudTh>
            <MudTh Style="text-align: center;">Vizualizează</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr. Crt." Style="text-align: center;">@(context.LanguageLevelPriorityNumber.HasValue ? context.LanguageLevelPriorityNumber.ToString() : "-")</MudTd>
            <MudTd DataLabel="Nume" Style="text-align: center;">@context.LanguageLevelName</MudTd>
            <MudTd DataLabel="Alias" Style="text-align: center;">@context.LanguageLevelAlias</MudTd>
            <MudTd DataLabel="Descriere" Style="text-align: center;">@(string.IsNullOrEmpty(context.LanguageLevelDescription) ? "-" : context.LanguageLevelDescription)</MudTd>
            <MudTd DataLabel="Link Video" Style="text-align: center;">@(string.IsNullOrEmpty(context.LanguageLevelVideoLink) ? "-" : context.LanguageLevelVideoLink)</MudTd>
            <MudTd DataLabel="Vizualizează" Style="text-align: center;">
                <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => NavigateToLanguageLevelOverview(context.LanguageLevelId) )">Vezi mai multe</MudButton>
            </MudTd>
            <MudTd>
                <div style="display: flex; justify-content: space-between;">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenDialogEditLanguageLevel(context)" Class="pa-0" Style="margin-right: 10px;" />
                    <MudIconButton Text="Delete Course" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteLanguageLevel(context.LanguageLevelId)" Class="pa-0" Style="margin-left: 10px;" />
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudDialog @bind-IsVisible="visibleAddLanguageLevel" Options="dialogOptionsForLanguageLevel">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă un nivel lingvistic</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="addNewLanguageLevel">
                <DataAnnotationsValidator />
                <MudTextField T="string" @bind-Value="addNewLanguageLevel.LanguageLevelName" Label="Nume"></MudTextField>
                <MudTextField T="string" @bind-Value="addNewLanguageLevel.LanguageLevelAlias" Label="Alias"></MudTextField>
                <ValidationSummary />
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CancelAddLanguageLevel" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton Disabled="!ValidateAddLanguageLevel()" OnClick="@(async () => AddLanguageLevel())" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>


    <MudDialog @bind-IsVisible="visibleEditLanguageLevel" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Editează conținutul nivelului de limbă</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="editLanguageLevel">
                <DataAnnotationsValidator />
                    <MudTextField T="string" @bind-Value="editLanguageLevel.LanguageLevelName" Label="Nume" Disabled="true"></MudTextField>
                    <MudTextField T="string" @bind-Value="editLanguageLevel.LanguageLevelAlias" Label="Alias"></MudTextField>
                    <MudTextField T="string" @bind-Value="editLanguageLevel.LanguageLevelDescription" Label="Descriere"></MudTextField>
                    <MudTextField T="string" @bind-Value="editLanguageLevel.LanguageLevelVideoLink" Label="Link Video"></MudTextField>
                    <MudTextField T="int?" @bind-Value="editLanguageLevel.LanguageLevelPriorityNumber" Label="Număr de referință"></MudTextField>
                <ValidationSummary />
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CloseEditLanguageLevel" Class="px-10" Style="color: black;">Close</MudButton>
                <MudButton Disabled="!ValidateEditLanguageLevel()" OnClick="@(async () => EditLanguageLevel(editLanguageLevel))" Style="color: #2563EB;">Update</MudButton>

        </DialogActions>
    </MudDialog>

</div>

@* LANGUAGE COMPETENCES *@
<div class="text-left">
    <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 30px;" class="poppins-semi-bold">Competențe Lingvistice</h1>
</div>

<div style="max-width: 80%; margin: auto; margin-bottom: 55px;">
    <MudTable Items="@language.LanguageCompetences" Dense="@dense" Hover="@hover" ReadOnly="@ronly" Filter="new Func<LanguageCompetenceViewModel,bool>(FilterFuncViewCompetence)"
              @bind-SelectedItem="selectedLanguageCompetence" SortLabel="Sort By" CommitEditTooltip="Commit Edit" IsEditRowSwitchingBlocked="@blockSwitch" >
        <ToolBarContent>
            <MudText Typo="Typo.h6">Competențe Lingvistice</MudText>
            <MudSpacer />
            <div class="text-center" style="width: 55%;">
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
            </div>
            <MudTooltip Text="Add">
                <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialogLanguageCompetence()' />
            </MudTooltip>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="text-align: center;">Nr. Crt.</MudTh>
            <MudTh Style="text-align: center;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LanguageCompetenceElement, object>(x=>x.LanguageCompetenceName)">Nume</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;">Tip</MudTh>
            <MudTh Style="text-align: center;">Descriere</MudTh>
            <MudTh Style="text-align: center;">Link Video</MudTh>
            <MudTh Style="text-align: center;">Vizualizează</MudTh>
        </HeaderContent>
        <RowTemplate>
                <MudTd DataLabel="Nr. Crt." Style="text-align: center;">@(context.LanguageCompetencePriorityNumber.HasValue ? context.LanguageCompetencePriorityNumber.ToString() : "-")</MudTd>
            <MudTd DataLabel="Nume" Style="text-align: center;">@context.LanguageCompetenceName</MudTd>
            <MudTd DataLabel="Tip" Style="text-align: center;">@context.LanguageCompetenceType</MudTd>
            <MudTd DataLabel="Descriere" Style="text-align: center;">@(string.IsNullOrEmpty(context.LanguageCompetenceDescription) ? "-" : context.LanguageCompetenceDescription)</MudTd>
                <MudTd DataLabel="Link Video" Style="text-align: center;">@(string.IsNullOrEmpty(context.LanguageCompetenceVideoLink) ? "-" : context.LanguageCompetenceVideoLink)</MudTd>
            <MudTd DataLabel="Vizualizează" Style="text-align: center;">
                <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => NavigateToLanguageCompetenceOverview(context.LanguageCompetenceId) )">Vezi mai multe</MudButton>
            </MudTd>
            <MudTd>
                <div style="display: flex; justify-content: space-between;">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenDialogEditLanguageCompetence(context)" Class="pa-0" Style="margin-right: 10px;" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteLanguageCompetence(context.LanguageCompetenceId)" Class="pa-0" Style="margin-left: 10px;" />
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudDialog @bind-IsVisible="visibleLanguageCompetence" Options="dialogOptionsForLanguageCompetence">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă o competență lingvistică</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="addLanguageCompetence">
                <DataAnnotationsValidator />
                    <MudTextField T="string" @bind-Value="addLanguageCompetence.LanguageCompetenceName" Label="Nume"></MudTextField>
                    <MudSelect T="LanguageCompetenceTypeViewModel" Label="Tip" @bind-Value="addLanguageCompetence.LanguageCompetenceType">
                        <MudSelectItem Value="LanguageCompetenceTypeViewModel.Grammar">Grammar</MudSelectItem>
                        <MudSelectItem Value="LanguageCompetenceTypeViewModel.Listening">Listening</MudSelectItem>
                        <MudSelectItem Value="LanguageCompetenceTypeViewModel.Reading">Reading</MudSelectItem>
                        <MudSelectItem Value="LanguageCompetenceTypeViewModel.Writing">Writing</MudSelectItem>
                    </MudSelect>
                <ValidationSummary />
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CancelLanguageCompetence" Class="px-10" Style="color: black;">Close</MudButton>
                <MudButton Disabled="!ValidateAddLanguageCompetence()" OnClick="@(async () => AddLanguageCompetence(addLanguageCompetence))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

        <MudDialog @bind-IsVisible="visibleEditLanguageCompetence" Options="dialogOptions">
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                    <span style="color: #2563EB;">Editează conținutul competenței lingvistice</span>
                </MudText>
            </TitleContent>
            <DialogContent>
                <EditForm Model="editLanguageCompetence">
                    <DataAnnotationsValidator />
                    <MudTextField T="string" @bind-Value="editLanguageCompetence.LanguageCompetenceName" Label="Nume" Disabled="true"></MudTextField>
                    <MudTextField T="string" @bind-Value="editLanguageCompetence.LanguageCompetenceDescription" Label="Descriere"></MudTextField>
                    <MudTextField T="string" @bind-Value="editLanguageCompetence.LanguageCompetenceVideoLink" Label="Link Video"></MudTextField>
                    <MudTextField T="int?" @bind-Value="editLanguageCompetence.LanguageCompetencePriorityNumber" Label="Număr de referință"></MudTextField>
                    <ValidationSummary />
                </EditForm>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Filled" OnClick="CloseEditLanguageCompetence" Class="px-10" Style="color: black;">Close</MudButton>
                <MudButton Disabled="!ValidateEditLanguageCompetence()" OnClick="@(async () => EditLanguageCompetence(editLanguageCompetence))" Style="color: #2563EB;">Update</MudButton>

            </DialogActions>
        </MudDialog>
</div>

<div class="text-left">
    <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 35px;" class="poppins-semi-bold">Test Inițial</h1>
</div>

@if (language.PlacementTest == null || language.PlacementTest.Count == 0) {
@* PLACEMENT TEST DOESN'T EXIST *@
<MudContainer Style="overflow-x: hidden;">
    <div class="row justify-content-center" style="margin-top: 15px; margin-bottom: 50px; min-height: 12vh; background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
        <div class="col-md-6 d-flex justify-content-center align-items-center">
            <p style="font-size: 16px; font-weight: bold; text-align: center; margin-top: 15px; margin-left: 30px;">
                    Momentan nu există niciun test inițial creat. Crează unul chiar acum!
                 </p>
            </div>

            <div class="col-md-6 d-flex justify-content-center align-items-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="background-color: #2563EB; color: white; padding: 10px; width: 60%;" @onclick='() => OpenDialogCreatePlacementTest()'>Crează acum!</MudButton>
            </div>
        </div>
</MudContainer>

<MudDialog @bind-IsVisible="visibleCreatePlacementTest" Options="dialogOptionsForCreatePlacementTest">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Adaugă un test inițial</span>
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudText Typo="Typo.body1">
            <span style="font-size: 16px;">Pentru a crea un test inițial, urmați pașii de mai jos:</span>
        </MudText>
        <MudList>
            <MudListItem>
                <MudText Typo="Typo.body1"><strong>&nbsp;1. Selectați Nivelul Lingvistic:</strong> Începeți prin a vizualiza toate nivelurile lingvistice disponibile pentru limba respectivă, de la A1 (începător) până la C2 (avansat).</MudText>
            </MudListItem>
            <MudListItem>
                <MudText Typo="Typo.body1"><strong>&nbsp;2. Alegeți Competențele Lingvistice:</strong> Pentru fiecare nivel lingvistic, veți vedea o listă de competențe lingvistice, cum ar fi Listening, Writing, Grammar, etc.</MudText>
            </MudListItem>
            <MudListItem>
                <MudText Typo="Typo.body1"><strong>&nbsp;3. Selectați Întrebările:</strong> În cadrul fiecărei competențe lingvistice, vor apărea întrebări specifice pe care trebuie să le selectați. Asigurați-vă că alegeți întrebări care să acopere toate competențele lingvistice.</MudText>
            </MudListItem>
            <MudListItem>
                <MudText Typo="Typo.body1"><strong>&nbsp;4. Verificați Diversitatea Întrebărilor:</strong> Este esențial să selectați <strong>minim 10 întrebări</strong> în total și să aveți <strong>același număr de întrebări selectate pentru fiecare categorie de competență lingvistică și nivel lingvistic</strong>.</MudText>
            </MudListItem>
            <MudListItem>
                <MudText Typo="Typo.body1"><strong>&nbsp;5. Trimiteți formularul:</strong> După ce ați selectat întrebările dorite, apăsați butonul “Create” pentru a le include în testul inițial.</MudText>
            </MudListItem>
        </MudList>

        <MudText Typo="Typo.body1" Style="margin-top: 20px;">
            <span style="font-size: 16px;">Nivelurile lingvistice:</span>
        </MudText>

        @foreach (var level in language.LanguageLevels)
        {
            if (!LanguageLevelHasQuestions(level))
            {
                continue;
            }

            <MudStack Spacing="2" Style="margin-top: 35px;">
                <MudButton OnClick="() => OnExpandCollapseClick(level.LanguageLevelName)">@(IsExpanded(level.LanguageLevelName) ? $"Ascunde - {level.LanguageLevelName}" : level.LanguageLevelName)</MudButton>
                <MudDivider />
                <MudCollapse Expanded="@IsExpanded(level.LanguageLevelName)">
                    <MudText Typo="Typo.body1">
                        <span style="font-size: 16px; margin-top: 5px; margin-left: 31px;">Competențe lingvistice:</span>

                        @foreach (var competence in @language.LanguageCompetences)
                        {
                            var keyValidation = (level.LanguageLevelId, competence.LanguageCompetenceId);
                            if (!questionsByLevelAndCompetence.ContainsKey(keyValidation) || questionsByLevelAndCompetence[keyValidation] == null || questionsByLevelAndCompetence[keyValidation].Count == 0)
                            {
                                continue;
                            }
                            string key = $"{level.LanguageLevelId}-{competence.LanguageCompetenceId}";
                            
                            <MudStack Spacing="2" Style="max-width: 95%; margin-left: auto; margin-right: auto;">
                                 <MudButton Style="color: #2563EB;" OnClick="() => OnExpandCollapseClick(key)">@(IsExpanded(key) ? $"Ascunde - ({level.LanguageLevelName}) {competence.LanguageCompetenceName}" : $"({level.LanguageLevelName}) {competence.LanguageCompetenceName}")</MudButton>
                            <MudDivider />
                                        <MudCollapse Expanded="@IsExpanded(key)" Style="display: flex; justify-content: center; align-items: center;">
                                    <MudText Typo="Typo.body1" Style="margin-top: 20px;">

                                        @{
                                            SelectQuestions(level.LanguageLevelId, competence.LanguageCompetenceId);
                                        }

                                        <MudTable Items="@questionsByLevelAndCompetence[(level.LanguageLevelId, competence.LanguageCompetenceId)]" MultiSelection="true" @bind-SelectedItems="selectedQuestions" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true"
                                            CustomHeader="true" CustomFooter="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" >
                                            <HeaderContent>
                                                <MudTHeadRow IsCheckable="true">
                                                    <MudTh Style="text-align: center;">Tipul Întrebării</MudTh>
                                                    <MudTh Style="text-align: center;">Cerință</MudTh>
                                                    <MudTh Style="text-align: center;">Vezi mai multe</MudTh>
                                                </MudTHeadRow>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Tipul Întrebării" Style="text-align: center;">@context.QuestionType</MudTd>
                                                <MudTd DataLabel="Cerință" Style="text-align: center;">@context.QuestionRequirement</MudTd>
                                                <MudTd DataLabel="Vezi mai multe" Style=" text-align: center;">
                                                    <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => OpenDialogQuestion(context) )">Vezi mai multe</MudButton>
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>

                                        <MudDialog @bind-IsVisible="visibleQuestion" Options="dialogOptionsQuestion">
                                            <TitleContent>
                                                <MudText Typo="Typo.h6">
                                                    <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                                                    <span style="color: #2563EB;">Vizualizează întrebarea</span>
                                                </MudText>
                                            </TitleContent>
                                            <DialogContent>
                                                <MudText Typo="Typo.body1">
                                                    <span style="font-size: 16px;">Cerință: @currentQuestion.QuestionRequirement</span>
                                                </MudText>

                                                @if (currentQuestion.QuestionType == QuestionTypeViewModel.TrueFalse)     // TRUE / FALSE QUESTION
                                                {
                                                    @foreach (var choice in currentQuestion.Choices)
                                                    {
                                                        @if (choice.IsCorrect == true)
                                                        {
                                                            <MudText Typo="Typo.body1">
                                                                <strong>Valoarea de adevăr:&emsp;</strong>
                                                                <span style="color: green;">@choice.IsCorrect</span>
                                                            </MudText>
                                                        }
                                                        else if (choice.IsCorrect == false)
                                                        {
                                                            <MudText Typo="Typo.body1">
                                                                <strong>Valoarea de adevăr:&emsp;</strong>
                                                                <span style="color: red;">@choice.IsCorrect</span>
                                                            </MudText>
                                                        }
                                                    }
                                                }

                                                @if (currentQuestion.QuestionType == QuestionTypeViewModel.MultipleChoice)         // GRID QUESTION
                                                {
                                                    <MudText Typo="Typo.body1">
                                                        <strong>Variante de răspuns:</strong>
                                                        @foreach (var choice in currentQuestion.Choices)
                                                        {
                                                            @if (choice.IsCorrect == true)
                                                            {
                                                                <MudText Typo="Typo.body1" Style="margin-top: 5px; color: green;">
                                                                    <strong>-&emsp;@choice.ChoiceContent</strong>
                                                                </MudText>
                                                            }
                                                            else if (choice.IsCorrect == false)
                                                            {
                                                                <MudText Typo="Typo.body1" Style="margin-top: 5px; color: red;">
                                                                    <strong>-&emsp;@choice.ChoiceContent</strong>
                                                                </MudText>
                                                            }
                                                        }
                                                    </MudText>
                                                }

                                                @if (currentQuestion.QuestionType == QuestionTypeViewModel.MissingWord)    // MISSING WORD QUESTION
                                                {
                                                    <MudText Typo="Typo.body1">
                                                        <strong>Variante de răspuns:</strong>
                                                        @foreach (var choice in currentQuestion.Choices)
                                                        {
                                                            <MudText Typo="Typo.body1" Style="margin-top: 5px; color: green;">
                                                                <strong>-&emsp;@choice.ChoiceContent</strong>
                                                            </MudText>
                                                        }
                                                    </MudText>
                                                }

                                                @if (!string.IsNullOrEmpty(currentQuestion.QuestionImageData) || !string.IsNullOrEmpty(currentQuestion.QuestionVideoLink))
                                                {
                                                    <MudText>
                                                        <span style="font-size: 16px; margin-top:15px;">Resurse suplimentare: @currentQuestion.QuestionImageData</span>
                                                    </MudText>
                                                    <MudText Style="display: flex; flex-direction: column; align-items: center;">
                                                        @if (currentQuestion.QuestionImageData != null)
                                                        {
                                                            <img src="@currentQuestion.QuestionImageData" alt="Imagine întrebare" style="max-width: 400px; max-height: 500px; width: 100%; height: auto; margin-top: 10px; margin-bottom: 10px;" />
                                                        }
                                                        @if (currentQuestion.QuestionVideoLink != null)
                                                        {
                                                            <MudText Typo="Typo.body1" Style="margin-top: 10px;">
                                                                <iframe style="width: 426px; height: 240px; margin-top: 9px;" src="@currentQuestion.QuestionVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                                                            </MudText>
                                                        }
                                                    </MudText>
                                                }

                                            </DialogContent>
                                            <DialogActions>
                                                <MudButton Variant="Variant.Filled" OnClick="CancelQuestion" Class="px-10" Style="color: black;">Close</MudButton>
                                            </DialogActions>
                                        </MudDialog>

                                        
                                    </MudText>
                                </MudCollapse>
                            </MudStack>
                        }
                    </MudText>
                </MudCollapse>
            </MudStack>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelCreatePlacementTest" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(async () => CreatePlacementTest(selectedQuestions.Select(q => q.QuestionId).ToList()))" Style="color: #2563EB;" Disabled="@(!(selectedQuestions.Count > 10))">Create</MudButton>
    </DialogActions>
</MudDialog>
}
else {

@* PLACEMENT TEST EXISTS *@
<div style="max-width: 80%; margin: auto; margin-bottom: 55px;">
    <MudTable Items="@language.PlacementTest" Hover="true" SortLabel="Sort By" Filter="new Func<QuestionViewModel,bool>(FilterFuncViewPlacementTest)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Întrebări - Test Inițial</MudText>
            <MudSpacer />
            <div class="text-center" style="width: 55%;">
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
            </div>
            @* <MudTooltip Text="Update">
                <MudFab Icon="@Icons.Material.Filled.Update" Style="background-color: #FC6F05; color: white; margin-right: 15px;" @onclick='() => OpenDialogUpdatePlacementTest()' />
            </MudTooltip> *@
            <MudTooltip Text="Delete">
                <MudFab Icon="@Icons.Material.Filled.Delete" Style="background-color: #FC6F05; color: white;" @onclick='() => DeletePlacementTest()' />
            </MudTooltip>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="text-align: center;"><MudTableSortLabel SortBy="new Func<QuestionViewModel, object>(x=>x.QuestionType)">Tipul Întrebării</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;"><MudTableSortLabel SortBy="new Func<QuestionViewModel, object>(x=>x.QuestionRequirement)">Cerință</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;">Vezi mai multe</MudTh>
            <MudTh Style="text-align: center;">Șterge întrebarea</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Tipul Întrebării" Style="text-align: center;">@context.QuestionType</MudTd>
            <MudTd DataLabel="Cerință" Style="text-align: center;">@context.QuestionRequirement</MudTd>
            <MudTd DataLabel="Vezi mai multe" Style="text-align: center;">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.RemoveRedEye" Class="pa-0" OnClick="@( () => OpenDialogQuestion(context) )" Style="margin-right: 7px;" />
            </MudTd>
            <MudTd DataLabel="Șterge întrebarea" Style="text-align: center;">
                <MudIconButton Text="Șterge Întrebarea" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteQuestionPlacementTest(context) )" Class="pa-0" Style="margin-left: 7px;" Disabled="language.PlacementTest.Count() <10" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>
</div>

<MudDialog @bind-IsVisible="visibleQuestion" Options="dialogOptionsQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Vizualizează întrebarea</span>
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.body1">
            <span style="font-size: 16px;">Cerință: @currentQuestion.QuestionRequirement</span>
        </MudText>
        @if (currentQuestion.QuestionType == QuestionTypeViewModel.TrueFalse)     // TRUE / FALSE QUESTION
        {
            @foreach (var choice in currentQuestion.Choices)
            {
                @if (choice.IsCorrect == true)
                {
                    <MudText Typo="Typo.body1">
                        <strong>Valoarea de adevăr:&emsp;</strong>
                        <span style="color: green;">@choice.IsCorrect</span>
                    </MudText>
                }
                else if (choice.IsCorrect == false)
                {
                    <MudText Typo="Typo.body1">
                        <strong>Valoarea de adevăr:&emsp;</strong>
                        <span style="color: red;">@choice.IsCorrect</span>
                    </MudText>
                }
            }
        }

        @if (currentQuestion.QuestionType == QuestionTypeViewModel.MultipleChoice)         // GRID QUESTION
        {
            <MudText Typo="Typo.body1">
                <strong>Variante de răspuns:</strong>
                @foreach (var choice in currentQuestion.Choices)
                {
                    @if (choice.IsCorrect == true)
                    {
                        <MudText Typo="Typo.body1" Style="margin-top: 5px; color: green;">
                            <strong>-&emsp;@choice.ChoiceContent</strong>
                        </MudText>
                    }
                    else if (choice.IsCorrect == false)
                    {
                        <MudText Typo="Typo.body1" Style="margin-top: 5px; color: red;">
                            <strong>-&emsp;@choice.ChoiceContent</strong>
                        </MudText>
                    }
                }
            </MudText>
        }

        @if (currentQuestion.QuestionType == QuestionTypeViewModel.MissingWord)    // MISSING WORD QUESTION
        {
            <MudText Typo="Typo.body1">
                <strong>Variante de răspuns:</strong>
                @foreach (var choice in currentQuestion.Choices)
                {
                    <MudText Typo="Typo.body1" Style="margin-top: 5px; color: green;">
                        <strong>-&emsp;@choice.ChoiceContent</strong>
                    </MudText>
                }
            </MudText>
        }

        @if (!string.IsNullOrEmpty(currentQuestion.QuestionImageData) || !string.IsNullOrEmpty(currentQuestion.QuestionVideoLink))
        {
            <MudText>
                <span style="font-size: 16px; margin-top:15px;">Resurse suplimentare:</span>
            </MudText>
            <MudText Style="display: flex; flex-direction: column; align-items: center;">
                @if (currentQuestion.QuestionImageData != null)
                {
                    <img src="@currentQuestion.QuestionImageData" alt="Imagine întrebare" style="max-width: 400px; max-height: 500px; width: 100%; height: auto; margin-top: 10px; margin-bottom: 10px;" />
                }
                @if (currentQuestion.QuestionVideoLink != null)
                {
                    <MudText Typo="Typo.body1" Style="margin-top: 10px;">
                        <iframe style="width: 426px; height: 240px; margin-top: 9px;" src="@currentQuestion.QuestionVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                    </MudText>
                }
            </MudText>
        }

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelQuestion" Class="px-10" Style="color: black;">Close</MudButton>
    </DialogActions>
</MudDialog> }
}

<style type="text/css">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }

    .mud-table-foot .bold-text .mud-table-cell {
        font-weight: 500;
    }
</style>


@code {
    [Inject]
    public ILanguageDataService LanguageDataService { get; set; }
    [Inject]
    public ILanguageLevelDataService LanguageLevelDataService { get; set; }
    [Inject]
    public ILanguageCompetenceDataService LanguageCompetenceDataService { get; set; }
    [Inject]
    public IChapterDataService ChapterDataService { get; set; }
    [Inject]
    public ILessonDataService LessonDataService { get; set; }
    [Inject]
    public IQuestionDataService QuestionDataService { get; set; }
    [Parameter]
    public string Id { get; set; }
    Guid CurrentLanguageId = Guid.Empty;

    private LanguageViewModel language = new LanguageViewModel();
    private AuthenticationState authState;
    private bool IsLanguageInfoLoaded = false;
    public bool HasAdminRole = false;
    private Dictionary<(Guid, Guid), List<QuestionViewModel>> questionsByLevelAndCompetence = new Dictionary<(Guid, Guid), List<QuestionViewModel>>();

    protected override async Task OnInitializedAsync()
    {
        authState = await authStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        var claims = user.Claims.ToList();

        //var userIdClaim = claims.FirstOrDefault(claim => claim.Type == "nameid");

        HasAdminRole = claims.Any(claim => claim.Type == "role" && claim.Value == "Admin");

        CurrentLanguageId = Guid.Parse(Id);

        language = await LanguageDataService.GetLanguageByIdAsync(CurrentLanguageId);

        foreach (var level in language.LanguageLevels)
        {
            foreach (var competence in language.LanguageCompetences)
            {
                List<QuestionViewModel> questions = await SelectQuestions(competence.LanguageCompetenceId, level.LanguageLevelId);
                if (questions != null && questions.Count > 0)
                {
                    questionsByLevelAndCompetence[(level.LanguageLevelId, competence.LanguageCompetenceId)] = questions;
                }
            }
        }

        IsLanguageInfoLoaded = true;

        await PopulateKewWords();
    }
}

@* KEW WORDS *@
@functions {
    private Snackbar snackbar;
    private bool visible;
    private string currentField;
    private string newValue;
    private bool isModified = false;
    private string keyWord;

    void Submit()
    {
        visible = false;
    }

    void Cancel() => visible = false;

    void OpenDialog()
    {
        visible = true;
    }

    private DialogOptions dialogOptions = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void AddKeyWord(string keyWord)
    {
        visible = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Cuvântul cheie a fost adăugat cu succes!", Severity.Success);
    }

    private IEnumerable<string> KewWords = new List<string>();
    int containerWidth = 333; // Width of MudContainer (in vh units)
    int totalWidth; // Total width of elements (in vh units)
    int numRows; // Number of rows needed

    private async Task PopulateKewWords()
    {
        KewWords = new List<string>
        {
            "Cuvânt cheie 1",
            "Cuvânt cheie 2",
            "Cuvânt cheie 3"
        };

        // Elements = await httpClient.GetFromJsonAsync<List<AdminElement>>("webapi/periodictable");
    }

    void CalculateRowsAndWidth()
    {
        totalWidth = KewWords.Sum(kw => kw.Length);
        numRows = (int)Math.Ceiling((double)totalWidth / containerWidth);
    }

    private bool LanguageLevelHasQuestions(LanguageLevelViewModel level)
    {
        foreach (var competence in language.LanguageCompetences)
        {
            if (questionsByLevelAndCompetence.ContainsKey((level.LanguageLevelId, competence.LanguageCompetenceId)))
            {
                var questions = questionsByLevelAndCompetence[(level.LanguageLevelId, competence.LanguageCompetenceId)];
                if (questions != null && questions.Count > 0)
                {
                    return true;
                }
            }
        }

        return false;
    }
}


@* VIEW & EDIT LANGUAGE LEVELS *@
@functions {
    private bool dense = false;
    private bool hover = true;
    private List<string> editEvents = new();
    private bool ronly = false;
    private bool canCancelEdit = true;
    private bool blockSwitch = false;
    private string searchString = "";
    private LanguageLevelViewModel selectedAdminLanguage = null;
    private LanguageLevelViewModel elementBeforeEdit;
    private HashSet<LanguageLevelViewModel> selectedItems1 = new HashSet<LanguageLevelViewModel>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;
    private LanguageLevelViewModel addNewLanguageLevel = new LanguageLevelViewModel();
    private LanguageLevelViewModel editLanguageLevel = new LanguageLevelViewModel();

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private bool FilterFuncViewLanguage(LanguageLevelViewModel element) => FilterFuncViewLanguage1(element, searchString);

    private bool FilterFuncViewLanguage1(LanguageLevelViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LanguageLevelName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LanguageLevelAlias.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async void DeleteLanguageLevel(Guid languageLevelId)
    {
        var response = await LanguageLevelDataService.DeleteLanguageLevelAsync(languageLevelId);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit ștererea nivelului de limbă: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Nivelul de limbă a fost șters cu succes!", Severity.Success);
            language = (await LanguageDataService.GetLanguageByIdAsync(CurrentLanguageId));
            StateHasChanged();
        }
    }

    private bool visibleAddLanguageLevel;
    private DialogOptions dialogOptionsForLanguageLevel = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void CancelAddLanguageLevel() => visibleAddLanguageLevel = false;

    async void AddLanguageLevel()
    {
        visibleAddLanguageLevel = false;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        addNewLanguageLevel.LanguageId = CurrentLanguageId;

        var response = await LanguageLevelDataService.CreateLanguageLevelAsync(addNewLanguageLevel);

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit crearea unui nou nivel de limbă: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Nivelul de limbă '" + addNewLanguageLevel.LanguageLevelName + "' a fost adăugat cu succes!", Severity.Success);
            language = (await LanguageDataService.GetLanguageByIdAsync(CurrentLanguageId));
            StateHasChanged();
        }
    }

    void OpenDialogAddLanguageLevel()
    {
        addNewLanguageLevel = new LanguageLevelViewModel();
        visibleAddLanguageLevel = true;
    }

    bool ValidateAddLanguageLevel()
    {
        return !string.IsNullOrWhiteSpace(addNewLanguageLevel.LanguageLevelName) && !string.IsNullOrWhiteSpace(addNewLanguageLevel.LanguageLevelAlias);
    }

    void NavigateToLanguageLevelOverview(Guid languageLevelId)
    {
        NavigationManager.NavigateTo($"/language-level-overview/{languageLevelId}");
    }

    //EDIT LANGUAGE LEVEL

    private bool visibleEditLanguageLevel = false;

    void CloseEditLanguageLevel() => visibleEditLanguageLevel = false;

    void OpenDialogEditLanguageLevel(LanguageLevelViewModel languageLevel)
    {
        editLanguageLevel = new LanguageLevelViewModel
        {
            LanguageLevelId = languageLevel.LanguageLevelId,
            LanguageLevelName = languageLevel.LanguageLevelName,
            LanguageLevelAlias = languageLevel.LanguageLevelAlias,
            LanguageLevelDescription = languageLevel.LanguageLevelDescription,
            LanguageLevelPriorityNumber = languageLevel.LanguageLevelPriorityNumber
        };
        elementBeforeEdit = languageLevel;
        visibleEditLanguageLevel = true;
    }

    async void EditLanguageLevel(LanguageLevelViewModel editLanguageLevel)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await LanguageLevelDataService.UpdateLanguageLevelAsync(editLanguageLevel);

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit actualizarea nivelului de limbă: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            visibleEditLanguageLevel = false;
            snackbar = Snackbar.Add("Informatiile au fost actualizate cu succes!", Severity.Success);
            language = (await LanguageDataService.GetLanguageByIdAsync(CurrentLanguageId));
            StateHasChanged();
        }
    }

    bool ValidateEditLanguageLevel()
    {
        if (string.IsNullOrWhiteSpace(editLanguageLevel.LanguageLevelName) || string.IsNullOrWhiteSpace(editLanguageLevel.LanguageLevelAlias))
            return false;
        if (editLanguageLevel.LanguageLevelName == elementBeforeEdit.LanguageLevelName && editLanguageLevel.LanguageLevelAlias == elementBeforeEdit.LanguageLevelAlias && editLanguageLevel.LanguageLevelDescription == elementBeforeEdit.LanguageLevelDescription && editLanguageLevel.LanguageLevelVideoLink == elementBeforeEdit.LanguageLevelVideoLink && editLanguageLevel.LanguageLevelPriorityNumber == elementBeforeEdit.LanguageLevelPriorityNumber)
            return false;
        return true;
        
    }
}

@* VIEW & EDIT COMPETENCES *@
@functions {
    private LanguageCompetenceViewModel selectedLanguageCompetence = null;
    private LanguageCompetenceViewModel LanguageCompetenceBeforeEdit;
    private HashSet<LanguageCompetenceViewModel> competenceItems = new HashSet<LanguageCompetenceViewModel>();

    private bool FilterFuncViewCompetence(LanguageCompetenceViewModel element) => FilterFuncViewCompetence1(element, searchString);

    private bool FilterFuncViewCompetence1(LanguageCompetenceViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LanguageCompetenceName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async void DeleteLanguageCompetence(Guid languageCompetenceId)
    {
        var response = await LanguageCompetenceDataService.DeleteLanguageCompetenceAsync(languageCompetenceId);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit ștererea competenței lingvistice: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Competența lingvistică a fost ștearsă cu succes!", Severity.Success);
            language = (await LanguageDataService.GetLanguageByIdAsync(CurrentLanguageId));
            StateHasChanged();
        }
    }

    private bool visibleLanguageCompetence;
    private DialogOptions dialogOptionsForLanguageCompetence = new() { FullWidth = true, MaxWidth = MaxWidth.Small };
    private LanguageCompetenceViewModel addLanguageCompetence = new LanguageCompetenceViewModel();

    void CancelLanguageCompetence() => visibleLanguageCompetence = false;

    async void AddLanguageCompetence(LanguageCompetenceViewModel addLanguageCompetence)
    {
        visibleLanguageCompetence = false;

        addLanguageCompetence.LanguageId = CurrentLanguageId;

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await LanguageCompetenceDataService.CreateLanguageCompetenceAsync(addLanguageCompetence);

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit crearea unei noi competențe lingvistice: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Competența lingvistică a fost adăugată cu succes!", Severity.Success);
            language = (await LanguageDataService.GetLanguageByIdAsync(CurrentLanguageId));
            StateHasChanged();
        }
    }

    void OpenDialogLanguageCompetence()
    {
        addLanguageCompetence = new LanguageCompetenceViewModel();
        visibleLanguageCompetence = true;
    }

    bool ValidateAddLanguageCompetence()
    {
        if (string.IsNullOrEmpty(addLanguageCompetence.LanguageCompetenceName))
            return false;
        return true;
    }

    void NavigateToLanguageCompetenceOverview(Guid languageCompetenceId)
    {
        NavigationManager.NavigateTo($"/language-competence-overview/{languageCompetenceId}");
    }

    private bool visibleEditLanguageCompetence = false;
    private LanguageCompetenceViewModel editLanguageCompetence = new LanguageCompetenceViewModel();

    void CloseEditLanguageCompetence() => visibleEditLanguageCompetence = false;

    void OpenDialogEditLanguageCompetence(LanguageCompetenceViewModel languageCompetence)
    {
        editLanguageCompetence = new LanguageCompetenceViewModel
        {
            LanguageCompetenceId = languageCompetence.LanguageCompetenceId,
            LanguageCompetenceName = languageCompetence.LanguageCompetenceName,
            LanguageCompetenceDescription = languageCompetence.LanguageCompetenceDescription, 
            LanguageCompetenceVideoLink = languageCompetence.LanguageCompetenceVideoLink,
            LanguageCompetencePriorityNumber = languageCompetence.LanguageCompetencePriorityNumber
        };
        selectedLanguageCompetence = languageCompetence;
        visibleEditLanguageCompetence = true;
    }

    async void EditLanguageCompetence(LanguageCompetenceViewModel editLanguageCompetence)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await LanguageCompetenceDataService.UpdateLanguageCompetenceAsync(editLanguageCompetence);

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit actualizarea competenței lingvistice: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            visibleEditLanguageCompetence = false;
            snackbar = Snackbar.Add("Informatiile au fost actualizate cu succes!", Severity.Success);
            language = (await LanguageDataService.GetLanguageByIdAsync(CurrentLanguageId));
            StateHasChanged();
        }
    }

    bool ValidateEditLanguageCompetence()
    {
        if (string.IsNullOrWhiteSpace(editLanguageCompetence.LanguageCompetenceName))
            return false;
        if (editLanguageCompetence.LanguageCompetenceName == selectedLanguageCompetence.LanguageCompetenceName && editLanguageCompetence.LanguageCompetenceDescription == selectedLanguageCompetence.LanguageCompetenceDescription && editLanguageCompetence.LanguageCompetenceVideoLink == selectedLanguageCompetence.LanguageCompetenceVideoLink && editLanguageCompetence.LanguageCompetencePriorityNumber == selectedLanguageCompetence.LanguageCompetencePriorityNumber)
            return false;
        return true;
    }
}

@* VIEW & EDIT PLACEMENT TEST *@
@functions {
    private bool visibleCreatePlacementTest;
    private DialogOptions dialogOptionsForCreatePlacementTest = new() { FullWidth = true, MaxWidth = MaxWidth.Large };
    private Dictionary<string, bool> _expandedStates = new Dictionary<string, bool>();

    void CancelCreatePlacementTest() => visibleCreatePlacementTest = false;

    async void CreatePlacementTest(List<Guid> questionIds)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        Dictionary<Guid, int> selectedQuestionsCount = new Dictionary<Guid, int>();
        foreach (var questionId in questionIds)
        {
            QuestionViewModel question = await QuestionDataService.GetQuestionByIdAsync(questionId);
            LessonViewModel lesson = await LessonDataService.GetLessonByIdAsync(question.LessonId);
            ChapterViewModel chapter = await ChapterDataService.GetChapterByIdAsync(lesson.ChapterId);
            string key = chapter.LanguageLevelId.ToString() + lesson.LanguageCompetenceId.ToString();
            if (selectedQuestionsCount.ContainsKey(chapter.LanguageLevelId))
            {
                selectedQuestionsCount[chapter.LanguageLevelId]++;
            }
            else
            {
                selectedQuestionsCount[chapter.LanguageLevelId] = 1;
            }
        }

        if (selectedQuestionsCount.Values.Distinct().Count() > 1)
        {
            snackbar = Snackbar.Add($"Trebuie să selectați un număr egal de întrebări pentru fiecare nivel de limbă și competență lingvistică!", Severity.Error);
            return;
        }

        PlacementTestViewModel newPlacementTest = new PlacementTestViewModel
        {
            LanguageId = CurrentLanguageId,
            QuestionsId = questionIds
        };

        var response = await LanguageDataService.CreatePlacementTestAsync(newPlacementTest);

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit crearea testului inițial: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            visibleCreatePlacementTest = false;
            snackbar = Snackbar.Add($"Testul inițial a fost creat cu succes!", Severity.Success);
            language = (await LanguageDataService.GetLanguageByIdAsync(CurrentLanguageId));
            StateHasChanged();
        }
    }

    void OpenDialogCreatePlacementTest()
    {
        visibleCreatePlacementTest = true;
    }

    private void OnExpandCollapseClick(string key)
    {
        if (_expandedStates.ContainsKey(key))
        {
            _expandedStates[key] = !_expandedStates[key];
        }
        else
        {
            _expandedStates.Add(key, true);
        }
    }

    private bool IsExpanded(string key)
    {
        return _expandedStates.ContainsKey(key) && _expandedStates[key];
    }

    public async Task<List<QuestionViewModel>> SelectQuestions(Guid languageLevelId, Guid languageCompetenceId)
    {
        return await QuestionDataService.GetAllQuestionsByLanguageCompetenceIdAndLevelId(languageLevelId, languageCompetenceId);
    }

    private HashSet<QuestionViewModel> selectedQuestions = new HashSet<QuestionViewModel>();
    private QuestionViewModel currentQuestion;
    private bool visibleQuestion;
    private DialogOptions dialogOptionsQuestion = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void CancelQuestion() => visibleQuestion = false;

    async void OpenDialogQuestion(QuestionViewModel question)
    {
        currentQuestion = await QuestionDataService.GetQuestionByIdAsync(question.QuestionId);
        visibleQuestion = true;
    }

    private bool FilterFuncViewPlacementTest(QuestionViewModel element) => FilterFuncViewPlacementTest1(element, searchString);

    private bool FilterFuncViewPlacementTest1(QuestionViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.QuestionRequirement.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async void DeletePlacementTest()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await LanguageDataService.DeletePlacementTestAsync(CurrentLanguageId);

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit ștererea testului inițial: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else {
            snackbar = Snackbar.Add("Testul inițial a fost șters cu succes!", Severity.Success);
            language = (await LanguageDataService.GetLanguageByIdAsync(CurrentLanguageId));
            StateHasChanged();
        }
    }

    async void DeleteQuestionPlacementTest(QuestionViewModel question)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        List<Guid> questionIds = language.PlacementTest.Select(q => q.QuestionId).ToList();
        questionIds.Remove(question.QuestionId);

        PlacementTestViewModel updatePlacementTest = new PlacementTestViewModel
        {
            LanguageId = CurrentLanguageId,
                QuestionsId = questionIds
        };

        var response = await LanguageDataService.UpdatePlacementTestAsync(updatePlacementTest);

        if (!response.IsSuccess)
        {
            var errorMessage = "Nu s-a reușit ștererea întrebării din testul inițial: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Întrebarea a fost ștearsă cu succes!", Severity.Success);
            language = (await LanguageDataService.GetLanguageByIdAsync(CurrentLanguageId));
            StateHasChanged();
        }
    }

    void OpenDialogUpdatePlacementTest()
    {
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Testul inițial a fost actualizat cu succes!", Severity.Success);
    }
}