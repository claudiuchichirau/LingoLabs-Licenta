@page "/lesson-overview"
@using LingoLabs.App.ViewModel.MudBlazor
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@using static MudBlazor.CategoryTypes
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top: -10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
</div>

<MudContainer>
    <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom:50px;">
        <div class="col-md-6 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
            <div class="row">
                <h2 style="color: #2563EB; padding: 20px; margin-top: 10px;" class="poppins-semi-bold">Lecție - Overview</h2>
            </div>
        </div>
    </div>
</MudContainer>

@* LESSON - GET BY ID *@

<div class="row" style="max-width: 100vw; overflow-x: auto;">
    <div class="col">
        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 80px; margin-top: 50px; margin-bottom: 20px;" class="poppins-semi-bold">
                Capitolul :&emsp;
                <span style="color: #FC6F05; font-size: 25px;">
                    Introduction in English
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 75px; padding: 5px; margin-bottom: 20px;" class="poppins-semi-bold">
                Competența Lingvistică:&emsp;
                <span style="color: #FC6F05; font-size: 25px;">
                    Grammar
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 75px; padding: 5px; margin-bottom: 20px;" class="poppins-semi-bold">
                Titlu:&emsp;
                <span style="color: #2563EB; font-size: 25px;">
                    First Steps in English
                </span>
            </h1>
        </div

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Descriere:&emsp;
                <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                    This first lesson is an introduction to the English language. You will learn the basics of the language and how to use it in everyday life.
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Conținut:&emsp;
                <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                    We will start to talk about the alphabet, the numbers, the colors, and the days of the week.

                    We will also learn how to introduce ourselves and how to ask for directions.

                    At the end of the lesson, you will be able to have a basic conversation in English. 

                    Here is how you can start a conversation in English:
                    - Hello! My name is John. What is your name?
                    - Hi John! My name is Mary. Nice to meet you!
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Nr. Crt.:&emsp;
                <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                    1
                </span>
            </h1>
        </div>

        <div class="row">
            <!-- First Column (1/3 width) -->
            <div class="col-md-4">
                <div class="text-left">
                    <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                        Video:
                    </h1>
                </div>
            </div>

            <!-- Second Column (2/3 width) -->
            <div class="col-md-8">
                <iframe style="width: 426px; height: 240px; margin-top: 9px;" src="https://www.youtube.com/embed/CA1L7_hyRqs" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
            </div>
        </div>


    </div>

    <div class="col">
        <div style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
            <div class="row">
                <div class="text-center">
                    <h1 style="color: black; font-size: 33px; padding: 5px; margin-top: 50px;" class="poppins-semi-bold">
                        Imagine:
                    </h1>
                </div>
            </div>

            <div class="row justify-content-center">
                <img src="https://img.freepik.com/free-vector/hand-drawn-english-school-illustration-design_23-2149525060.jpg?w=900&t=st=1712134206~exp=1712134806~hmac=bdb5ac074fc8d8d0720168efcfb28a3e9e0bc413b1eb1d288afc279bde140cf7" alt="Chapter Image" style="min-width: 480px; max-width: 680px; height: auto;">
            </div>
        </div>
    </div>

</div>

<div class="text-left" style="max-width: 100vw; overflow-x: auto;">
    <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
        Cuvinte cheie:
    </h1>

    <MudContainer Style="overflow-x: hidden;">
        <div class="row mx-0" style="margin-top: 25px; margin-bottom: 50px; width: 333vh; min-height: 12vh;">
            <div class="col-md-6" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <MudTooltip>
                    <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #2563EB; color: white; position: absolute; right: -25px; top: -25px;" @onclick='() => OpenDialog()' />
                </MudTooltip>

                <MudStack Row="true">
                    @foreach (var item in KewWords)
                    {
                        <MudPaper Class="pa-3" Style="background-color: #02497E; color: white;">@item</MudPaper>
                    }
                </MudStack>
            </div>
        </div>
    </MudContainer>

    <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă un cuvânt cheie</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" @bind-Value="keyWord" Label="Nume"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Cancel" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton Disabled="keyWord == null" OnClick="@(async () => AddKeyWord(keyWord))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

</div>

<div class="text-left">
    <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 35px;" class="poppins-semi-bold">Chestionar</h1>
</div>

@* CREATE QUIZ *@
<MudContainer Style="overflow-x: hidden;">
    <div class="row justify-content-center" style="margin-top: 15px; margin-bottom: 50px; min-height: 12vh; background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
        <div class="col-md-6 d-flex justify-content-center align-items-center">
            <p style="font-size: 16px; font-weight: bold; text-align: center; margin-top: 15px; margin-left: 30px;">
                    Momentan nu există niciun chestionar creat. Crează unul chiar acum!
                 </p>
            </div>

            <div class="col-md-6 d-flex justify-content-center align-items-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="background-color: #2563EB; color: white; padding: 10px; width: 60%;" @onclick='() => OpenDialogCreateQuiz()'>Crează acum!</MudButton>
            </div>
        </div>
</MudContainer>


<MudDialog @bind-IsVisible="visibleCreateQuiz" Options="dialogOptionsForCreateQuiz">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Creează un chestionar</span>
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudText>
            <span style="font-size: 16px;">Pentru a iniția crearea chestionarului aferent lecției curente, este necesar să formulezi cel puțin <strong>10 întrebări</strong>. Odată ce acest 
                număr minim de întrebări este atins, opțiunea de salvare va deveni disponibilă, permițându-ți să finalizezi și să salvezi chestionarul.</span>
        </MudText>

        <MudText Typo="Typo.body1" Style="margin-top: 20px;">
            <span style="font-size: 16px;">Întrebări:</span>
        </MudText>

        <MudTable Items="@CreateQuizQuestions" @bind-SelectedItems="selectedQuestions" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true"
                    CustomHeader="true" CustomFooter="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" >
            <ToolBarContent>
                <MudSpacer />
                <div class="text-center" style="width: 55%;">
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
                </div>
                <MudTooltip Text="Add">
                    <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialogAddQuestion()' />
                </MudTooltip>
            </ToolBarContent>

            <HeaderContent>
                <MudTHeadRow IsCheckable="true">
                    <MudTh>Cerință</MudTh>
                    <MudTh>Vezi variantele de răspuns</MudTh>
                </MudTHeadRow>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Cerință">@context.QuestionRequirement</MudTd>
                <MudTd DataLabel="Vezi variantele de răspuns">
                    <div style="display: flex; align-items: center; justify-content: space-between;">
                        <MudTooltip Text="Vizualizează">
                            @* <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Visibility" Class="pa-0" OnClick="@( () => OpenDialogEditLesson(context) )" Style="margin-right: 7px;" /> *@
                        </MudTooltip>
                        <MudTooltip Text="Șterge Întrebare">
                            <MudIconButton Text="Șterge lecția" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteQuestionQuizz(context.QuestionId) )" Class="pa-0" Style="margin-left: 7px;" />
                        </MudTooltip>
                    </div>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelCreateQuiz" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(async () => CreatePlacementTest(selectedQuestions.Select(q => q.QuestionId).ToList()))" Style="color: #2563EB;" Disabled="@(!(selectedQuestions.Count >= 10))">Create</MudButton>
    </DialogActions>
</MudDialog>


@* CREATE QUESTION *@
<MudDialog @bind-IsVisible="visibleAddQuestion" Options="dialogOptionsForCreateQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Adaugă o întrebare</span>
        </MudText>

    </TitleContent>

    <DialogContent>
        <MudText Style="margin-top:25px;">Pentru început va trebui să alegi tipul întrebării pe care vrei să o creezi:</MudText>

        <MudSelect T="QuestionTypeElement" Label="Tipul întrebării:" @bind-Value="newQuestion.QuestionType" Style="margin-top: 10px;">
            <MudSelectItem Value="QuestionTypeElement.TrueFalse">True/False</MudSelectItem>
            <MudSelectItem Value="QuestionTypeElement.CuvantLipsa">Cuvânt lipsă</MudSelectItem>
            <MudSelectItem Value="QuestionTypeElement.Grila">Grilă</MudSelectItem>
        </MudSelect>

        @if (newQuestion.QuestionType == QuestionTypeElement.TrueFalse)     // TRUE / FALSE QUESTION
        {
            <MudTextField T="string" @bind-Value="newQuestion.QuestionRequirement" Label="Cerință"></MudTextField>
            <MudSelect T="bool" Label="Valoare de adevăr" @bind-Value="boolValueQuestionTrueFalse" Style="margin-top: 10px;" OnChange="@( () => SetTrueValueQuestionTrueFalse(boolValueQuestionTrueFalse))">
                <MudSelectItem Value="true">True</MudSelectItem>
                <MudSelectItem Value="false">False</MudSelectItem>
            </MudSelect>
        }

        @if (newQuestion.QuestionType == QuestionTypeElement.Grila)         // GRID QUESTION
        {
            <MudText Style="margin-top:25px;">Întrebarea va trebui să aibă minim 3 variante de răspuns, dintre care <strong>una singură</strong> să fie corectă!</MudText>
            <MudTextField T="string" @bind-Value="newQuestion.QuestionRequirement" Label="Cerință"></MudTextField>
            <MudText Style="margin-top:25px;">Variante de răspuns:</MudText>
            @if(newQuestion.QuestionChoices == null || newQuestion.QuestionChoices.Count == 0)
            {
                <MudText Typo="Typo.body1" Style="margin-top: 5px;"><strong>Nu există nicio variantă de răspuns adăugată! Adaugă acum una folosind butonul de mai jos!</strong></MudText>
            }
            else
            {
                @foreach (var choice in newQuestion.QuestionChoices)
                {
                    @if (choice.IsCorrect == true)
                    {
                        <MudText T="string" Label="Conținut" Style="color: green; margin-top: 5px;">
                            <strong>-&emsp;@choice.ChoiceContent</strong>&emsp;<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteChoice(choice) )" />
                        </MudText>
                    }
                    else if (choice.IsCorrect == false)
                    {
                        <MudText T="string" Label="Conținut" Style="color: red; margin-top: 5px;">
                            <strong>-&emsp;@choice.ChoiceContent</strong>&emsp;<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteChoice(choice) )" />
                        </MudText>
                    }

                }
            }

            <MudContainer Style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                <MudButton Variant="Variant.Text" FullWidth="true" OnClick="@( () => OpenDialogAddChoice() )" Style="height: 100%;">
                    <MudTooltip Text="Adaugă o variantă de răspuns">
                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                    </MudTooltip>
                </MudButton>
            </MudContainer>
        }

        @if (newQuestion.QuestionType == QuestionTypeElement.CuvantLipsa)    // MISSING WORD QUESTION
        {
            <MudTextField T="string" @bind-Value="newQuestion.QuestionRequirement" Label="Cerință"></MudTextField>
            <MudText Style="margin-top:25px;">Variante de răspuns:</MudText>
            @if(newQuestion.QuestionChoices == null || newQuestion.QuestionChoices.Count == 0)
            {
                <MudText Typo="Typo.body1" Style="margin-top: 5px;"><strong>Nu există nicio variantă de răspuns adăugată! Adaugă numai variante corecte de răspuns!</strong></MudText>
            }
            else
            {
                @foreach (var choice in newQuestion.QuestionChoices)
                {
                    <MudText T="string" Label="Conținut" Style="color: green; margin-top: 5px;">
                        <strong>-&emsp;@choice.ChoiceContent</strong>&emsp;<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteChoice(choice) )" />
                    </MudText>
                }
            }

            <MudContainer Style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                <MudButton Variant="Variant.Text" FullWidth="true" OnClick="@( () => OpenDialogAddCorrectChoice() )" Style="height: 100%;">
                    <MudTooltip Text="Adaugă o variantă de răspuns">
                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                    </MudTooltip>
                </MudButton>
            </MudContainer>
        }

    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelAddQuestion" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(() => AddQuestion(newQuestion))" Style="color: #2563EB;" Disabled="@(!IsQuestionValid(newQuestion))">Create</MudButton>
    </DialogActions>
</MudDialog>


@* ADD CHOICE *@
<MudDialog @bind-IsVisible="visibleAddChoice" Options="dialogOptionsForCreateQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Adaugă o variantă de răspuns</span>
        </MudText>

    </TitleContent>

    <DialogContent>
        <MudTextField T="string" @bind-Value="newChoice.ChoiceContent" Label="Conținut"></MudTextField>
        <MudSelect T="bool" Label="Valoare de adevăr" @bind-Value="newChoice.IsCorrect" Style="margin-top: 10px;">
            <MudSelectItem Value="true">True</MudSelectItem>
            <MudSelectItem Value="false">False</MudSelectItem>
        </MudSelect>
        
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelAddChoice" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(async () => AddChoice(newChoice))" Style="color: #2563EB;" Disabled="@string.IsNullOrWhiteSpace(newChoice.ChoiceContent)">Add</MudButton>
    </DialogActions>
</MudDialog>

@* ADD CORRECT CHOICE *@
<MudDialog @bind-IsVisible="visibleAddCorrectChoice" Options="dialogOptionsForCreateQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Adaugă o variantă de răspuns</span>
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudTextField T="string" @bind-Value="newCorrectChoice.ChoiceContent" Label="Conținut"></MudTextField>
        
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelAddCorrectChoice" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(async () => AddCorrectChoice(newCorrectChoice))" Style="color: #2563EB;" Disabled="@string.IsNullOrWhiteSpace(newCorrectChoice.ChoiceContent)">Add</MudButton>
    </DialogActions>
</MudDialog>





@* KEW WORDS *@
@code {
    private Snackbar snackbar;
    private bool visible;
    private string currentField;
    private string newValue;
    private bool isModified = false;
    private string keyWord;

    void Submit()
    {
        visible = false;
    }

    void Cancel() => visible = false;

    void OpenDialog()
    {
        visible = true;
    }

    private DialogOptions dialogOptions = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void AddKeyWord(string keyWord)
    {
        visible = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Cuvântul cheie a fost adăugat cu succes!", Severity.Success);
    }

    protected override async Task OnInitializedAsync()
    {
        await PopulateKewWords();
    }

    private IEnumerable<string> KewWords = new List<string>();
    int containerWidth = 333; // Width of MudContainer (in vh units)
    int totalWidth; // Total width of elements (in vh units)
    int numRows; // Number of rows needed

    private async Task PopulateKewWords()
    {
        KewWords = new List<string>
        {
            "Cuvânt cheie 1",
            "Cuvânt cheie 2",
            "Cuvânt cheie 3"
        };

        // Elements = await httpClient.GetFromJsonAsync<List<AdminElement>>("webapi/periodictable");
    }

    void CalculateRowsAndWidth()
    {
        totalWidth = KewWords.Sum(kw => kw.Length);
        numRows = (int)Math.Ceiling((double)totalWidth / containerWidth);
    }
}

@* CREATE QUIZ *@
@code {
    private bool visibleCreateQuiz;
    private DialogOptions dialogOptionsForCreateQuiz = new() { FullWidth = true, MaxWidth = MaxWidth.Small };
    private Dictionary<string, bool> _expandedStates = new Dictionary<string, bool>();
    public IEnumerable<QuestionElement> CreateQuizQuestions { get; set; }

    void CancelCreateQuiz() => visibleCreateQuiz = false;

    void CreatePlacementTest(List<Guid> questionIds)
    {
        visibleCreateQuiz = false;
        // Do something with questionIds
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add($"Chestionarul a fost creat cu succes!", Severity.Success);
    }


    void OpenDialogCreateQuiz()
    {
        CreateQuizQuestions = new List<QuestionElement>
        {
            // new QuestionElement
            // {
            //     QuestionId = Guid.NewGuid(),
            //     QuestionRequirement = "Aveti de facut 2 teme?",
            //     QuestionImageData = "https://www.northwestcareercollege.edu/wp-content/uploads/2022/05/learn-english-.webp",
            //     QuestionVideoLink = "https://www.youtube.com/embed/cOun1gnEhec",
            //     QuestionChoices = new List<ChoiceElement>
            //     {
            //         new ChoiceElement
            //         {
            //             ChoiceContent = "Nu, avem 3",
            //             IsCorrect = true
            //         },
            //         new ChoiceElement
            //         {
            //             ChoiceContent = "Da, avem 2",
            //             IsCorrect = false
            //         }
            //     }
            // },
            // new QuestionElement
            // {
            //     QuestionId = Guid.NewGuid(),
            //     QuestionRequirement = "Ce luna e acum?",
            //     QuestionImageData = null,
            //     QuestionVideoLink = null,
            //     QuestionChoices = new List<ChoiceElement>
            //     {
            //         new ChoiceElement
            //         {
            //             ChoiceContent = "Aprilie",
            //             IsCorrect = true
            //         },
            //         new ChoiceElement
            //         {
            //             ChoiceContent = "Martie",
            //             IsCorrect = false
            //         }
            //     }
            // }

        };
        visibleCreateQuiz = true;
    }


    // CREATE QUESTION
    private bool visibleAddQuestion;
    private bool boolValueQuestionTrueFalse;
    protected QuestionElement newQuestion;
    private DialogOptions dialogOptionsForCreateQuestion = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void OpenDialogAddQuestion()
    {
        newQuestion = new QuestionElement();
        newQuestion.QuestionChoices = new List<ChoiceElement>();
        visibleAddQuestion = true;
    }

    void CancelAddQuestion() => visibleAddQuestion = false;

    void AddQuestion(QuestionElement question)
    {
        visibleAddQuestion = false;
        question.QuestionId = Guid.NewGuid();
        CreateQuizQuestions = CreateQuizQuestions.Append(question);
        StateHasChanged();
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Întrebarea a fost adăugată cu succes!", Severity.Success);
    }

    bool IsQuestionValid(QuestionElement question)
    {
        switch(question.QuestionType)
        {
            case QuestionTypeElement.TrueFalse:
                return IsTrueFalseQuestionValid(question);
            case QuestionTypeElement.Grila:
                return IsGridQuestionValid(question);
            case QuestionTypeElement.CuvantLipsa:
                return IsMissingWordQuestionValid(question);
            default:
                return false;
        }
    }

    bool IsTrueFalseQuestionValid(QuestionElement question)
    {
        return !string.IsNullOrWhiteSpace(question.QuestionRequirement);
    }

    bool IsGridQuestionValid(QuestionElement question)
    {
        int correctChoices = question.QuestionChoices.Count(c => c.IsCorrect);
        return !string.IsNullOrWhiteSpace(question.QuestionRequirement) && question.QuestionChoices.Count >= 3 && correctChoices == 1;
    }

    bool IsMissingWordQuestionValid(QuestionElement question)
    {
        int correctChoices = question.QuestionChoices.Count(c => c.IsCorrect);
        return !string.IsNullOrWhiteSpace(question.QuestionRequirement) && question.QuestionChoices.Count >= 1 && correctChoices == question.QuestionChoices.Count;
    }

    void SetTrueValueQuestionTrueFalse(bool isCorrect)
    {
        if (newQuestion.QuestionChoices == null)
        {
            newQuestion.QuestionChoices = new List<ChoiceElement>();
        }

        var newChoice = new ChoiceElement
        {
            ChoiceContent = "TrueFalse",
            IsCorrect = isCorrect
        };

        newQuestion.QuestionChoices.Add(newChoice);
    }

    //ADD CHOICE
    private bool visibleAddChoice;
    protected ChoiceElement newChoice;

    void OpenDialogAddChoice()
    {
        newChoice = new ChoiceElement();
        visibleAddChoice = true;
        // Do something
    }

    void CancelAddChoice() => visibleAddChoice = false;

    void AddChoice(ChoiceElement choice)
    {
        visibleAddChoice = false;
        newQuestion.QuestionChoices.Add(choice);
        StateHasChanged();
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Varianta de răspuns a fost adăugată cu succes!", Severity.Success);
    }

    void DeleteChoice(ChoiceElement choice)
    {
        newQuestion.QuestionChoices.Remove(choice);
        StateHasChanged();
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Varianta de răspuns a fost ștearsă cu succes!", Severity.Success);
    }

    // ADD CORRECT CHOICE
    private bool visibleAddCorrectChoice;
    protected ChoiceElement newCorrectChoice;

    void OpenDialogAddCorrectChoice()
    {
        newCorrectChoice = new ChoiceElement();
        visibleAddCorrectChoice = true;
        // Do something
    }

    void CancelAddCorrectChoice() => visibleAddCorrectChoice = false;

    void AddCorrectChoice(ChoiceElement choice)
    {
        visibleAddCorrectChoice = false;
        choice.IsCorrect = true;
        newQuestion.QuestionChoices.Add(choice);
        StateHasChanged();
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Varianta de răspuns a fost adăugată cu succes!", Severity.Success);
    }
 }


 @* VIEW & EDIT QUIZ *@
 @code {

    private IEnumerable<QuestionElement> Questions = new List<QuestionElement>();
    private HashSet<QuestionElement> selectedQuestions = new HashSet<QuestionElement>();
    private QuestionElement currentQuestion;
    private bool visibleQuestion;
    private string searchString = "";
    private DialogOptions dialogOptionsQuestion = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void CancelQuestion() => visibleQuestion = false;

    void OpenDialogQuestion(QuestionElement question)
    {
        currentQuestion = question;
        visibleQuestion = true;
    }

    protected async Task PopulateQuestions()
    {
        Questions = new List<QuestionElement>
        {
            new QuestionElement
            {
                QuestionId = Guid.NewGuid(),
                QuestionRequirement = "Aveti de facut 2 teme?",
                QuestionImageData = "https://www.northwestcareercollege.edu/wp-content/uploads/2022/05/learn-english-.webp",
                QuestionVideoLink = "https://www.youtube.com/embed/cOun1gnEhec",
                QuestionChoices = new List<ChoiceElement>
                {
                    new ChoiceElement
                    {
                        ChoiceContent = "Nu, avem 3",
                        IsCorrect = true
                    },
                    new ChoiceElement
                    {
                        ChoiceContent = "Da, avem 2",
                        IsCorrect = false
                    }
                }
            },
            new QuestionElement
            {
                QuestionId = Guid.NewGuid(),
                QuestionRequirement = "Ce luna e acum?",
                QuestionImageData = null,
                QuestionVideoLink = null,
                QuestionChoices = new List<ChoiceElement>
                {
                    new ChoiceElement
                    {
                        ChoiceContent = "Aprilie",
                        IsCorrect = true
                    },
                    new ChoiceElement
                    {
                        ChoiceContent = "Martie",
                        IsCorrect = false
                    }
                }
            }

        };

        // AdminLanguageElements = await httpClient.GetFromJsonAsync<List<AdminViewLanguageElement>>("webapi/periodictable");
    }

    private bool FilterFuncViewPlacementTest(QuestionElement element) => FilterFuncViewPlacementTest1(element, searchString);

    private bool FilterFuncViewPlacementTest1(QuestionElement element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.QuestionRequirement.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    void DeletePlacementTest()
    {
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Testul inițial a fost șters cu succes!", Severity.Success);
    }

    void DeleteQuestionQuizz(Guid questionId)
    {
        CreateQuizQuestions = CreateQuizQuestions.Where(q => q.QuestionId != questionId);
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Întrebarea a fost ștearsă cu succes!", Severity.Success);
    }

    void OpenDialogUpdatePlacementTest()
    {
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Testul inițial a fost actualizat cu succes!", Severity.Success);
    }
}