@page "/lesson-overview/{Id}"
@using LingoLabs.App.Contracts.LanguageContracts
@using LingoLabs.App.ViewModel.LanguageModels
@using LingoLabs.App.ViewModel.LanguageModels.LessonQuiz
@using LingoLabs.App.ViewModel.MudBlazor
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@using static MudBlazor.CategoryTypes
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top: -10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -45px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -30px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -15px; max-width: 150px;">
    <img src="/images/homepage/jos.png" style="position: absolute; bottom: 0; right: 0; max-width: 150px;">
    <img src="/images/homepage/sus.png" style="position: absolute; top: 0; right: 0; max-width: 200px;">
</div>

<MudContainer>
    <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom:50px;">
        <div class="col-md-6 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
            <div class="row">
                <h2 style="color: #2563EB; padding: 20px; margin-top: 10px;" class="poppins-semi-bold">Lecție - Overview</h2>
            </div>
        </div>
    </div>
</MudContainer>

@* LESSON - GET BY ID *@

@if(!IsLessonLoaded)
{
    <div class="row mx-0 justify-content-md-center">
        <div class="col-md-6 d-flex flex-column align-items-center justify-item-center" style="margin-top: 50px;">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </div>
    </div>
}
else {
<div class="row" style="max-width: 100vw; overflow-x: auto;">
    <div class="col">
        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 80px; margin-top: 50px; margin-bottom: 20px;" class="poppins-semi-bold">
                Capitolul :&emsp;
                <span style="color: #FC6F05; font-size: 25px;">
                    @lesson.ChapterName
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 75px; padding: 5px; margin-bottom: 20px;" class="poppins-semi-bold">
                Nivelul Lingvistic:&emsp;
                <span style="color: #FC6F05; font-size: 25px;">
                    @lesson.LanguageLevelName
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 75px; padding: 5px; margin-bottom: 20px;" class="poppins-semi-bold">
                Competența Lingvistică:&emsp;
                <span style="color: #FC6F05; font-size: 25px;">
                    @lesson.LanguageCompetenceName
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 75px; padding: 5px; margin-bottom: 20px;" class="poppins-semi-bold">
                Titlu:&emsp;
                <span style="color: #2563EB; font-size: 25px;">
                    @lesson.LessonTitle
                </span>
            </h1>
        </div

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Descriere:&emsp;
                @if (!string.IsNullOrEmpty(lesson.LessonDescription))
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                        @lesson.LessonDescription
                    </span>
                }
                else
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">-</span>
                }
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Conținut:&emsp;
                @if (!string.IsNullOrEmpty(lesson.LessonContent))
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                        @lesson.LessonContent
                    </span>
                }
                else
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">-</span>
                }
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Nr. Crt.:&emsp;
                @if (lesson.LessonPriorityNumber != 0 || lesson.LessonPriorityNumber != null)
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                            @lesson.LessonPriorityNumber
                    </span>
                }
                else
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">-</span>
                }
            </h1>
        </div>

        @if (!string.IsNullOrEmpty(lesson.LessonVideoLink))
        {
            <div class="row">
                <!-- First Column (1/3 width) -->
                <div class="col-md-4">
                    <div class="text-left">
                        <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                            Video:
                        </h1>
                    </div>
                </div>

                <!-- Second Column (2/3 width) -->
                <div class="col-md-8">
                    <iframe style="width: 426px; height: 240px; margin-top: 9px;" src="@lesson.LessonVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <!-- First Column (1/3 width) -->
                <div class="col-md-4">
                    <div class="text-left">
                        <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                            Video: -
                        </h1>
                    </div>
                </div>
            </div>
        }


    </div>

    @if (!string.IsNullOrEmpty(lesson.LessonImageData))
    {
        <div class="col">
            <div style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                <div class="row">
                    <div class="text-center">
                        <h1 style="color: black; font-size: 33px; padding: 5px; margin-top: 50px;" class="poppins-semi-bold">
                            Imagine:
                        </h1>
                    </div>
                </div>

                <div class="row justify-content-center">
                    <img src="@lesson.LessonImageData" alt="Chapter Image" style="width: 350px; height: auto;">
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="col">
            <div style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                <div class="row">
                    <div class="text-center">
                        <h1 style="color: black; font-size: 33px; padding: 5px; margin-top: 50px;" class="poppins-semi-bold">
                            Imagine: -
                        </h1>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@* <div class="text-left" style="max-width: 100vw; overflow-x: auto;">
    <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
        Cuvinte cheie:
    </h1>

    <MudContainer Style="overflow-x: hidden;">
        <div class="row mx-0" style="margin-top: 25px; margin-bottom: 50px; width: 333vh; min-height: 12vh;">
            <div class="col-md-6" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <MudTooltip>
                    <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #2563EB; color: white; position: absolute; right: -25px; top: -25px;" @onclick='() => OpenDialog()' />
                </MudTooltip>

                <MudStack Row="true">
                    @foreach (var item in KewWords)
                    {
                        <MudPaper Class="pa-3" Style="background-color: #02497E; color: white;">@item</MudPaper>
                    }
                </MudStack>
            </div>
        </div>
    </MudContainer>

    <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă un cuvânt cheie</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" @bind-Value="keyWord" Label="Nume"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Cancel" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton Disabled="keyWord == null" OnClick="@(async () => AddKeyWord(keyWord))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

</div> *@

<div class="text-left">
    <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 35px;" class="poppins-semi-bold">Chestionar</h1>
</div>

@if (@lesson.LessonQuestions == null || @lesson.LessonQuestions.Count == 0)
{
@* CREATE QUIZ *@
<MudContainer Style="overflow-x: hidden;">
    <div class="row justify-content-center" style="margin-top: 15px; margin-bottom: 50px; min-height: 12vh; background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
        <div class="col-md-6 d-flex justify-content-center align-items-center">
            <p style="font-size: 16px; font-weight: bold; text-align: center; margin-top: 15px; margin-left: 30px;">
                    Momentan nu există niciun chestionar creat. Crează unul chiar acum!
                 </p>
            </div>

            <div class="col-md-6 d-flex justify-content-center align-items-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="background-color: #2563EB; color: white; padding: 10px; width: 60%;" @onclick='() => OpenDialogCreateQuiz()'>Crează acum!</MudButton>
            </div>
        </div>
</MudContainer>

<MudDialog @bind-IsVisible="visibleCreateQuiz" Options="dialogOptionsForCreateQuiz">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Creează un chestionar</span>
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudText>
            <span style="font-size: 16px;">Pentru a iniția crearea chestionarului aferent lecției curente, este necesar să formulezi cel puțin <strong>10 întrebări</strong>. Odată ce acest 
                număr minim de întrebări este atins, opțiunea de salvare va deveni disponibilă, permițându-ți să finalizezi și să salvezi chestionarul.</span>
        </MudText>

        <MudText Typo="Typo.body1" Style="margin-top: 20px;">
            <span style="font-size: 16px;">Întrebări:</span>
        </MudText>

        <MudTable Items="@CreateQuizQuestions" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true"
                    CustomHeader="true" CustomFooter="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" Filter="new Func<QuestionQuizViewModel,bool>(FilterFuncCreateQuiz)" > 
            <ToolBarContent>
                <MudSpacer />
                <div class="text-center" style="width: 55%;">
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
                </div>
                <MudTooltip Text="Add">
                    <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialogAddQuestion()' />
                </MudTooltip>
            </ToolBarContent>

            <HeaderContent>
                <MudTHeadRow IsCheckable="true">
                    <MudTh Style="text-align: center;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<QuestionQuizViewModel, object>(x=>x.QuestionType)">Tipul întrebării</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align: center;">Cerință</MudTh>
                    <MudTh Style="text-align: center;">Vezi mai multe</MudTh>
                    <MudTh Style="text-align: center;">Șterge întrebarea</MudTh>
                </MudTHeadRow>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Tipul întrebării" Style="text-align: center;">
                    @if( @context.QuestionType == QuestionTypeViewModel.TrueFalse)
                    {
                        <span>True/False</span>
                    }
                    else if( @context.QuestionType == QuestionTypeViewModel.MissingWord)
                    {
                        <span>Missing Word</span>
                    }
                    else if( @context.QuestionType == QuestionTypeViewModel.MultipleChoice)
                    {
                        <span>Multiple Choice</span>
                    }
                </MudTd>
                <MudTd DataLabel="Cerință" Style="text-align: center;">@context.QuestionRequirement</MudTd>
                <MudTd DataLabel="Vezi mai multe" Style="text-align: center;">
                     <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Visibility" Class="pa-0" OnClick="@( () => OpenDialogViewQuestion(context) )" Style="margin-right: 7px;" />
                </MudTd>
                <MudTd DataLabel="Șterge Întrebarea" Style="text-align: center;">
                    <MudIconButton Text="Șterge Întrebarea" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteQuestionQuizz(context.QuestionId) )" Class="pa-0" Style="margin-left: 7px;" />
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelCreateQuiz" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(async () => CreateQuiz(CreateQuizQuestions.ToList()))" Style="color: #2563EB;" Disabled="@(!(CreateQuizQuestions.Count() >= 10))">Create</MudButton>
    </DialogActions>
</MudDialog>


@* CREATE QUESTION *@
<MudDialog @bind-IsVisible="visibleAddQuestion" Options="dialogOptionsForCreateQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Adaugă o întrebare</span>
        </MudText>

    </TitleContent>

    <DialogContent>
        <MudText Style="margin-top:25px;">Pentru început va trebui să alegi tipul întrebării pe care vrei să o creezi:</MudText>

        <MudSelect T="QuestionTypeViewModel" Label="Tipul întrebării:" @bind-Value="newQuestion.QuestionType" Style="margin-top: 10px;">
            <MudSelectItem Value="QuestionTypeViewModel.TrueFalse">True/False</MudSelectItem>
            <MudSelectItem Value="QuestionTypeViewModel.MissingWord">Missing Word</MudSelectItem>
            <MudSelectItem Value="QuestionTypeViewModel.MultipleChoice">Multiple Choice</MudSelectItem>
        </MudSelect>

        @if (newQuestion.QuestionType == QuestionTypeViewModel.TrueFalse)     // TRUE / FALSE QUESTION
        {
            <MudTextField T="string" @bind-Value="newQuestion.QuestionRequirement" Label="Cerință"></MudTextField>
            <MudSelect T="bool" Label="Valoare de adevăr" @bind-Value="boolValueQuestionTrueFalse" Style="margin-top: 10px;" OnInput="(bool newValue) => SetTrueValueQuestionTrueFalse(newValue)">
                <MudSelectItem Value="true">True</MudSelectItem>
                <MudSelectItem Value="false">False</MudSelectItem>
            </MudSelect>
        }

        @if (newQuestion.QuestionType == QuestionTypeViewModel.MultipleChoice)         // GRID QUESTION
        {
            <MudText Style="margin-top:25px;">Întrebarea va trebui să aibă minim 3 variante de răspuns, dintre care <strong>una singură</strong> să fie corectă!</MudText>
            <MudTextField T="string" @bind-Value="newQuestion.QuestionRequirement" Label="Cerință"></MudTextField>
            <MudText Style="margin-top:25px;">Variante de răspuns:</MudText>
            @if(newQuestion.Choices == null || newQuestion.Choices.Count == 0)
            {
                <MudText Typo="Typo.body1" Style="margin-top: 5px;"><strong>Nu există nicio variantă de răspuns adăugată! Adaugă acum una folosind butonul de mai jos!</strong></MudText>
            }
            else
            {
                @foreach (var choice in newQuestion.Choices)
                {
                    @if (choice.IsCorrect == true)
                    {
                        <MudText T="string" Label="Conținut" Style="color: green; margin-top: 5px;">
                            <strong>-&emsp;@choice.ChoiceContent</strong>&emsp;<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteChoice(choice) )" />
                        </MudText>
                    }
                    else if (choice.IsCorrect == false)
                    {
                        <MudText T="string" Label="Conținut" Style="color: red; margin-top: 5px;">
                            <strong>-&emsp;@choice.ChoiceContent</strong>&emsp;<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteChoice(choice) )" />
                        </MudText>
                    }

                }
            }

            <MudContainer Style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                <MudButton Variant="Variant.Text" FullWidth="true" OnClick="@( () => OpenDialogAddChoice() )" Style="height: 100%;">
                    <MudTooltip Text="Adaugă o variantă de răspuns">
                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                    </MudTooltip>
                </MudButton>
            </MudContainer>
        }

        @if (newQuestion.QuestionType == QuestionTypeViewModel.MissingWord)    // MISSING WORD QUESTION
        {
            <MudTextField T="string" @bind-Value="newQuestion.QuestionRequirement" Label="Cerință"></MudTextField>
            <MudText Style="margin-top:25px;">Variante de răspuns:</MudText>
            @if(newQuestion.Choices == null || newQuestion.Choices.Count == 0)
            {
                <MudText Typo="Typo.body1" Style="margin-top: 5px;"><strong>Nu există nicio variantă de răspuns adăugată! Adaugă numai variante corecte de răspuns!</strong></MudText>
            }
            else
            {
                @foreach (var choice in newQuestion.Choices)
                {
                    <MudText T="string" Label="Conținut" Style="color: green; margin-top: 5px;">
                        <strong>-&emsp;@choice.ChoiceContent</strong>&emsp;<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteChoice(choice) )" />
                    </MudText>
                }
            }

            <MudContainer Style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                <MudButton Variant="Variant.Text" FullWidth="true" OnClick="@( () => OpenDialogAddCorrectChoice() )" Style="height: 100%;">
                    <MudTooltip Text="Adaugă o variantă de răspuns">
                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                    </MudTooltip>
                </MudButton>
            </MudContainer>
        }

    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelAddQuestion" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(() => AddQuestion(newQuestion))" Style="color: #2563EB;" Disabled="@(!IsAddQuestionValid(newQuestion))">Create</MudButton>
    </DialogActions>
</MudDialog>

@* VIEW QUESTION - FROM CREATE QUIZ *@
<MudDialog @bind-IsVisible="visibleViewQuestion" Options="dialogOptionsForCreateQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Preview" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Vezi întrebarea</span>
        </MudText>

    </TitleContent>

    <DialogContent>
        <MudText Typo="Typo.body1"><strong>Cerință:&emsp;</strong>@viewQuestion.QuestionRequirement</MudText>

        @if (viewQuestion.QuestionType == QuestionTypeViewModel.TrueFalse)     // TRUE / FALSE QUESTION
        {
            @foreach (var choice in viewQuestion.Choices)
            {
                @if (choice.IsCorrect == true)
                {
                    <MudText Typo="Typo.body1"><strong>Valoarea de adevăr:&emsp;</strong> 
                        <span style="color: green;">@choice.IsCorrect</span>
                    </MudText>
                }
                else if (choice.IsCorrect == false)
                {
                    <MudText Typo="Typo.body1"><strong>Valoarea de adevăr:&emsp;</strong> 
                        <span style="color: red;">@choice.IsCorrect</span>
                    </MudText>
                }
            }
        }

        @if (viewQuestion.QuestionType == QuestionTypeViewModel.MultipleChoice)         // GRID QUESTION
        {
            <MudText Typo="Typo.body1"><strong>Variante de răspuns:</strong>
               @foreach (var choice in viewQuestion.Choices)
                {
                    @if (choice.IsCorrect == true)
                    {
                        <MudText Typo="Typo.body1" Style="margin-top: 5px; color: green;">
                            <strong>-&emsp;@choice.ChoiceContent</strong>
                        </MudText>
                    }
                    else if (choice.IsCorrect == false)
                    {
                        <MudText Typo="Typo.body1" Style="margin-top: 5px; color: red;">
                            <strong>-&emsp;@choice.ChoiceContent</strong>
                        </MudText>
                    }
                }
            </MudText>
        }

        @if (viewQuestion.QuestionType == QuestionTypeViewModel.MissingWord)    // MISSING WORD QUESTION
        {
            <MudText Typo="Typo.body1"><strong>Variante de răspuns:</strong>
               @foreach (var choice in viewQuestion.Choices)
                {
                    <MudText Typo="Typo.body1" Style="margin-top: 5px; color: green;">
                        <strong>-&emsp;@choice.ChoiceContent</strong>
                    </MudText>
                }
            </MudText>
        }

    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelViewQuestion" Class="px-10" Style="color: black;">Close</MudButton>
    </DialogActions>
</MudDialog>

@* ADD CHOICE *@
<MudDialog @bind-IsVisible="visibleAddChoice" Options="dialogOptionsForCreateQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Adaugă o variantă de răspuns</span>
        </MudText>

    </TitleContent>

    <DialogContent>
        <MudTextField T="string" @bind-Value="newChoice.ChoiceContent" Label="Conținut"></MudTextField>
        <MudSelect T="bool" Label="Valoare de adevăr" @bind-Value="newChoice.IsCorrect" Style="margin-top: 10px;">
            <MudSelectItem Value="true">True</MudSelectItem>
            <MudSelectItem Value="false">False</MudSelectItem>
        </MudSelect>
        
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelAddChoice" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(async () => AddChoice(newChoice))" Style="color: #2563EB;" Disabled="@string.IsNullOrWhiteSpace(newChoice.ChoiceContent)">Add</MudButton>
    </DialogActions>
</MudDialog>

@* ADD CORRECT CHOICE *@
<MudDialog @bind-IsVisible="visibleAddCorrectChoice" Options="dialogOptionsForCreateQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Adaugă o variantă de răspuns</span>
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudTextField T="string" @bind-Value="newCorrectChoice.ChoiceContent" Label="Conținut"></MudTextField>
        
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelAddCorrectChoice" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(async () => AddCorrectChoice(newCorrectChoice))" Style="color: #2563EB;" Disabled="@string.IsNullOrWhiteSpace(newCorrectChoice.ChoiceContent)">Add</MudButton>
    </DialogActions>
</MudDialog>

}
else{

@* QUIZ EXISTS *@
<div style="max-width: 80%; margin: auto; margin-bottom: 55px;">
    <MudTable Items="@lesson.LessonQuestions" Hover="true" SortLabel="Sort By" Filter="new Func<QuestionViewModel,bool>(FilterFuncViewQuiz)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Întrebări - Chestionar</MudText>
            <MudSpacer />
            <div class="text-center" style="width: 55%;">
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
            </div>
            <MudTooltip Text="Adaugă o nouă întrebare">
                <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #FC6F05; color: white; margin-right: 15px;" @onclick='() => OpenDialogAddQuestionViewQuiz()' />
            </MudTooltip>
            <MudTooltip Text="Șterge chestionarul">
                <MudFab Icon="@Icons.Material.Filled.Delete" Style="background-color: #FC6F05; color: white;" @onclick='() => DeleteQuiz()' />
            </MudTooltip>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="text-align: center;">Nr. Crt</MudTh>
            <MudTh Style="text-align: center;"><MudTableSortLabel SortBy="new Func<QuestionViewModel, object>(x=>x.QuestionType)">Tipul Întrebării</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;"><MudTableSortLabel SortBy="new Func<QuestionViewModel, object>(x=>x.QuestionRequirement)">Cerință</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;">Vizualizează & Modifică Întrebarea</MudTh>
            <MudTh Style="text-align: center;">Șterge întrebarea</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr. Crt" Style="text-align: center;">@(context.QuestionPriorityNumber.HasValue ? context.QuestionPriorityNumber.ToString() : "-")</MudTd>
            <MudTd DataLabel="Tipul Întrebării" Style="text-align: center;">@context.QuestionType</MudTd>
            <MudTd DataLabel="Cerință" Style="text-align: center;">@context.QuestionRequirement</MudTd>
            <MudTd DataLabel="Vizualizează & Modifică Întrebarea" Style="text-align: center;">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.BorderColor" Class="pa-0" OnClick="@( () => OpenDialogEditQuestionViewQuiz(context) )" Style="margin-right: 7px;" />
            </MudTd>
            <MudTd DataLabel="Șterge întrebarea" Style="text-align: center;">
                <MudIconButton Text="Șterge Întrebarea" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteQuestionViewQuiz(context.QuestionId) )" Class="pa-0" Style="margin-left: 7px;" Disabled="@IsDeleteQuestionButtonDisabled"/>
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>
</div>

@* VIEW & EDIT QUESTION *@
<MudDialog @bind-IsVisible="visibleEditQuestionViewQuiz" Options="dialogOptionsQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Vizualizează & Modifică Întrebarea</span>
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper Class="pa-6" Style="margin-bottom: 40px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" OnValidSubmit="OnSubmit" Model="editedQuestion">
                <MudTextField T="QuestionTypeViewModel" Label="Tipul întrebării" Disabled="true" @bind-Value="editedQuestion.QuestionType"></MudTextField>
                <MudTextField T="string" Label="Cerința" @bind-Value="editedQuestion.QuestionRequirement"></MudTextField>
                
                @if(editedQuestion.QuestionType == QuestionTypeViewModel.TrueFalse)
                {
                    foreach (var choice in editedQuestion.Choices)
                    {
                        <MudSelect T="bool" Label="Valoare de adevăr" @bind-Value="choice.IsCorrect" Style="margin-top: 10px;">
                            <MudSelectItem Value="true">True</MudSelectItem>
                            <MudSelectItem Value="false">False</MudSelectItem>
                        </MudSelect>
                    }
                }
                else if (editedQuestion.QuestionType == QuestionTypeViewModel.MissingWord)
                {
                    <MudText Style="margin-top:25px;">Variante de răspuns:</MudText>
                    @foreach (var choice in editedQuestion.Choices)
                    {
                        <div class="row">
                            <div class="col">
                                <MudTextField T="string" Label="Conținut" @bind-Value="choice.ChoiceContent"></MudTextField>
                            </div>
                            @* <div class="col">
                                <MudIconButton Text="Șterge lecția" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteChoiceViewQuiz(editedQuestion, choice) )" Class="pa-0" Style="margin-left: 7px; margin-top: 5px;" Disabled="@(editedQuestion.Choices.Count() <= 1)"/>
                            </div> *@
                        </div>
                    }

                    @* <MudContainer Style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                        <MudButton Variant="Variant.Text" FullWidth="true" OnClick="@( () => OpenDialogAddChoiceViewQuiz() )" Style="height: 100%;">
                            <MudTooltip Text="Adaugă o variantă de răspuns">
                                <MudIcon Icon="@Icons.Material.Filled.Add" />
                            </MudTooltip>
                        </MudButton>
                    </MudContainer> *@
                }
                else if(editedQuestion.QuestionType == QuestionTypeViewModel.MultipleChoice)
                {
                    <MudText Style="margin-top:25px;">Variante de răspuns:</MudText>
                    @foreach (var choice in editedQuestion.Choices)
                    {
                        <div class="row">
                            <div class="col">
                                <MudTextField T="string" Label="Conținut" @bind-Value="choice.ChoiceContent"></MudTextField>
                            </div>
                            <div class="col">
                                <MudSelect T="bool" Label="Valoare de adevăr" @bind-Value="choice.IsCorrect">
                                    <MudSelectItem Value="true" Style="color: green;">True</MudSelectItem>
                                    <MudSelectItem Value="false" Style="color: red;">False</MudSelectItem>
                                </MudSelect>
                            </div>
                            @* <div class="col">
                                <MudIconButton Text="Șterge lecția" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteChoiceViewQuiz(editedQuestion, choice) )" Class="pa-0" Style="margin-left: 7px; margin-top: 5px;" Disabled="@(editedQuestion.Choices.Count() <= 3)"/>
                            </div> *@
                        </div>
                    }

                    @* <MudContainer Style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                        <MudButton Variant="Variant.Text" FullWidth="true" OnClick="@( () => OpenDialogAddChoiceViewQuiz() )" Style="height: 100%;">
                            <MudTooltip Text="Adaugă o variantă de răspuns">
                                <MudIcon Icon="@Icons.Material.Filled.Add" />
                            </MudTooltip>
                        </MudButton>
                    </MudContainer> *@
                }

                <MudTextField T="string" Label="Link Video" @bind-Value="editedQuestion.QuestionVideoLink" Style="margin-top:35px;"></MudTextField>
                <MudTextField T="string" Label="Link Imagine" @bind-Value="editedQuestion.QuestionImageData"></MudTextField>
                <MudTextField T="int?" Label="Nr. Crt." @bind-Value="editedQuestion.QuestionPriorityNumber"></MudTextField>
            </MudForm>
        </MudPaper>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelUpdateQuestionViewQuiz" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(async () => UpdateQuestionViewQuiz(editedQuestion))" Style="color: #2563EB;" Disabled="@(!IsQuestionValid(editedQuestion))">Save</MudButton>
    </DialogActions>
</MudDialog>

@* ADD QUESTION - QUIZ EXISTS *@
<MudDialog @bind-IsVisible="visibleAddQuestionQuizExists" Options="dialogOptionsForCreateQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Adaugă o întrebare</span>
        </MudText>

    </TitleContent>

    <DialogContent>
        <MudText Style="margin-top:25px;">Pentru început va trebui să alegi tipul întrebării pe care vrei să o creezi:</MudText>

        <MudSelect T="QuestionTypeViewModel" Label="Tipul întrebării:" @bind-Value="newQuestionQuizExists.QuestionType" Style="margin-top: 10px;">
            <MudSelectItem Value="QuestionTypeViewModel.TrueFalse">True/False</MudSelectItem>
            <MudSelectItem Value="QuestionTypeViewModel.MissingWord">Missing Word</MudSelectItem>
            <MudSelectItem Value="QuestionTypeViewModel.MultipleChoice">Multiple Choice</MudSelectItem>
        </MudSelect>

        @if (newQuestionQuizExists.QuestionType == QuestionTypeViewModel.TrueFalse)     // TRUE / FALSE QUESTION
        {
            <MudTextField T="string" @bind-Value="newQuestionQuizExists.QuestionRequirement" Label="Cerință"></MudTextField>
            <MudSelect T="bool" Label="Valoare de adevăr" @bind-Value="boolValueQuestionTrueFalse" Style="margin-top: 10px;" OnInput="(bool newValue) => SetTrueValueQuestionTrueFalse(newValue)">
                <MudSelectItem Value="true">True</MudSelectItem>
                <MudSelectItem Value="false">False</MudSelectItem>
            </MudSelect>
        }

        @if (newQuestionQuizExists.QuestionType == QuestionTypeViewModel.MultipleChoice)         // GRID QUESTION
        {
            <MudText Style="margin-top:25px;">Întrebarea va trebui să aibă minim 3 variante de răspuns, dintre care <strong>una singură</strong> să fie corectă!</MudText>
            <MudTextField T="string" @bind-Value="newQuestionQuizExists.QuestionRequirement" Label="Cerință"></MudTextField>
            <MudText Style="margin-top:25px;">Variante de răspuns:</MudText>
            @if(newQuestionQuizExists.Choices == null || newQuestionQuizExists.Choices.Count == 0)
            {
                <MudText Typo="Typo.body1" Style="margin-top: 5px;"><strong>Nu există nicio variantă de răspuns adăugată! Adaugă acum una folosind butonul de mai jos!</strong></MudText>
            }
            else
            {
                @foreach (var choice in newQuestionQuizExists.Choices)
                {
                    @if (choice.IsCorrect == true)
                    {
                        <MudText T="string" Label="Conținut" Style="color: green; margin-top: 5px;">
                            <strong>-&emsp;@choice.ChoiceContent</strong>&emsp;<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteChoiceQuizExists(choice) )" />
                        </MudText>
                    }
                    else if (choice.IsCorrect == false)
                    {
                        <MudText T="string" Label="Conținut" Style="color: red; margin-top: 5px;">
                            <strong>-&emsp;@choice.ChoiceContent</strong>&emsp;<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteChoiceQuizExists(choice) )" />
                        </MudText>
                    }

                }
            }

            <MudContainer Style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                <MudButton Variant="Variant.Text" FullWidth="true" OnClick="@( () => OpenDialogAddChoiceQuizExists() )" Style="height: 100%;">
                    <MudTooltip Text="Adaugă o variantă de răspuns">
                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                    </MudTooltip>
                </MudButton>
            </MudContainer>
        }

        @if (newQuestionQuizExists.QuestionType == QuestionTypeViewModel.MissingWord)    // MISSING WORD QUESTION
        {
            <MudTextField T="string" @bind-Value="newQuestionQuizExists.QuestionRequirement" Label="Cerință"></MudTextField>
            <MudText Style="margin-top:25px;">Variante de răspuns:</MudText>
            @if(newQuestionQuizExists.Choices == null || newQuestionQuizExists.Choices.Count == 0)
            {
                <MudText Typo="Typo.body1" Style="margin-top: 5px;"><strong>Nu există nicio variantă de răspuns adăugată! Adaugă numai variante corecte de răspuns!</strong></MudText>
            }
            else
            {
                @foreach (var choice in newQuestion.Choices)
                {
                    <MudText T="string" Label="Conținut" Style="color: green; margin-top: 5px;">
                        <strong>-&emsp;@choice.ChoiceContent</strong>&emsp;<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteChoiceQuizExists(choice) )" />
                    </MudText>
                }
            }

            <MudContainer Style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; margin-top: 10px;">
                <MudButton Variant="Variant.Text" FullWidth="true" OnClick="@( () => OpenDialogAddCorrectChoiceQuizExists() )" Style="height: 100%;">
                    <MudTooltip Text="Adaugă o variantă de răspuns">
                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                    </MudTooltip>
                </MudButton>
            </MudContainer>
        }

    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelAddQuestionQuizExists" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(() => AddQuestionQuizExists(newQuestionQuizExists))" Style="color: #2563EB;" Disabled="@(!IsAddQuestionValid(newQuestionQuizExists))">Create</MudButton>
    </DialogActions>
</MudDialog>


@* ADD CHOICE - QUIZ EXISTS*@
<MudDialog @bind-IsVisible="visibleAddChoiceQuizExists" Options="dialogOptionsForCreateQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Adaugă o variantă de răspuns</span>
        </MudText>

    </TitleContent>

    <DialogContent>
        <MudTextField T="string" @bind-Value="newChoiceQuizExists.ChoiceContent" Label="Conținut"></MudTextField>
        <MudSelect T="bool" Label="Valoare de adevăr" @bind-Value="newChoiceQuizExists.IsCorrect" Style="margin-top: 10px;">
            <MudSelectItem Value="true">True</MudSelectItem>
            <MudSelectItem Value="false">False</MudSelectItem>
        </MudSelect>
        
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelAddChoiceQuizExists" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(async () => AddChoiceQuizExists(newChoiceQuizExists))" Style="color: #2563EB;" Disabled="@string.IsNullOrWhiteSpace(newChoiceQuizExists.ChoiceContent)">Add</MudButton>
    </DialogActions>
</MudDialog>

@* ADD CORRECT CHOICE - QUIZ EXISTS*@
<MudDialog @bind-IsVisible="visibleAddCorrectChoiceQuizExists" Options="dialogOptionsForCreateQuestion">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
            <span style="color: #2563EB;">Adaugă o variantă de răspuns</span>
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudTextField T="string" @bind-Value="newCorrectChoiceQuizExists.ChoiceContent" Label="Conținut"></MudTextField>
        
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CancelAddCorrectChoiceQuizExists" Class="px-10" Style="color: black;">Close</MudButton>
        <MudButton OnClick="@(async () => AddCorrectChoiceQuizExists(newCorrectChoiceQuizExists))" Style="color: #2563EB;" Disabled="@string.IsNullOrWhiteSpace(newCorrectChoiceQuizExists.ChoiceContent)">Add</MudButton>
    </DialogActions>
</MudDialog>


}}

@code {
    [Inject]
    private ILessonDataService LessonDataService { get; set; }
    [Inject]
    private IQuestionDataService QuestionDataService { get; set; }
    [Parameter]
    public string Id { get; set; }
    private Guid CurrentLessonId = Guid.Empty;
    private LessonViewModel lesson = new LessonViewModel();
    private bool IsLessonLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        CurrentLessonId = Guid.Parse(Id);

        lesson = await LessonDataService.GetLessonByIdAsync(CurrentLessonId);

        IsLessonLoaded = true;

        await PopulateKewWords();
    }
}


@* KEW WORDS *@
@functions {
    private Snackbar snackbar;
    private bool visible;
    private string currentField;
    private string newValue;
    private bool isModified = false;
    private string keyWord;

    void Submit()
    {
        visible = false;
    }

    void Cancel() => visible = false;

    void OpenDialog()
    {
        visible = true;
    }

    private DialogOptions dialogOptions = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void AddKeyWord(string keyWord)
    {
        visible = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Cuvântul cheie a fost adăugat cu succes!", Severity.Success);
    }

    private IEnumerable<string> KewWords = new List<string>();
    int containerWidth = 333; // Width of MudContainer (in vh units)
    int totalWidth; // Total width of elements (in vh units)
    int numRows; // Number of rows needed

    private async Task PopulateKewWords()
    {
        KewWords = new List<string>
        {
            "Cuvânt cheie 1",
            "Cuvânt cheie 2",
            "Cuvânt cheie 3"
        };

        // Elements = await httpClient.GetFromJsonAsync<List<AdminElement>>("webapi/periodictable");
    }

    void CalculateRowsAndWidth()
    {
        totalWidth = KewWords.Sum(kw => kw.Length);
        numRows = (int)Math.Ceiling((double)totalWidth / containerWidth);
    }
}


@* CREATE QUIZ *@
@functions {
    private bool visibleCreateQuiz;
    private DialogOptions dialogOptionsForCreateQuiz = new() { FullWidth = true, MaxWidth = MaxWidth.Medium };
    private Dictionary<string, bool> _expandedStates = new Dictionary<string, bool>();
    public IEnumerable<QuestionQuizViewModel> CreateQuizQuestions { get; set; }

    private bool FilterFuncCreateQuiz(QuestionQuizViewModel element) => FilterFuncCreateQuiz1(element, searchString);

    private bool FilterFuncCreateQuiz1(QuestionQuizViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.QuestionRequirement.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.QuestionType.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    void CancelCreateQuiz() => visibleCreateQuiz = false;

    async void CreateQuiz(List<QuestionQuizViewModel> questions)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        QuizViewModel createQuiz = new QuizViewModel
        {
            LessonId = CurrentLessonId,
            QuestionList = questions
        };

        var response = await LessonDataService.CreateLessonQuizAsync(createQuiz);

        if (!response.IsSuccess)
        {
            var errorMessage = "Eroare la createa chestionarului :" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            visibleCreateQuiz = false;
            snackbar = Snackbar.Add("Chestionarul a fost creat cu succes!", Severity.Success);
            lesson = await LessonDataService.GetLessonByIdAsync(CurrentLessonId);
            StateHasChanged();
        }
    }

    void OpenDialogCreateQuiz()
    {
        CreateQuizQuestions = new List<QuestionQuizViewModel> { };
        visibleCreateQuiz = true;
    }


    // CREATE QUESTION
    private bool visibleAddQuestion;
    private bool boolValueQuestionTrueFalse;
    protected QuestionQuizViewModel newQuestion;
    private DialogOptions dialogOptionsForCreateQuestion = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void OpenDialogAddQuestion()
    {
        newQuestion = new QuestionQuizViewModel();
        newQuestion.Choices = new List<ChoiceQuizViewModel>();
        visibleAddQuestion = true;
    }

    void CancelAddQuestion() => visibleAddQuestion = false;

    void AddQuestion(QuestionQuizViewModel question)
    {
        visibleAddQuestion = false;
        question.QuestionId = Guid.NewGuid();

        if (question.QuestionType == QuestionTypeViewModel.TrueFalse && question.Choices != null && question.Choices.Count == 0)
        {
            question.Choices.Add(
                new ChoiceQuizViewModel
                {
                    ChoiceContent = "TrueFalse",
                    IsCorrect = boolValueQuestionTrueFalse
                }
            );
        }

        CreateQuizQuestions = CreateQuizQuestions.Append(question);
        StateHasChanged();
    }

    bool IsAddQuestionValid(QuestionQuizViewModel question)
    {
        switch(question.QuestionType)
        {
            case QuestionTypeViewModel.TrueFalse:
                return IsTrueFalseAddQuestionValid(question);
            case QuestionTypeViewModel.MultipleChoice:
                return IsGridAddQuestionValid(question);
            case QuestionTypeViewModel.MissingWord:
                return IsMissingWordAddQuestionValid(question);
            default:
                return false;
        }
    }

    bool IsTrueFalseAddQuestionValid(QuestionQuizViewModel question)
    {
        return !string.IsNullOrWhiteSpace(question.QuestionRequirement);
    }

    bool IsGridAddQuestionValid(QuestionQuizViewModel question)
    {
        int correctChoices = question.Choices.Count(c => c.IsCorrect);
        return !string.IsNullOrWhiteSpace(question.QuestionRequirement) && question.Choices.Count >= 3 && correctChoices == 1;
    }

    bool IsMissingWordAddQuestionValid(QuestionQuizViewModel question)
    {
        int correctChoices = question.Choices.Count(c => c.IsCorrect);
        return !string.IsNullOrWhiteSpace(question.QuestionRequirement) && question.Choices.Count >= 1 && correctChoices == question.Choices.Count;
    }

    void DeleteQuestionQuizz(Guid questionId)
    {
        CreateQuizQuestions = CreateQuizQuestions.Where(q => q.QuestionId != questionId);
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Întrebarea a fost ștearsă cu succes!", Severity.Success);
    }


    // VIEW QUESTION
    private bool visibleViewQuestion;
    private QuestionQuizViewModel viewQuestion;

    void OpenDialogViewQuestion(QuestionQuizViewModel question)
    {
        viewQuestion = question;
        visibleViewQuestion = true;
    }

    void CancelViewQuestion() => visibleViewQuestion = false;


    //ADD CHOICE
    private bool visibleAddChoice;
    protected ChoiceQuizViewModel newChoice;

    void OpenDialogAddChoice()
    {
        newChoice = new ChoiceQuizViewModel();
        visibleAddChoice = true;
        // Do something
    }

    void CancelAddChoice() => visibleAddChoice = false;

    void AddChoice(ChoiceQuizViewModel choice)
    {
        visibleAddChoice = false;
        newQuestion.Choices.Add(choice);
        StateHasChanged();
        // Do something
    }

    void DeleteChoice(ChoiceQuizViewModel choice)
    {
        newQuestion.Choices.Remove(choice);
        StateHasChanged();
        // Do something
    }

    // ADD CORRECT CHOICE
    private bool visibleAddCorrectChoice;
    protected ChoiceQuizViewModel newCorrectChoice;

    void OpenDialogAddCorrectChoice()
    {
        newCorrectChoice = new ChoiceQuizViewModel();
        visibleAddCorrectChoice = true;
        // Do something
    }

    void CancelAddCorrectChoice() => visibleAddCorrectChoice = false;

    void AddCorrectChoice(ChoiceQuizViewModel choice)
    {
        visibleAddCorrectChoice = false;
        choice.IsCorrect = true;
        newQuestion.Choices.Add(choice);
        StateHasChanged();
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Varianta de răspuns a fost adăugată cu succes!", Severity.Success);
    }
 }


 @* VIEW & EDIT QUIZ *@
 @functions {
    private List<QuestionViewModel> questionsUpdateQuiz = new List<QuestionViewModel>();
    private QuestionViewModel currentQuestion;
    private string searchString = "";
    private DialogOptions dialogOptionsQuestion = new() { FullWidth = true, MaxWidth = MaxWidth.Small };
    bool IsDeleteQuestionButtonDisabled => lesson.LessonQuestions.Count() <= 10;


    private bool FilterFuncViewQuiz(QuestionViewModel element) => FilterFuncViewQuiz1(element, searchString);

    private bool FilterFuncViewQuiz1(QuestionViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.QuestionRequirement.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.QuestionType.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async void DeleteQuiz()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await LessonDataService.DeleteLessonQuizAsync(CurrentLessonId);

        if (!response.IsSuccess)
        {
            var errorMessage = "Eroare la ștergerea chestionarului :" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Chestionarul a fost șters cu succes!", Severity.Success);
            lesson = await LessonDataService.GetLessonByIdAsync(CurrentLessonId);
            StateHasChanged();
        }
    }

    async void DeleteQuestionViewQuiz(Guid questionId)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        UpdateQuizViewModel updatedQuiz = new UpdateQuizViewModel {
            LessonId = CurrentLessonId,
            Questions = new List<QuestionViewModel>(lesson.LessonQuestions)
        };

        updatedQuiz.Questions = updatedQuiz.Questions.Where(q => q.QuestionId != questionId).ToList();

        var response = await LessonDataService.UpdateLessonQuizAsync(updatedQuiz);

        if (!response.IsSuccess)
        {
            var errorMessage = "Eroare la ștergerea întrebării :" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Întrebarea a fost ștearsă cu succes!", Severity.Success);
            lesson = await LessonDataService.GetLessonByIdAsync(CurrentLessonId);
            StateHasChanged();
        }
    }

    bool IsQuestionValid(QuestionViewModel question)
    {
        if (string.IsNullOrEmpty(question.QuestionRequirement))
            return false;

        bool choiceModified = false;
        for (int i = 0; i < question.Choices.Count; i++)
        {
            if (question.Choices[i].ChoiceContent != questionBeforeEdit.Choices[i].ChoiceContent ||
                question.Choices[i].IsCorrect != questionBeforeEdit.Choices[i].IsCorrect)
            {
                choiceModified = true;
            }
        }

        if (question.QuestionRequirement == questionBeforeEdit.QuestionRequirement && question.QuestionPriorityNumber == questionBeforeEdit.QuestionPriorityNumber && question.QuestionVideoLink == questionBeforeEdit.QuestionVideoLink && question.QuestionImageData == questionBeforeEdit.QuestionImageData && !choiceModified) 
            return false;

        switch(question.QuestionType)
        {
            case QuestionTypeViewModel.MultipleChoice:
                return IsGridQuestionValid(question);
            case QuestionTypeViewModel.MissingWord:
                return IsMissingWordQuestionValid(question);
            default:
                return true;
        }
    }

    bool IsGridQuestionValid(QuestionViewModel question)
    {
        int correctChoices = question.Choices.Count(c => c.IsCorrect);
        if (question.Choices.Count < 3 || correctChoices != 1)
            return false;
        return true;

    }

    bool IsMissingWordQuestionValid(QuestionViewModel question)
    {
        int correctChoices = question.Choices.Count(c => c.IsCorrect);
        if (question.Choices.Count < 1 || correctChoices != question.Choices.Count)
            return false;
        return true;
    }


    // VIEW & EDIT QUESTION
    QuestionViewModel editedQuestion { get; set; } = new QuestionViewModel();
    QuestionViewModel questionBeforeEdit { get; set; } = new QuestionViewModel();
    MudForm form;
    bool success;
    string[] errors = { };
    private bool visibleEditQuestionViewQuiz;

    void CancelUpdateQuestionViewQuiz() => visibleEditQuestionViewQuiz = false;

    void OpenDialogEditQuestionViewQuiz(QuestionViewModel question)
    {
        editedQuestion = new QuestionViewModel
        {
            QuestionId = question.QuestionId,
            QuestionType = question.QuestionType,
            QuestionRequirement = question.QuestionRequirement,
            QuestionVideoLink = question.QuestionVideoLink,
            QuestionImageData = question.QuestionImageData,
            QuestionPriorityNumber = question.QuestionPriorityNumber,
            Choices = question.Choices.Select(choice => new ChoiceViewModel
            {
                ChoiceId = choice.ChoiceId,
                ChoiceContent = choice.ChoiceContent,
                IsCorrect = choice.IsCorrect,
                QuestionId = question.QuestionId // Atribuiți QuestionId fiecărui Choice
            }).ToList()
        };
        questionBeforeEdit = question;
        visibleEditQuestionViewQuiz = true;
    }

    async void UpdateQuestionViewQuiz(QuestionViewModel question)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        UpdateQuizViewModel updatedQuiz = new UpdateQuizViewModel
        {
            LessonId = CurrentLessonId,
            Questions = new List<QuestionViewModel>(lesson.LessonQuestions)
        };

        // Găsiți indexul întrebării cu ID-ul specificat
        int index = updatedQuiz.Questions.FindIndex(q => q.QuestionId == question.QuestionId);

        foreach (QuestionViewModel questionA in updatedQuiz.Questions)
        {
            foreach (ChoiceViewModel choiceA in questionA.Choices)
            {
                choiceA.QuestionId = questionA.QuestionId;
            }
            questionA.LanguageId = null;
        }

        // Înlocuiți întrebarea de la acel index cu noua întrebare
        if (index != -1)
        {
            updatedQuiz.Questions[index] = question;
        }

        var response = await LessonDataService.UpdateLessonQuizAsync(updatedQuiz);

        if (!response.IsSuccess)
        {
            var errorMessage = "Eroare la actualizarea întrebării :" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            visibleEditQuestionViewQuiz = false;
            snackbar = Snackbar.Add("Întrebarea a fost actualizată cu succes!", Severity.Success);
            lesson = await LessonDataService.GetLessonByIdAsync(CurrentLessonId);
            StateHasChanged();
        }
    }

    void DeleteChoiceViewQuiz(QuestionViewModel question, ChoiceViewModel choice)
    {
        question.Choices.Remove(choice);
    }


    // ADD QUESTION - QUIZ EXISTS


    private bool visibleAddQuestionQuizExists = false;
    protected QuestionQuizViewModel newQuestionQuizExists;

    void OpenDialogAddQuestionViewQuiz()
    {
        visibleAddQuestionQuizExists = true;
        newQuestionQuizExists = new QuestionQuizViewModel();
    }

    void CancelAddQuestionQuizExists() => visibleAddQuestionQuizExists = false;

    async void AddQuestionQuizExists(QuestionQuizViewModel question)
    {
        visibleAddQuestionQuizExists = false;

        QuestionViewModel newQuestion = new QuestionViewModel
        {
            QuestionType = question.QuestionType,
            QuestionRequirement = question.QuestionRequirement,
            QuestionVideoLink = question.QuestionVideoLink,
            QuestionImageData = question.QuestionImageData,
            QuestionPriorityNumber = question.QuestionPriorityNumber,
            Choices = question.Choices.Select(choice => new ChoiceViewModel
            {
                ChoiceId = Guid.NewGuid(),
                ChoiceContent = choice.ChoiceContent,
                IsCorrect = choice.IsCorrect,
                QuestionId = question.QuestionId
            }).ToList(),
            LessonId = CurrentLessonId
        };

        if (question.QuestionType == QuestionTypeViewModel.TrueFalse && question.Choices != null && question.Choices.Count == 0)
        {
            question.Choices.Add(
                new ChoiceQuizViewModel
                {
                    ChoiceContent = "TrueFalse",
                    IsCorrect = boolValueQuestionTrueFalse
                }
            );
        }

        var response = await QuestionDataService.CreateQuestionAsync(newQuestion);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        if (!response.IsSuccess)
        {
            var errorMessage = "Eroare la adăugarea unei noi întrebări: " + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            visibleCreateQuiz = false;
            snackbar = Snackbar.Add("Întrebarea a fost adăugat cu succes!", Severity.Success);
            lesson = await LessonDataService.GetLessonByIdAsync(CurrentLessonId);
            StateHasChanged();
        }

        CreateQuizQuestions = CreateQuizQuestions.Append(question);
        StateHasChanged();
    }


    //ADD CHOICE - QUIZ EXISTS
    private bool visibleAddChoiceQuizExists;
    protected ChoiceQuizViewModel newChoiceQuizExists;

    void OpenDialogAddChoiceQuizExists()
    {
        newChoiceQuizExists = new ChoiceQuizViewModel();
        visibleAddChoiceQuizExists = true;
        // Do something
    }

    void CancelAddChoiceQuizExists() => visibleAddChoiceQuizExists = false;

    void AddChoiceQuizExists(ChoiceQuizViewModel choice)
    {
        visibleAddChoiceQuizExists = false;
        newQuestionQuizExists.Choices.Add(choice);
        StateHasChanged();
    }

    void DeleteChoiceQuizExists(ChoiceQuizViewModel choice)
    {
        newQuestionQuizExists.Choices.Remove(choice);
        StateHasChanged();
    }

    // ADD CORRECT CHOICE - QUIZ EXISTS
    private bool visibleAddCorrectChoiceQuizExists;
    protected ChoiceQuizViewModel newCorrectChoiceQuizExists;

    void OpenDialogAddCorrectChoiceQuizExists()
    {
        newCorrectChoiceQuizExists = new ChoiceQuizViewModel();
        visibleAddCorrectChoiceQuizExists = true;
        // Do something
    }

    void CancelAddCorrectChoiceQuizExists() => visibleAddCorrectChoiceQuizExists = false;

    void AddCorrectChoiceQuizExists(ChoiceQuizViewModel choice)
    {
        visibleAddCorrectChoiceQuizExists = false;
        choice.IsCorrect = true;
        newQuestionQuizExists.Choices.Add(choice);
        StateHasChanged();
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Varianta de răspuns a fost adăugată cu succes!", Severity.Success);
    }


    // ADD CHOICE
    // private bool visibleAddChoiceViewQuiz;
    // protected ChoiceQuizViewModel newChoiceViewQuiz;

    // void CancelAddChoiceViewQuiz() => visibleAddChoiceViewQuiz = false;

    // void OpenDialogAddChoiceViewQuiz()
    // {
    //     newChoiceViewQuiz = new ChoiceQuizViewModel();
    //     visibleAddChoiceViewQuiz = true;
    // }

    // void AddChoiceViewQuiz(ChoiceQuizViewModel choice)
    // {
    //     visibleAddChoiceViewQuiz = false;
    //     editedQuestion.Choices.Add(choice);
    //     StateHasChanged();
    //     // Do something
    //     Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
    //     snackbar = Snackbar.Add("Varianta de răspuns a fost adăugată cu succes!", Severity.Success);
    // }
}