@page "/chapter-overview"
@using LingoLabs.App.ViewModel.MudBlazor
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@using static MudBlazor.CategoryTypes
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top: -10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -45px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -30px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -15px; max-width: 150px;">
    <img src="/images/homepage/jos.png" style="position: absolute; bottom: 0; right: 0; max-width: 150px;">
    <img src="/images/homepage/sus.png" style="position: absolute; top: 0; right: 0; max-width: 200px;">
</div>

<MudContainer>
    <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom:50px;">
        <div class="col-md-6 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
            <div class="row">
                <h2 style="color: #2563EB; padding: 20px; margin-top: 10px;" class="poppins-semi-bold">Capitol - Overview</h2>
            </div>
        </div>
    </div>
</MudContainer>

@* CHAPTER - GET BY ID *@

<div class="row" style="max-width: 100vw; overflow-x: auto;">
    <div class="col">
        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 80px; margin-top: 50px; margin-bottom: 20px;" class="poppins-semi-bold">
                Nivelul Lingvistic:&emsp;
                <span style="color: #FC6F05; font-size: 25px;">
                    A1
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 75px; padding: 5px; margin-bottom: 20px;" class="poppins-semi-bold">
                Competența Lingvistică:&emsp;
                <span style="color: #FC6F05; font-size: 25px;">
                    Grammar
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 75px; padding: 5px; margin-bottom: 20px;" class="poppins-semi-bold">
                Nume:&emsp;
                <span style="color: #2563EB; font-size: 25px;">
                    Introduction in English
                </span>
            </h1>
        </div

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Descriere:&emsp;
                <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                    This chapter is an introduction to the English language. It is designed for beginners who want to learn the basics of English. The chapter covers the alphabet, numbers, colors, and basic vocabulary.
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Nr. Crt.:&emsp;
                <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                    1
                </span>
            </h1>
        </div>

        <div class="row">
            <!-- First Column (1/3 width) -->
            <div class="col-md-4">
                <div class="text-left">
                    <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                        Video:
                    </h1>
                </div>
            </div>

            <!-- Second Column (2/3 width) -->
            <div class="col-md-8">
                <iframe style="width: 426px; height: 240px; margin-top: 9px;" src="https://www.youtube.com/embed/CA1L7_hyRqs" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
            </div>
        </div>


    </div>

    <div class="col">
        <div style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
            <div class="row">
                <div class="text-center">
                    <h1 style="color: black; font-size: 33px; padding: 5px; margin-top: 50px;" class="poppins-semi-bold">
                        Imagine:
                    </h1>
                </div>
            </div>

            <div class="row justify-content-center">
                <img src="https://img.freepik.com/free-vector/hand-drawn-english-school-illustration-design_23-2149525060.jpg?w=900&t=st=1712134206~exp=1712134806~hmac=bdb5ac074fc8d8d0720168efcfb28a3e9e0bc413b1eb1d288afc279bde140cf7" alt="Chapter Image" style="min-width: 480px; max-width: 680px; height: auto;">
            </div>
        </div>
    </div>

</div>

<div class="text-left" style="max-width: 100vw; overflow-x: auto;">
    <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
        Cuvinte cheie:
    </h1>

    <MudContainer Style="overflow-x: hidden;">
        <div class="row mx-0" style="margin-top: 25px; margin-bottom: 50px; width: 333vh; min-height: 12vh;">
            <div class="col-md-6" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <MudTooltip>
                    <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #2563EB; color: white; position: absolute; right: -25px; top: -25px;" @onclick='() => OpenDialog()' />
                </MudTooltip>

                <MudStack Row="true">
                    @foreach (var item in KewWords)
                    {
                        <MudPaper Class="pa-3" Style="background-color: #02497E; color: white;">@item</MudPaper>
                    }
                </MudStack>
            </div>
        </div>
    </MudContainer>

    <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă un cuvânt cheie</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" @bind-Value="keyWord" Label="Nume"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Cancel" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton Disabled="keyWord == null" OnClick="@(async () => AddKeyWord(keyWord))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

</div>


@* LESSONS *@
<div class="text-left">
    <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 30px;" class="poppins-semi-bold">Lecții</h1>
</div>

<div style="max-width: 80%; margin: auto; margin-bottom: 55px;">
    <MudTable Items="@Lessons" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<ListeningLessonElement,bool>(FilterFuncViewLesson)"
              @bind-SelectedItem="selectedLesson" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
              IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
              @* SortBy="new Func<ListeningLessonElement, object>(x=>x.LessonPriorityNumber)" SortDirection="SortDirection.Ascending"> *@
        <ToolBarContent>
            <MudText Typo="Typo.h6">Lecții</MudText>
            <MudSpacer />
            <div class="text-center" style="width: 55%;">
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
            </div>
            <MudTooltip Text="Add">
                <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialogAddLesson()' />
            </MudTooltip>
        </ToolBarContent>

        <ColGroup>
            @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
            {
                <col style="width:50px;" />
            }
            <col />
            @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
            {
                <col style="width:50px;" />
            }
        </ColGroup>
        <HeaderContent>
            <MudTh Style="text-align: center;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ListeningLessonElement, object>(x=>x.LessonPriorityNumber)">Nr. Crt.</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ListeningLessonElement, object>(x=>x.LessonTitle)">Titlu</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;">Descriere</MudTh>
            <MudTh Style="text-align: center;">Conținut</MudTh>
            <MudTh Style="text-align: center;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ListeningLessonElement, object>(x=>x.LanguageCompetenceId)">Competență Lingvistică</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;">Vizualizează</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr. Crt.">@context.LessonPriorityNumber</MudTd>
            <MudTd DataLabel="Titlu">@context.LessonTitle</MudTd>
            <MudTd DataLabel="Descriere">@context.LessonDescription</MudTd>
            <MudTd DataLabel="Conținut">@context.LessonContent</MudTd>
            <MudTd DataLabel="Competență Lingvistică">@context.LanguageCompetenceId</MudTd>
            <MudTd DataLabel="Vizualizează">
                <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => NavigateToLessonOverview() )">Vezi mai multe</MudButton>
            </MudTd>
            <MudTd>
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <MudTooltip Text="Vizualizează & Modifică">
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Visibility" Class="pa-0" OnClick="@( () => OpenDialogEditLesson(context) )" Style="margin-right: 7px;" />
                    </MudTooltip>
                    <MudTooltip Text="Șterge Lecția">
                        <MudIconButton Text="Șterge lecția" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteLesson(context.LessonId) )" Class="pa-0" Style="margin-left: 7px;" />
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudDialog @bind-IsVisible="visibleAddLesson" Options="dialogOptionsForAddLesson">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă o lecție nouă</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudText Typo="Typo.body1">
                <strong>Pentru început, selectează tipul de competență lingvistică pe care vrei să te concentrezi în noua lecție:</strong>
            </MudText>

            <MudSelect T="LanguageCompetenceElement" Label="Competența Lingvistică:" @bind-Value="selectedCompetence" Style="margin-top: 10px;">
                @foreach (var competence in LanguageCompetences)
                {
                    <MudSelectItem Value="@competence">@competence.LanguageCompetenceName</MudSelectItem>
                }
            </MudSelect>

        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CancelAddLesson" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton Disabled="selectedCompetence == null" OnClick="@(async () => NextStepAddLesson(selectedCompetence))" Style="color: #2563EB;">Next</MudButton>

        </DialogActions>
    </MudDialog>

    <MudDialog @bind-IsVisible="visibleAddListeningLesson" Options="dialogOptionsForAddListeningLesson">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă o lecție nouă Listening</span>
            </MudText>
        </TitleContent>
        <DialogContent>

            <MudText Typo="Typo.body1">Pentru a adăuga o lecție de tip <strong>Listening</strong>, va fi necesar să introduceți un text care va servi drept <strong>script</strong> pentru funcția de text-to-speech din aplicație. 
                Acest text va fi transformat în audio și utilizat de către useri pentru exercițiile de ascultare. Asigurați-vă că textul este clar, corect din punct de vedere gramatical și adecvat nivelului de 
                înțelegere al utilizatorilor. <strong>Textul redactat va trebui să fie scris în limba în care se desfășoară cursul.</strong></MudText>

            <MudTextField T="string" @bind-Value="addListeningLesson.LessonTitle" Label="Titlu"></MudTextField>
            <MudTextField T="string" @bind-Value="addListeningLesson.TextScript" Label="Textul Script:"></MudTextField>
            <MudText Typo="Typo.h6" @bind-Value="addListeningLesson.Accents" >Acente</MudText>
            @foreach (var accent in addListeningLesson.Accents)
            {
                <MudCheckBox @bind-Checked="@accent.IsChecked">@accent.AccentName</MudCheckBox>
            }

        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="GoBackToStep1" Class="px-10" Style="color: black;">Back</MudButton>
            <MudButton Disabled="@(!IsListeningLesson(addListeningLesson))" OnClick="@(async () => AddListeningLesson(addListeningLesson))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

    <MudDialog @bind-IsVisible="visibleAddNormalLesson" Options="dialogOptionsForAddNormalLesson">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă o lecție nouă Normal</span>
            </MudText>
        </TitleContent>
        <DialogContent>

            <MudText Typo="Typo.body1">Pentru a adăuga o lecție de tip <strong>Listening</strong>, va fi necesar să introduceți un text care va servi drept <strong>script</strong> pentru funcția de text-to-speech din aplicație. 
                Acest text va fi transformat în audio și utilizat de către useri pentru exercițiile de ascultare. Asigurați-vă că textul este clar, corect din punct de vedere gramatical și adecvat nivelului de 
                înțelegere al utilizatorilor. <strong>Textul redactat va trebui să fie scris în limba în care se desfășoară cursul.</strong></MudText>

            <MudTextField T="string" @bind-Value="addLesson.LessonTitle" Label="Titlu"></MudTextField>

        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="GoBackToStep1" Class="px-10" Style="color: black;">Back</MudButton>
            <MudButton Disabled="@(!IsLesson(addLesson))" OnClick="@(async () => AddLesson(addLesson))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

    <MudDialog @bind-IsVisible="visibleEditLesson" Options="dialogOptionsForEditLesson">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Examinează și ajustează conținutul lecției</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudPaper Class="pa-6" Style="margin-bottom: 40px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);">
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" OnValidSubmit="OnSubmit" Model="lessonRequest">
                    <MudTextField T="Guid" Label="Competența Lingvistică" Disabled="true" @bind-Value="lessonRequest.LanguageCompetenceId"></MudTextField>
                    <MudTextField T="string" Label="Titlu" @bind-Value="lessonRequest.LessonTitle"></MudTextField>
                    <MudTextField T="string" Label="Descriere" @bind-Value="lessonRequest.LessonDescription"></MudTextField>
                    <MudTextField T="string" Label="Conținut" @bind-Value="lessonRequest.LessonContent"></MudTextField>
                    <MudTextField T="string" Label="Link Video" @bind-Value="lessonRequest.LessonVideoLink"></MudTextField>
                    <MudTextField T="string" Label="Link Imagine" @bind-Value="lessonRequest.LessonImageLink"></MudTextField>
                    <MudTextField T="int?" Label="Nr. Crt." @bind-Value="lessonRequest.LessonPriorityNumber"></MudTextField>
                    <MudTextField T="string" Label="Text Script" @bind-Value="lessonRequest.TextScript"></MudTextField>
                    <MudText Typo="Typo.h6">Acente</MudText>
                    @foreach (var accent in Accents)
                    {
                        <MudCheckBox @bind-Checked="@accent.IsChecked">@accent.AccentName</MudCheckBox>
                    }
                </MudForm>
            </MudPaper>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CancelEditLesson" Class="px-10" Style="color: black;">Cancel</MudButton>
            <MudButton OnClick="@(async () => EditLesson(lessonRequest))" Style="color: #2563EB;" Disabled="@(!success)">Save</MudButton>
        </DialogActions>
    </MudDialog>

</div>


@* KEW WORDS *@
@code {
    private Snackbar snackbar;
    private bool visible;
    private string currentField;
    private string newValue;
    private bool isModified = false;
    private string keyWord;

    void Submit()
    {
        visible = false;
    }

    void Cancel() => visible = false;

    void OpenDialog()
    {
        visible = true;
    }

    private DialogOptions dialogOptions = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void AddKeyWord(string keyWord)
    {
        visible = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Cuvântul cheie a fost adăugat cu succes!", Severity.Success);
    }

    protected override async Task OnInitializedAsync()
    {
        await PopulateKewWords();
        await PopulateLessonsTable();
        await PopulateAccents();
        await PopulateLanguagesCompetences();
    }

    private IEnumerable<string> KewWords = new List<string>();
    int containerWidth = 333; // Width of MudContainer (in vh units)
    int totalWidth; // Total width of elements (in vh units)
    int numRows; // Number of rows needed

    private async Task PopulateKewWords()
    {
        KewWords = new List<string>
        {
            "Cuvânt cheie 1",
            "Cuvânt cheie 2",
            "Cuvânt cheie 3"
        };

        // Elements = await httpClient.GetFromJsonAsync<List<AdminElement>>("webapi/periodictable");
    }

    void CalculateRowsAndWidth()
    {
        totalWidth = KewWords.Sum(kw => kw.Length);
        numRows = (int)Math.Ceiling((double)totalWidth / containerWidth);
    }
}


@* VIEW & EDIT LESSONS *@
@code {
    private bool dense = false;
    private bool hover = true;
    private List<string> editEvents = new();
    private bool ronly = false;
    private bool canCancelEdit = true;
    private bool blockSwitch = false;
    private string searchString = "";
    private ListeningLessonElement selectedLesson = null;
    private ListeningLessonElement elementBeforeEdit;
    private HashSet<ListeningLessonElement> selectedItems1 = new HashSet<ListeningLessonElement>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;
    private IEnumerable<ListeningLessonElement> Lessons = new List<ListeningLessonElement>();

    protected async Task PopulateLessonsTable()
    {
        Lessons = new List<ListeningLessonElement>
        {
            new ListeningLessonElement
            {
                LessonTitle = "First Lesson",
                LessonDescription = "The first lesson is about the alphabet",
                LessonContent = "We will start with the letter A",
                LessonVideoLink = "https://www.youtube.com/watch?v=EzlRcGUdhA4&ab_channel=TheMotans-Topic",
                LessonImageLink = "https://img.freepik.com/free-vector/hand-drawn-english-school-illustration-design_23-2149525060.jpg?w=900&t=st=1712134206",
                LessonPriorityNumber = 1,
                LanguageCompetenceId = Guid.NewGuid()
            },
            new ListeningLessonElement
            {
                LessonTitle = "Second Lesson",
                LessonDescription = null,
                LessonContent = null,
                LessonVideoLink = null,
                LessonImageLink = null,
                LessonPriorityNumber = 2,
                LanguageCompetenceId = Guid.NewGuid()
            },
            new ListeningLessonElement
            {
                LessonTitle = "Third Lesson",
                LessonDescription = null,
                LessonContent = null,
                LessonVideoLink = null,
                LessonImageLink = null,
                LessonPriorityNumber = null,
                LanguageCompetenceId = Guid.NewGuid()
            }
        };

        // AdminLanguageElements = await httpClient.GetFromJsonAsync<List<AdminViewLanguageElement>>("webapi/periodictable");
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private bool FilterFuncViewLesson(ListeningLessonElement element) => FilterFuncViewLesson1(element, searchString);

    private bool FilterFuncViewLesson1(ListeningLessonElement element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LessonTitle.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LessonDescription != null && element.LessonDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LessonContent != null && element.LessonContent.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    void DeleteLesson(Guid lessonId)
    {
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Lecția a fost ștearsă cu succes!", Severity.Success);
    }
}


@* DIALOG ADD LESSON *@
@code {
    private bool visibleAddLesson;
    private bool visibleAddListeningLesson;
    private bool visibleAddNormalLesson;
    private string LanguageLevelNameValue;
    private string LanguageLevelAliasValue;
    private DialogOptions dialogOptionsForAddLesson = new() { FullWidth = true, MaxWidth = MaxWidth.Small };
    private DialogOptions dialogOptionsForAddListeningLesson = new() { FullWidth = true, MaxWidth = MaxWidth.Small };
    private DialogOptions dialogOptionsForAddNormalLesson = new() { FullWidth = true, MaxWidth = MaxWidth.Small };
    private IEnumerable<LanguageCompetenceElement> LanguageCompetences = new List<LanguageCompetenceElement>();
    private LanguageCompetenceElement selectedCompetence;
    LessonElement addLesson;
    ListeningLessonElement addListeningLesson;

    protected async Task PopulateLanguagesCompetences()
    {
        LanguageCompetences = new List<LanguageCompetenceElement>
        {
            new LanguageCompetenceElement
            {
                LanguageCompetenceName = "Listening",
                LanguageCompetenceType = LanguageCompetenceTypeElement.Listening,
                LanguageCompetenceDescription = "Descriere sasa lorem ipsum vede vidi vici bini",
                LanguageCompetenceVideoLink = "https://www.youtube.com/watch?v=EzlRcGUdhA4&ab_channel=TheMotans-Topic",
                LanguageCompetencePriorityNumber = 1
            },
            new LanguageCompetenceElement
            {
                LanguageCompetenceName = "Writing",
                LanguageCompetenceType = LanguageCompetenceTypeElement.Writing,
                LanguageCompetenceDescription = null,
                LanguageCompetenceVideoLink = null,
                LanguageCompetencePriorityNumber = null
            }
        };

        // AdminLanguageElements = await httpClient.GetFromJsonAsync<List<AdminViewLanguageElement>>("webapi/periodictable");
    }

    void CancelAddLesson() => visibleAddLesson = false;

    void NextStepAddLesson(LanguageCompetenceElement element)
    {
        visibleAddLesson = false;

        if (element.LanguageCompetenceType == LanguageCompetenceTypeElement.Listening)
        {
            addListeningLesson = new ListeningLessonElement();
            addListeningLesson.Accents = Accents.ToList();
            visibleAddListeningLesson = true;
        }
        else
        {
            addLesson = new LessonElement();
            visibleAddNormalLesson = true;
        }
    }

    void GoBackToStep1()
    {
        visibleAddListeningLesson = false;
        visibleAddNormalLesson = false;
        visibleAddLesson = true;
    }

    void AddLesson(LessonElement lesson)
    {
        visibleAddNormalLesson = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Lecția '" + lesson.LessonTitle + "' a fost creată cu succes!", Severity.Success);
    }

    void AddListeningLesson(ListeningLessonElement lesson)
    {
        visibleAddListeningLesson = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Lecția '" + lesson.LessonTitle + "' a fost creată cu succes!", Severity.Success);
    }

    bool IsLesson(LessonElement lesson)
    {
        return !string.IsNullOrWhiteSpace(lesson.LessonTitle);
    }

    bool IsListeningLesson(ListeningLessonElement lesson)
    {
        return !string.IsNullOrWhiteSpace(lesson.LessonTitle) 
            && !string.IsNullOrWhiteSpace(lesson.TextScript)
            && lesson.Accents.Any(a => a.IsChecked);
    }


    void OpenDialogAddLesson()
    {
        visibleAddLesson = true;
    }

    void NavigateToLessonOverview()
    {
        NavigationManager.NavigateTo("/lesson-overview");
    }
}



@* DIALOG EDIT LESSON *@
@code {
    private bool visibleEditLesson;
    private DialogOptions dialogOptionsForEditLesson = new() { FullWidth = true, MaxWidth = MaxWidth.Small };
    ListeningLessonElement lessonRequest { get; set; } = new ListeningLessonElement();
    MudForm form;
    bool success;
    string[] errors = { };
    private IEnumerable<AccentElement> Accents = new List<AccentElement>();

    protected async Task PopulateAccents()
    {
        Accents = new List<AccentElement>
        {
            new AccentElement
            {
                AccentId = Guid.NewGuid(),
                AccentName = "British"
            },
            new AccentElement
            {
                AccentId = Guid.NewGuid(),
                AccentName = "American"
            },
            new AccentElement
            {
                AccentId = Guid.NewGuid(),
                AccentName = "Scottish"
            }
        };

        // AdminLanguageElements = await httpClient.GetFromJsonAsync<List<AdminViewLanguageElement>>("webapi/periodictable");
    }


    void CancelEditLesson() => visibleEditLesson = false;

    void EditLesson(ListeningLessonElement lesson)
    {
        visibleEditLesson = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Informatiile au fost actualizate cu succes! Titlu: " + lesson.LessonTitle, Severity.Success);
    }

    void OpenDialogEditLesson(ListeningLessonElement lesson)
    {
        lesson.Accents = Accents.ToList();
        lessonRequest = lesson;
        visibleEditLesson = true;
    }
}