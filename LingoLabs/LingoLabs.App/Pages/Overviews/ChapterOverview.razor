@page "/chapter-overview/{Id}"
@using LingoLabs.App.Contracts.AuthContracts
@using LingoLabs.App.Contracts.LanguageContracts
@using LingoLabs.App.ViewModel.LanguageModels
@using LingoLabs.App.ViewModel.MudBlazor
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@using static MudBlazor.CategoryTypes
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top: -10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -45px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -30px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -15px; max-width: 150px;">
    <img src="/images/homepage/jos.png" style="position: absolute; bottom: 0; right: 0; max-width: 150px;">
    <img src="/images/homepage/sus.png" style="position: absolute; top: 0; right: 0; max-width: 200px;">
</div>

<MudContainer>
    <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom:50px;">
        <div class="col-md-6 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
            <div class="row">
                <h2 style="color: #2563EB; padding: 20px; margin-top: 10px;" class="poppins-semi-bold">Capitol - Overview</h2>
            </div>
        </div>
    </div>
</MudContainer>

@* CHAPTER - GET BY ID *@

@if(!IsChapterLoaded)
{
    <div class="row mx-0 justify-content-md-center">
        <div class="col-md-6 d-flex flex-column align-items-center justify-item-center" style="margin-top: 50px;">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </div>
    </div>
}
else {
<div class="row" style="max-width: 100vw; overflow-x: auto;">
    <div class="col">
        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 80px; margin-top: 50px; margin-bottom: 20px;" class="poppins-semi-bold">
                Nivelul Lingvistic:&emsp;
                <span style="color: #FC6F05; font-size: 25px;">
                    @chapter.LanguageLevelName
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 75px; padding: 5px; margin-bottom: 20px;" class="poppins-semi-bold">
                Nume:&emsp;
                <span style="color: #2563EB; font-size: 25px;">
                    @chapter.ChapterName
                </span>
            </h1>
        </div

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Descriere:&emsp;
                @if (!string.IsNullOrEmpty(@chapter.ChapterDescription))
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                        @chapter.ChapterDescription
                    </span>
                }
                else
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">-</span>
                }
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Nr. Crt.:&emsp;
                @if (chapter.ChapterPriorityNumber != 0 || chapter.ChapterPriorityNumber != null)
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                            @chapter.ChapterPriorityNumber
                    </span>
                }
                else
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">-</span>
                }
            </h1>
        </div>

        @if (!string.IsNullOrEmpty(chapter.ChapterVideoLink))
        {
            <div class="row">
                <!-- First Column (1/3 width) -->
                <div class="col-md-4">
                    <div class="text-left">
                        <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                            Video:
                        </h1>
                    </div>
                </div>

                <!-- Second Column (2/3 width) -->
                <div class="col-md-8">
                    <iframe style="width: 426px; height: 240px; margin-top: 9px;" src="chapter.ChapterVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <!-- First Column (1/3 width) -->
                <div class="col-md-4">
                    <div class="text-left">
                        <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                            Video: -
                        </h1>
                    </div>
                </div>
            </div>
        }


    </div>

    @if (!string.IsNullOrEmpty(chapter.ChapterImageData))
    {
        <div class="col">
            <div style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                <div class="row">
                    <div class="text-center">
                        <h1 style="color: black; font-size: 33px; padding: 5px; margin-top: 50px;" class="poppins-semi-bold">
                            Imagine:
                        </h1>
                    </div>
                </div>

                <div class="row justify-content-center">
                    <img src="@chapter.ChapterImageData" alt="Chapter Image" style="width: 350px; height: auto;">
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="col">
            <div style="display: flex; flex-direction: column; justify-content: center; height: 100%;">
                <div class="row">
                    <div class="text-center">
                        <h1 style="color: black; font-size: 33px; padding: 5px; margin-top: 50px;" class="poppins-semi-bold">
                            Imagine: -
                        </h1>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@* KEY WORDS *@
@* <div class="text-left" style="max-width: 100vw; overflow-x: auto;">
    <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
        Cuvinte cheie:
    </h1>

    <MudContainer Style="overflow-x: hidden;">
        <div class="row mx-0" style="margin-top: 25px; margin-bottom: 50px; width: 333vh; min-height: 12vh;">
            <div class="col-md-6" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <MudTooltip>
                    <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #2563EB; color: white; position: absolute; right: -25px; top: -25px;" @onclick='() => OpenDialog()' />
                </MudTooltip>

                <MudStack Row="true">
                    @foreach (var item in KewWords)
                    {
                        <MudPaper Class="pa-3" Style="background-color: #02497E; color: white;">@item</MudPaper>
                    }
                </MudStack>
            </div>
        </div>
    </MudContainer>

    <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă un cuvânt cheie</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" @bind-Value="keyWord" Label="Nume"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Cancel" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton Disabled="keyWord == null" OnClick="@(async () => AddKeyWord(keyWord))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

</div>
 *@

@* LESSONS *@
<div class="text-left">
    <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 30px;" class="poppins-semi-bold">Lecții</h1>
</div>

<div style="max-width: 80%; margin: auto; margin-bottom: 55px;">
    <MudTable Items="@chapter.ChapterLessons" Dense="@dense" Hover="@hover" ReadOnly="@ronly" Filter="new Func<ListeningLessonViewModel,bool>(FilterFuncViewLesson)"
              @bind-SelectedItem="selectedLesson" SortLabel="Sort By" IsEditRowSwitchingBlocked="@blockSwitch" >
        <ToolBarContent>
            <MudText Typo="Typo.h6">Lecții</MudText>
            <MudSpacer />
            <div class="text-center" style="width: 55%;">
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
            </div>
            @if (!AreLanguageCompetencesLoaded)
            {
                <MudTooltip>
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" Style="background-color: #FC6F05; color: white;"/>
                </MudTooltip>
            }
            else if (!languageCompetences.Any())
            {
                <MudTooltip Text="Nu există nicio competență lingvistică creată. Crează una mai întâi și revino aici mai apoi.">
                    <MudFab Icon="@Icons.Material.Filled.Cancel" Style="background-color: gray; color: white;" OnClick="() => NavigateToLanguageOverview()" />
                </MudTooltip>
            }
            else {
                <MudTooltip Text="Add">
                    <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialogAddLesson()' />
                </MudTooltip>
            }
        </ToolBarContent>

        <HeaderContent>
            <MudTh Style="text-align: center;">Nr. Crt.</MudTh>
            <MudTh Style="text-align: center;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ListeningLessonElement, object>(x=>x.LessonTitle)">Titlu</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;">Descriere</MudTh>
            <MudTh Style="text-align: center;">Conținut</MudTh>
            <MudTh Style="text-align: center;">Vizualizează</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr. Crt." Style="text-align: center;">@(context.LessonPriorityNumber.HasValue ? context.LessonPriorityNumber.ToString() : "-")</MudTd>
            <MudTd DataLabel="Titlu" Style="text-align: center;">@context.LessonTitle</MudTd>
            <MudTd DataLabel="Descriere" Style="text-align: center;">@(string.IsNullOrEmpty(context.LessonDescription) ? "-" : context.LessonDescription)</MudTd>
            <MudTd DataLabel="Conținut" Style="text-align: center;">@(string.IsNullOrEmpty(context.LessonContent) ? "-" : context.LessonContent)</MudTd>
            <MudTd DataLabel="Vizualizează" Style="text-align: center;">
                <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => NavigateToLessonOverview(context.LessonId) )">Vezi mai multe</MudButton>
            </MudTd>
            <MudTd>
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <MudTooltip Text="Vizualizează & Modifică">
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Visibility" Class="pa-0" OnClick="@( () => OpenDialogEditLesson(context) )" Style="margin-right: 7px;" />
                    </MudTooltip>
                    <MudTooltip Text="Șterge Lecția">
                        <MudIconButton Text="Șterge lecția" Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@( () => DeleteLesson(context.LessonId) )" Class="pa-0" Style="margin-left: 7px;" />
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudDialog @bind-IsVisible="visibleAddLesson" Options="dialogOptionsForAddLesson">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă o lecție nouă</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudText Typo="Typo.body1">
                <strong>Pentru început, selectează tipul de competență lingvistică pe care vrei să te concentrezi în noua lecție:</strong>
            </MudText>

            <MudSelect T="LanguageCompetenceViewModel" Label="Competența Lingvistică:" @bind-Value="selectedCompetence" Style="margin-top: 10px;">
                @foreach (var competence in languageCompetences)
                {
                    <MudSelectItem Value="@competence">@competence.LanguageCompetenceName</MudSelectItem>
                }
            </MudSelect>

        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CancelAddLesson" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton Disabled="selectedCompetence == null" OnClick="@(async () => NextStepAddLesson(selectedCompetence))" Style="color: #2563EB;">Next</MudButton>

        </DialogActions>
    </MudDialog>

    <MudDialog @bind-IsVisible="visibleAddListeningLesson" Options="dialogOptionsForAddListeningLesson">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă o lecție nouă</span>
            </MudText>
        </TitleContent>
        <DialogContent>

            <MudText Typo="Typo.body1">Pentru a adăuga o lecție de tip <strong>Listening</strong>, va fi necesar să introduceți un text care va servi drept <strong>script</strong> pentru funcția de text-to-speech din aplicație. 
                Acest text va fi transformat în audio și utilizat de către useri pentru exercițiile de ascultare. Asigurați-vă că textul este clar, corect din punct de vedere gramatical și adecvat nivelului de 
                înțelegere al utilizatorilor. <strong>Textul redactat va trebui să fie scris în limba în care se desfășoară cursul.</strong></MudText>

            <MudTextField T="string" @bind-Value="addListeningLesson.LessonTitle" Label="Titlu"></MudTextField>
            <MudTextField T="string" @bind-Value="addListeningLesson.TextScript" Label="Textul Script:"></MudTextField>
            <MudText Typo="Typo.h6" @bind-Value="addListeningLesson.Accents" >Acente</MudText>
            @foreach (var accent in addListeningLesson.Accents)
            {
                <MudCheckBox @bind-Checked="@accent.IsChecked">@accent.AccentName</MudCheckBox>
            }

        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="GoBackToStep1" Class="px-10" Style="color: black;">Back</MudButton>
            <MudButton Disabled="@(!IsListeningLesson(addListeningLesson))" OnClick="@(async () => AddListeningLesson(addListeningLesson))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

    <MudDialog @bind-IsVisible="visibleAddNormalLesson" Options="dialogOptionsForAddNormalLesson">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă o lecție nouă</span>
            </MudText>
        </TitleContent>
        <DialogContent>

            <MudTextField T="string" @bind-Value="addLesson.LessonTitle" Label="Titlu"></MudTextField>

        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="GoBackToStep1" Class="px-10" Style="color: black;">Back</MudButton>
            <MudButton Disabled="@(!IsLesson(addLesson))" OnClick="@(async () => AddLesson(addLesson))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

    <MudDialog @bind-IsVisible="visibleEditLesson" Options="dialogOptionsForEditLesson">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Examinează și ajustează conținutul lecției</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudPaper Class="pa-6" Style="margin-bottom: 40px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);">
                @if(editListeningLesson != null && editLesson == null)
                {
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" OnValidSubmit="OnSubmit" Model="editListeningLesson">
                        <MudTextField T="string" Label="Titlu" @bind-Value="editListeningLesson.LessonTitle"></MudTextField>
                        <MudTextField T="string" Label="Descriere" @bind-Value="editListeningLesson.LessonDescription"></MudTextField>
                        <MudTextField T="string" Label="Conținut" @bind-Value="editListeningLesson.LessonContent"></MudTextField>
                        <MudTextField T="string" Label="Link Video" @bind-Value="editListeningLesson.LessonVideoLink"></MudTextField>
                        <MudTextField T="string" Label="Link Imagine" @bind-Value="editListeningLesson.LessonImageData"></MudTextField>
                        <MudTextField T="int?" Label="Nr. Crt." @bind-Value="editListeningLesson.LessonPriorityNumber"></MudTextField>
                        <MudTextField T="string" Label="Text Script" @bind-Value="editListeningLesson.TextScript"></MudTextField>
                        <MudText Typo="Typo.h6">Acente</MudText>
                        @foreach (var accent in Accents)
                        {
                            <MudCheckBox @bind-Checked="@accent.IsChecked">@accent.AccentName</MudCheckBox>
                        }
                    </MudForm>
                } else if (editListeningLesson == null && editLesson != null)
                {
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" OnValidSubmit="OnSubmit" Model="editLesson">
                        <MudTextField T="string" Label="Titlu" @bind-Value="editLesson.LessonTitle"></MudTextField>
                        <MudTextField T="string" Label="Descriere" @bind-Value="editLesson.LessonDescription"></MudTextField>
                        <MudTextField T="string" Label="Conținut" @bind-Value="editLesson.LessonContent"></MudTextField>
                        <MudTextField T="string" Label="Cerinţă" @bind-Value="editLesson.LessonRequirement"></MudTextField>
                        <MudTextField T="string" Label="Link Video" @bind-Value="editLesson.LessonVideoLink"></MudTextField>
                        <MudTextField T="string" Label="Link Imagine" @bind-Value="editLesson.LessonImageData"></MudTextField>
                        <MudTextField T="int?" Label="Nr. Crt." @bind-Value="editLesson.LessonPriorityNumber"></MudTextField>
                    </MudForm>
                }
                </MudPaper>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CancelEditLesson" Class="px-10" Style="color: black;">Cancel</MudButton>
            @if(editListeningLesson != null && editLesson == null)
            {
                <MudButton Disabled="!ValidateEditListeningLesson()" OnClick="@(async () => EditListeningLesson(editListeningLesson))" Style="color: #2563EB;">Save</MudButton>
            } else if (editListeningLesson == null && editLesson != null)
            {
                <MudButton Disabled="!ValidateEditLesson()" OnClick="@(async () => EditLesson(editLesson))" Style="color: #2563EB;">Save</MudButton>
            }
        </DialogActions>
    </MudDialog>

</div>
}


@code {
    [Inject]
    private IChapterDataService ChapterDataService { get; set; }
    [Inject]
    private ILessonDataService LessonDataService { get; set; }
    [Inject]
    private ILanguageLevelDataService LanguageLevelDataService { get; set; }
    [Inject]
    private IListeningLessonDataService ListeningLessonDataService { get; set; }
    [Inject]
    private ILanguageDataService LanguageDataService { get; set; }
    [Parameter]
    public string Id { get; set; }
    private Guid CurrentChapterId = Guid.Empty;
    Guid languageId = Guid.Empty;
    private ChapterViewModel chapter = new ChapterViewModel();
    private List<LanguageCompetenceViewModel> languageCompetences = new List<LanguageCompetenceViewModel>();
    private bool IsChapterLoaded = false;
    private bool AreLanguageCompetencesLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        CurrentChapterId = Guid.Parse(Id);

        chapter = await ChapterDataService.GetChapterByIdAsync(CurrentChapterId);
        IsChapterLoaded = true;

        Guid languageLevelId = chapter.LanguageLevelId;

        LanguageLevelViewModel languageLevel = await LanguageLevelDataService.GetLanguageLevelByIdAsync(languageLevelId);

        languageId = languageLevel.LanguageId;

        LanguageViewModel language = await LanguageDataService.GetLanguageByIdAsync(languageId);

        languageCompetences = language.LanguageCompetences.ToList();

        AreLanguageCompetencesLoaded = true;

        await PopulateKewWords();
        await PopulateAccents();
    }
}

@* KEW WORDS *@
@functions {
    private Snackbar snackbar;
    private bool visible;
    private string currentField;
    private string newValue;
    private bool isModified = false;
    private string keyWord;

    void Submit()
    {
        visible = false;
    }

    void Cancel() => visible = false;

    void OpenDialog()
    {
        visible = true;
    }

    private DialogOptions dialogOptions = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void AddKeyWord(string keyWord)
    {
        visible = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Cuvântul cheie a fost adăugat cu succes!", Severity.Success);
    }

    private IEnumerable<string> KewWords = new List<string>();
    int containerWidth = 333; // Width of MudContainer (in vh units)
    int totalWidth; // Total width of elements (in vh units)
    int numRows; // Number of rows needed

    private async Task PopulateKewWords()
    {
        KewWords = new List<string>
        {
            "Cuvânt cheie 1",
            "Cuvânt cheie 2",
            "Cuvânt cheie 3"
        };

        // Elements = await httpClient.GetFromJsonAsync<List<AdminElement>>("webapi/periodictable");
    }

    void CalculateRowsAndWidth()
    {
        totalWidth = KewWords.Sum(kw => kw.Length);
        numRows = (int)Math.Ceiling((double)totalWidth / containerWidth);
    }
}


@* VIEW LESSONS *@
@functions {
    private bool dense = false;
    private bool hover = true;
    private List<string> editEvents = new();
    private bool ronly = false;
    private bool canCancelEdit = true;
    private bool blockSwitch = false;
    private string searchString = "";
    private ListeningLessonViewModel selectedLesson = null;
    private ListeningLessonViewModel elementBeforeEdit;
    private HashSet<ListeningLessonViewModel> selectedItems1 = new HashSet<ListeningLessonViewModel>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private bool FilterFuncViewLesson(ListeningLessonViewModel element) => FilterFuncViewLesson1(element, searchString);

    private bool FilterFuncViewLesson1(ListeningLessonViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LessonTitle.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LessonDescription != null && element.LessonDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LessonContent != null && element.LessonContent.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async void DeleteLesson(Guid lessonId)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await LessonDataService.DeleteLessonAsync(lessonId);

        if (!response.IsSuccess)
        {
            var errorMessage = "Eroare la ștergerea lecției. :" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Lecția a fost ștearsă cu succes!", Severity.Success);
            chapter = await ChapterDataService.GetChapterByIdAsync(CurrentChapterId);
            StateHasChanged();
        }
    }
}


@* DIALOG ADD LESSON *@
@functions {
    private bool visibleAddLesson;
    private bool visibleAddListeningLesson;
    private bool visibleAddNormalLesson;
    private string LanguageLevelNameValue;
    private string LanguageLevelAliasValue;
    private DialogOptions dialogOptionsForAddLesson = new() { FullWidth = true, MaxWidth = MaxWidth.Small };
    private DialogOptions dialogOptionsForAddListeningLesson = new() { FullWidth = true, MaxWidth = MaxWidth.Small };
    private DialogOptions dialogOptionsForAddNormalLesson = new() { FullWidth = true, MaxWidth = MaxWidth.Small };
    private LanguageCompetenceViewModel selectedCompetence;
    LessonViewModel addLesson;
    ListeningLessonViewModel addListeningLesson;


    void CancelAddLesson() => visibleAddLesson = false;

    void NextStepAddLesson(LanguageCompetenceViewModel element)
    {
        visibleAddLesson = false;

        if (element.LanguageCompetenceType == LanguageCompetenceTypeViewModel.Listening)
        {
            addListeningLesson = new ListeningLessonViewModel
            {
                ChapterId = CurrentChapterId,
                LanguageCompetenceId = element.LanguageCompetenceId,
            };
            addListeningLesson.Accents = Accents.ToList();
            visibleAddListeningLesson = true;
        }
        else
        {
            addLesson = new LessonViewModel
            {
                ChapterId = CurrentChapterId,
                LanguageCompetenceId = element.LanguageCompetenceId
            };
            visibleAddNormalLesson = true;
        }
    }

    void GoBackToStep1()
    {
        visibleAddListeningLesson = false;
        visibleAddNormalLesson = false;
        visibleAddLesson = true;
    }

    async void AddLesson(LessonViewModel lesson)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await LessonDataService.CreateLessonAsync(lesson);

        if (!response.IsSuccess)
        {
            var errorMessage = "Eroare la crearea lecției. :" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            visibleAddNormalLesson = false;
            snackbar = Snackbar.Add("Lecția a fost creată cu succes!", Severity.Success);
            chapter = await ChapterDataService.GetChapterByIdAsync(CurrentChapterId);
            StateHasChanged();
        }
    }

    async void AddListeningLesson(ListeningLessonViewModel lesson)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await ListeningLessonDataService.CreateListeningLessonAsync(lesson);

        if (!response.IsSuccess)
        {
            var errorMessage = "Eroare la crearea lecției. :" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            visibleAddNormalLesson = false;
            snackbar = Snackbar.Add("Lecția a fost creată cu succes!", Severity.Success);
            chapter = await ChapterDataService.GetChapterByIdAsync(CurrentChapterId);
            StateHasChanged();
        }
    }

    bool IsLesson(LessonViewModel lesson)
    {
        return !string.IsNullOrWhiteSpace(lesson.LessonTitle);
    }

    bool IsListeningLesson(ListeningLessonViewModel lesson)
    {
        return !string.IsNullOrWhiteSpace(lesson.LessonTitle) 
            && !string.IsNullOrWhiteSpace(lesson.TextScript)
            && lesson.Accents.Any(a => a.IsChecked);
    }


    void OpenDialogAddLesson()
    {
        visibleAddLesson = true;
    }

    void NavigateToLessonOverview(Guid lessonId)
    {
        NavigationManager.NavigateTo($"/lesson-overview/{lessonId}");
    }

    void NavigateToLanguageOverview()
    {
        NavigationManager.NavigateTo($"/language-overview/{languageId}");
    }
}



@* DIALOG EDIT LESSON *@
@functions {
    private bool visibleEditLesson;
    private DialogOptions dialogOptionsForEditLesson = new() { FullWidth = true, MaxWidth = MaxWidth.Small };
    ListeningLessonViewModel editListeningLesson { get; set; } = new ListeningLessonViewModel();
    LessonViewModel editLesson { get; set; } = new LessonViewModel();
    ListeningLessonViewModel lessonBeforeEdit = new ListeningLessonViewModel();
    MudForm form;
    bool success;
    string[] errors = { };
    private IEnumerable<AccentViewModel> Accents = new List<AccentViewModel>();

    protected async Task PopulateAccents()
    {
        Accents = new List<AccentViewModel>
        {
            new AccentViewModel
            {
                AccentId = Guid.NewGuid(),
                AccentName = "British"
            },
            new AccentViewModel
            {
                AccentId = Guid.NewGuid(),
                AccentName = "American"
            },
            new AccentViewModel
            {
                AccentId = Guid.NewGuid(),
                AccentName = "Scottish"
            }
        };

        // AdminLanguageElements = await httpClient.GetFromJsonAsync<List<AdminViewLanguageElement>>("webapi/periodictable");
    }


    void CancelEditLesson() => visibleEditLesson = false;

    async void EditLesson(LessonViewModel lesson)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await LessonDataService.UpdateLessonAsync(lesson);

        if (!response.IsSuccess)
        {
            var errorMessage = "Eroare la actualizarea lecției. :" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            visibleEditLesson = false;
            snackbar = Snackbar.Add("Lecția a fost actualizată cu succes!", Severity.Success);
            chapter = await ChapterDataService.GetChapterByIdAsync(CurrentChapterId);
            StateHasChanged();
        }
    }

    async void EditListeningLesson(ListeningLessonViewModel lesson)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await ListeningLessonDataService.UpdateListeningLessonAsync(lesson);

        if (!response.IsSuccess)
        {
            var errorMessage = "Eroare la actualizarea lecției. :" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            visibleEditLesson = false;
            snackbar = Snackbar.Add("Lecția a fost actualizată cu succes!", Severity.Success);
            chapter = await ChapterDataService.GetChapterByIdAsync(CurrentChapterId);
            StateHasChanged();
        }
    }

    void OpenDialogEditLesson(ListeningLessonViewModel lesson)
    {
        lesson.Accents = Accents.ToList();

        Guid languageCompetenceId = lesson.LanguageCompetenceId;

        var languageCompetence = languageCompetences.FirstOrDefault(lc => lc.LanguageCompetenceId == languageCompetenceId);

        editListeningLesson = null;
        editLesson = null;

        if (languageCompetence.LanguageCompetenceType == LanguageCompetenceTypeViewModel.Listening)
        {
            editListeningLesson = new ListeningLessonViewModel
            {
                LessonId = lesson.LessonId,
                ChapterId = lesson.ChapterId,
                LanguageCompetenceId = lesson.LanguageCompetenceId,
                LessonTitle = lesson.LessonTitle,
                LessonDescription = lesson.LessonDescription,
                LessonContent = lesson.LessonContent,
                LessonVideoLink = lesson.LessonVideoLink,
                LessonImageData = lesson.LessonImageData,
                LessonPriorityNumber = lesson.LessonPriorityNumber,
                TextScript = lesson.TextScript,
                Accents = lesson.Accents
            };
        }
        else
        {
            editLesson = new LessonViewModel
            {
                LessonId = lesson.LessonId,
                ChapterId = lesson.ChapterId,
                LanguageCompetenceId = lesson.LanguageCompetenceId,
                LessonTitle = lesson.LessonTitle,
                LessonDescription = lesson.LessonDescription,
                LessonContent = lesson.LessonContent,
                LessonVideoLink = lesson.LessonVideoLink,
                LessonImageData = lesson.LessonImageData,
                LessonPriorityNumber = lesson.LessonPriorityNumber
            };
        }
        lessonBeforeEdit = lesson;
        visibleEditLesson = true;
    }

    bool ValidateEditListeningLesson()
    {
        if (string.IsNullOrWhiteSpace(editListeningLesson.LessonTitle) 
            || string.IsNullOrWhiteSpace(editListeningLesson.TextScript) 
            || !editListeningLesson.Accents.Any(a => a.IsChecked) )
        {
            return false;
        }
        if (editListeningLesson.LessonTitle == lessonBeforeEdit.LessonTitle 
            && editListeningLesson.LessonDescription == lessonBeforeEdit.LessonDescription
            && editListeningLesson.LessonContent == lessonBeforeEdit.LessonContent
            && editListeningLesson.LessonVideoLink == lessonBeforeEdit.LessonVideoLink
            && editListeningLesson.LessonImageData == lessonBeforeEdit.LessonImageData
            && editListeningLesson.LessonPriorityNumber == lessonBeforeEdit.LessonPriorityNumber
            && editListeningLesson.TextScript == lessonBeforeEdit.TextScript 
            && editListeningLesson.Accents == lessonBeforeEdit.Accents)
        {
            return false;
        }
        return true;
    }

    bool ValidateEditLesson()
    {
        if (string.IsNullOrWhiteSpace(editLesson.LessonTitle))
        {
            return false;
        }
        if (editLesson.LessonTitle == lessonBeforeEdit.LessonTitle
            && editLesson.LessonDescription == lessonBeforeEdit.LessonDescription
            && editLesson.LessonContent == lessonBeforeEdit.LessonContent
            && editLesson.LessonRequirement == lessonBeforeEdit.LessonRequirement
            && editLesson.LessonVideoLink == lessonBeforeEdit.LessonVideoLink
            && editLesson.LessonImageData == lessonBeforeEdit.LessonImageData
            && editLesson.LessonPriorityNumber == lessonBeforeEdit.LessonPriorityNumber)
        {
            return false;
        }
        return true;
    }
}