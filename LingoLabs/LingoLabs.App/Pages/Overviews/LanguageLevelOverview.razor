@page "/language-level-overview/{Id}"
@using LingoLabs.App.Contracts.LanguageContracts
@using LingoLabs.App.ViewModel.LanguageModels
@using LingoLabs.App.ViewModel.MudBlazor
@using MudBlazor
@using MatBlazor
@using System.Net.Http.Json
@using ViewModel.MudBlazor
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="d-flex justify-content-around bg-secondary mb-3 align-items-center" style="width: 100%; height: 250px; margin-top: -10px; background: linear-gradient(to right, #2563EB, #36A7FC); position: relative; z-index: 1;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -45px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -30px; max-width: 150px;">
    <img src="/images/homepage/line.png" style="position: absolute; top: 0; left: -15px; max-width: 150px;">
    <img src="/images/homepage/jos.png" style="position: absolute; bottom: 0; right: 0; max-width: 150px;">
    <img src="/images/homepage/sus.png" style="position: absolute; top: 0; right: 0; max-width: 200px;">
</div>

<MudContainer>
    <div class="row mx-0 justify-content-md-center" style="margin-top: -175px; margin-bottom:50px;">
        <div class="col-md-6 d-flex flex-column align-items-center justify-content-center" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
            <div class="row">
                <h2 style="color: #2563EB; padding: 20px; margin-top: 10px;" class="poppins-semi-bold">Nivel lingvistic - Overview</h2>
            </div>
        </div>
    </div>
</MudContainer>

@if (!IsDataLoaded)
{
    <div class="row mx-0 justify-content-md-center">
        <div class="col-md-6 d-flex flex-column align-items-center justify-item-center" style="margin-top: 50px;">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </div>
    </div>
}
else {
<div class="row" style="max-width: 100vw; overflow-x: auto;">
    <div class="col">
        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 80px; margin-top: 50px; margin-bottom: 10px;" class="poppins-semi-bold">
                Curs:&emsp;
                <span style="color: #FC6F05; font-size: 25px;">
                    @languageLevel.LanguageName
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 75px; padding: 5px; padding: 5px;" class="poppins-semi-bold">
                Nume:&emsp;
                <span style="color: #2563EB; font-size: 25px;">
                    @languageLevel.LanguageLevelName
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; margin-left: 75px; padding: 5px;" class="poppins-semi-bold">
                Alias:&emsp;
                <span style="color: #2563EB; font-size: 25px;">
                        @languageLevel.LanguageLevelAlias
                </span>
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Descriere:&emsp;
                @if (!string.IsNullOrEmpty(@languageLevel.LanguageLevelDescription))
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                        @languageLevel.LanguageLevelDescription
                    </span>
                }
                else
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">-</span>
                }
            </h1>
        </div>

        <div class="text-left">
            <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
                Nr. Crt.:&emsp;
                @if (languageLevel.LanguageLevelPriorityNumber != 0 || languageLevel.LanguageLevelPriorityNumber != null)
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">
                            @languageLevel.LanguageLevelPriorityNumber
                    </span>
                }
                else
                {
                    <span style="font-size: 21px; color: #2563EB; text-align: justify;">-</span>
                }
            </h1>
        </div>

    </div>

    @if (!string.IsNullOrEmpty(languageLevel.LanguageLevelVideoLink))
    {
        <div class="col align-items-center justify-content-center">
            <div class="row">
                <div class="text-center">
                    <h1 style="color: black; font-size: 33px; padding: 5px; margin-top: 50px;" class="poppins-semi-bold">
                        Video:
                    </h1>
                </div>
            </div>

            <div class="row justify-content-center">
                    <iframe style="width: 600px; height: 338px; margin-top: 5px; margin-bottom: 45px;" src="@languageLevel.LanguageLevelVideoLink" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
            </div>
        </div>
    }
    else
    {
        <div class="col align-items-center justify-content-center">
            <div class="row">
                <div class="text-center">
                    <h1 style="color: black; font-size: 33px; padding: 5px; margin-top: 50px;" class="poppins-semi-bold">
                        Video: -
                    </h1>
                </div>
            </div>
        </div>
    }
</div>
@* 
<div class="text-left" style="max-width: 100vw; overflow-x: auto;">
    <h1 style="color: black; font-size: 33px; padding: 5px; margin-left: 75px;" class="poppins-semi-bold">
        Cuvinte cheie:
    </h1>

    <MudContainer Style="overflow-x: hidden;">
        <div class="row mx-0" style="margin-top: 25px; margin-bottom: 50px; width: 333vh; min-height: 12vh;">
            <div class="col-md-6" style="background-color: #E9EFFD; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); z-index: 1; border-radius: 15px;">
                <MudTooltip>
                    <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #2563EB; color: white; position: absolute; right: -25px; top: -25px;" @onclick='() => OpenDialog()' />
                </MudTooltip>

                <MudStack Row="true">
                    @foreach (var item in KewWords)
                    {
                        <MudPaper Class="pa-3" Style="background-color: #02497E; color: white;">@item</MudPaper>
                    }
                </MudStack>
            </div>
        </div>
    </MudContainer>

    <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă un cuvânt cheie</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" @bind-Value="keyWord" Label="Nume"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Cancel" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton Disabled="keyWord == null" OnClick="@(async () => AddKeyWord(keyWord))" Style="color: #2563EB;">Add</MudButton>

        </DialogActions>
    </MudDialog>

</div> *@

@* CHAPTERS *@
<div class="text-left">
    <h1 style="color: black; font-size: 33px; padding: 15px; margin-left: 80px; margin-top: 40px;" class="poppins-semi-bold">Capitole</h1>
</div>

<div style="max-width: 90%; margin: auto; margin-bottom: 55px;">
    <MudTable Items="@languageLevel.LanguageChapters" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<ChapterViewModel,bool>(FilterFuncViewChapter)"
              @bind-SelectedItem="selectedChapter" SortLabel="Sort By" IsEditRowSwitchingBlocked="@blockSwitch">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Capitole</MudText>
            <MudSpacer />
            <div class="text-center" style="width: 55%;">
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Style="width: 50%;" />
            </div>
            <MudTooltip Text="Add">
                <MudFab Icon="@Icons.Material.Filled.Add" Style="background-color: #FC6F05; color: white;" @onclick='() => OpenDialogAddChapter()' />
            </MudTooltip>
        </ToolBarContent>

        <HeaderContent>
            <MudTh Style="text-align: center;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ChapterElement, object>(x=>x.ChapterPriorityNumber)">Nr. Crt.</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ChapterElement, object>(x=>x.ChapterName)">Nume</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ChapterElement, object>(x=>x.ChapterDescription)">Descriere</MudTableSortLabel></MudTh>
            <MudTh Style="text-align: center;">Link Video</MudTh>
            <MudTh Style="text-align: center;">Link Imagine</MudTh>
            <MudTh Style="text-align: center;">Vizualizează</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr. Crt." Style="text-align: center;">@(context.ChapterPriorityNumber.HasValue ? context.ChapterPriorityNumber.ToString() : "-")</MudTd>
            <MudTd DataLabel="Nume" Style="text-align: center;">@context.ChapterName</MudTd>
            <MudTd DataLabel="Descriere" Class="descriere" Style="text-align: center;">@(string.IsNullOrEmpty(context.ChapterDescription) ? "-" : context.ChapterDescription)</MudTd>
            <MudTd DataLabel="Link Video" Class="video-data" Style="text-align: center;">@(string.IsNullOrEmpty(context.ChapterVideoLink) ? "-" : context.ChapterVideoLink)</MudTd>
            <MudTd DataLabel="Link Imagine" Class="image-data" Style="text-align: center;">@(string.IsNullOrEmpty(context.ChapterImageData) ? "-" : context.ChapterImageData)</MudTd>
            <MudTd DataLabel="Vizualizează" Style="text-align: center;">
                <MudButton Variant="Variant.Filled" Style="background-color: #2563EB; color: white;" OnClick="@( () => NavigateToChapterOverview(context.ChapterId) )">Vezi mai multe</MudButton>
            </MudTd>
            <MudTd>
                <div style="display: flex; justify-content: space-between;">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenDialogEditChapter(context)" Class="pa-0" Style="margin-right: 10px;" />
                     <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteChapter(context.ChapterId)" Class="pa-0" Style="margin-left: 10px;" />
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudDialog @bind-IsVisible="visibleAddChapter" Options="dialogOptionsForLanguageLevel">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Adaugă un nou capitol</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="addNewChapter">
                <DataAnnotationsValidator />
                <MudTextField T="string" @bind-Value="addNewChapter.ChapterName" Label="Nume"></MudTextField>
                <ValidationSummary />
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CancelAddChapter" Class="px-10" Style="color: black;">Cancel</MudButton>
            <MudButton Disabled="string.IsNullOrEmpty(addNewChapter.ChapterName)" OnClick="@(async () => AddChapter(addNewChapter))" Style="color: #2563EB;">Add</MudButton>
        </DialogActions>
    </MudDialog>

    <MudDialog @bind-IsVisible="visibleEditChapter" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PlaylistAddCircle" Size="Size.Large" Style="background-color: transparent; color: #2563EB;" />
                <span style="color: #2563EB;">Editează conținutul nivelului de limbă</span>
            </MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="editChapter">
                <DataAnnotationsValidator />
                    <MudTextField T="string" @bind-Value="editChapter.ChapterName" Label="Nume"></MudTextField>
                    <MudTextField T="string" @bind-Value="editChapter.ChapterDescription" Label="Descriere"></MudTextField>
                    <MudTextField T="string" @bind-Value="editChapter.ChapterVideoLink" Label="Link Video"></MudTextField>
                    <MudTextField T="string" @bind-Value="editChapter.ChapterImageData" Label="Link Imagine"></MudTextField>
                    <MudTextField T="int?" @bind-Value="editChapter.ChapterPriorityNumber" Label="Număr de referință"></MudTextField>
                <ValidationSummary />
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="CloseEditChapter" Class="px-10" Style="color: black;">Close</MudButton>
            <MudButton Disabled="!ValidateEditChapter()" OnClick="@(async () => EditChapter(editChapter))" Style="color: #2563EB;">Update</MudButton>

        </DialogActions>
    </MudDialog>
</div>
}

@code {
    [Inject]
    private ILanguageLevelDataService LanguageLevelDataService { get; set; }
    [Inject]
    private IChapterDataService ChapterDataService { get; set; }
    [Parameter]
    public string Id { get; set; }
    private Guid CurrentLanguageLevelId = Guid.Empty;
    private LanguageLevelViewModel languageLevel = new LanguageLevelViewModel();
    bool IsDataLoaded = false;


    protected override async Task OnInitializedAsync()
    {
        CurrentLanguageLevelId = Guid.Parse(Id);

        languageLevel = await LanguageLevelDataService.GetLanguageLevelByIdAsync(CurrentLanguageLevelId);
        IsDataLoaded = true;

        await PopulateKewWords();
        await PopulateLanguageCompetenceList();
    }
}

@* KEW WORDS *@
@functions {
    private Snackbar snackbar;
    private bool visible;
    private string currentField;
    private string newValue;
    private bool isModified = false;
    private string keyWord;

    void Submit()
    {
        visible = false;
    }

    void Cancel() => visible = false;

    void OpenDialog()
    {
        visible = true;
    }

    private DialogOptions dialogOptions = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void AddKeyWord(string keyWord)
    {
        visible = false;
        // Do something
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        snackbar = Snackbar.Add("Cuvântul cheie a fost adăugat cu succes!", Severity.Success);
    }

    private IEnumerable<string> KewWords = new List<string>();
    int containerWidth = 333; // Width of MudContainer (in vh units)
    int totalWidth; // Total width of elements (in vh units)
    int numRows; // Number of rows needed

    private async Task PopulateKewWords()
    {
        KewWords = new List<string>
        {
            "Cuvânt cheie 1",
            "Cuvânt cheie 2",
            "Cuvânt cheie 3"
        };

        // Elements = await httpClient.GetFromJsonAsync<List<AdminElement>>("webapi/periodictable");
    }

    void CalculateRowsAndWidth()
    {
        totalWidth = KewWords.Sum(kw => kw.Length);
        numRows = (int)Math.Ceiling((double)totalWidth / containerWidth);
    }
}

@* VIED & EDIT CHAPTERS *@
@functions {
    private bool dense = false;
    private bool hover = true;
    private List<string> editEvents = new();
    private bool ronly = false;
    private bool canCancelEdit = true;
    private bool blockSwitch = false;
    private string searchString = "";
    private ChapterViewModel elementBeforeEdit;
    private ChapterViewModel selectedChapter;
    private HashSet<ChapterViewModel> selectedItems1 = new HashSet<ChapterViewModel>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;


    private IEnumerable<LanguageCompetenceElement> LanguageCompetences = new List<LanguageCompetenceElement>();
    private Guid selectedCompetenceId;

    protected async Task PopulateLanguageCompetenceList()
    {
        LanguageCompetences = new List<LanguageCompetenceElement>
        {
            new LanguageCompetenceElement
            {
                LanguageCompetenceId = Guid.NewGuid(),
                LanguageCompetenceName = "Vorbire",
                LanguageCompetenceDescription = "Vorbirea este abilitatea de a vorbi fluent și corect într-o limbă străină.",
                LanguageCompetenceVideoLink = "https://www.youtube.com/watch?v=EzlRcGUdhA4&ab_channel=TheMotans-Topic",
                LanguageCompetencePriorityNumber = 1
            },
            new LanguageCompetenceElement
            {
                LanguageCompetenceId = Guid.NewGuid(),
                LanguageCompetenceName = "Ascultare",
                LanguageCompetenceDescription = "Ascultarea este abilitatea de a asculta și înțelege corect ceea ce se spune într-o limbă străină.",
                LanguageCompetenceVideoLink = null,
                LanguageCompetencePriorityNumber = 2
            }
        };

        // AdminLanguageElements = await httpClient.GetFromJsonAsync<List<AdminViewLanguageElement>>("webapi/periodictable");
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private bool FilterFuncViewChapter(ChapterViewModel element) => FilterFuncViewChapter1(element, searchString);

    private bool FilterFuncViewChapter1(ChapterViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ChapterName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ChapterDescription != null && element.ChapterDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async void DeleteChapter(Guid chapterId)
    {
        var response = await ChapterDataService.DeleteChapterAsync(chapterId);

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        if (!response.IsSuccess)
        {
            var errorMessage = "A apărut o eroare la ștergerea capitolului!" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Capitolul a fost șters cu succes!", Severity.Success);
            languageLevel = await LanguageLevelDataService.GetLanguageLevelByIdAsync(CurrentLanguageLevelId);
            StateHasChanged();
        }
    }

    // ADD CHAPTER

    private bool visibleAddChapter;
    private ChapterViewModel addNewChapter;
    private DialogOptions dialogOptionsForLanguageLevel = new() { FullWidth = true, MaxWidth = MaxWidth.Small };

    void CancelAddChapter() => visibleAddChapter = false;

    async void AddChapter(ChapterViewModel addedChapter)
    {
        visibleAddChapter = false;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await ChapterDataService.CreateChapterAsync(addedChapter);

        if (!response.IsSuccess)
        {
            var errorMessage = "A apărut o eroare la adăugarea capitolului!" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            snackbar = Snackbar.Add("Capitolul a fost adăugat cu succes!", Severity.Success);
            languageLevel = await LanguageLevelDataService.GetLanguageLevelByIdAsync(CurrentLanguageLevelId);
            StateHasChanged();
        }
    }

    void OpenDialogAddChapter()
    {
        addNewChapter = new ChapterViewModel
            {
                LanguageLevelId = CurrentLanguageLevelId
            };
        visibleAddChapter = true;
    }


    //EDIT CHAPTER
    private bool visibleEditChapter = false;
    private ChapterViewModel editChapter = new ChapterViewModel();

    void OpenDialogEditChapter(ChapterViewModel chapter)
    {
        editChapter = new ChapterViewModel
        {
            ChapterId = chapter.ChapterId,
            ChapterName = chapter.ChapterName,
            ChapterDescription = chapter.ChapterDescription,
            ChapterPriorityNumber = chapter.ChapterPriorityNumber,
            ChapterVideoLink = chapter.ChapterVideoLink,
            ChapterImageData = chapter.ChapterImageData
        };
        elementBeforeEdit = chapter;
        visibleEditChapter = true;
    }

    void CloseEditChapter()
    {
        visibleEditChapter = false;
    }

    bool ValidateEditChapter()
    {
        if (editChapter.ChapterName == elementBeforeEdit.ChapterName &&
            editChapter.ChapterDescription == elementBeforeEdit.ChapterDescription &&
            editChapter.ChapterPriorityNumber == elementBeforeEdit.ChapterPriorityNumber &&
            editChapter.ChapterVideoLink == elementBeforeEdit.ChapterVideoLink &&
            editChapter.ChapterImageData == elementBeforeEdit.ChapterImageData)
        {
            return false;
        }
        if (string.IsNullOrEmpty(editChapter.ChapterName))
        {
            return false;
        }
        return true;
    }

    async void EditChapter(ChapterViewModel editChapter)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var response = await ChapterDataService.UpdateChapterAsync(editChapter);

        if (!response.IsSuccess)
        {
            var errorMessage = "A apărut o eroare la actualizarea capitolului:" + response.Message;
            if (response.ValidationErrors != null)
            {
                errorMessage += "\n" + string.Join("\n", response.ValidationErrors);
            }
            snackbar = Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else
        {
            visibleEditChapter = false;
            snackbar = Snackbar.Add("Informatiile au fost actualizate cu succes!", Severity.Success);
            languageLevel = await LanguageLevelDataService.GetLanguageLevelByIdAsync(CurrentLanguageLevelId);
            StateHasChanged();
        }
    }

    void NavigateToChapterOverview(Guid chapterId)
    {
        NavigationManager.NavigateTo($"/chapter-overview/{chapterId}");
    }
}